/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var xterm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xterm */ \"./node_modules/xterm/lib/xterm.js\");\n/* harmony import */ var xterm__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xterm__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var xterm_addon_fit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! xterm-addon-fit */ \"./node_modules/xterm-addon-fit/lib/xterm-addon-fit.js\");\n/* harmony import */ var xterm_addon_fit__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xterm_addon_fit__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var xterm_webfont__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! xterm-webfont */ \"./node_modules/xterm-webfont/dist/index.js\");\n/* harmony import */ var xterm_webfont__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(xterm_webfont__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var xterm_css_xterm_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! xterm/css/xterm.css */ \"./node_modules/xterm/css/xterm.css\");\n/* harmony import */ var _initrd_img__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! &/initrd.img */ \"./dist/initrd.img\");\n/* harmony import */ var _vm_devicetree__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./vm/devicetree */ \"./src/vm/devicetree.ts\");\n/* harmony import */ var _vm_vm__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./vm/vm */ \"./src/vm/vm.ts\");\n/* harmony import */ var _sys_system__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./sys/system */ \"./src/sys/system.ts\");\n/* harmony import */ var _public_api__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./public/api */ \"./src/public/api.ts\");\n\n\n\n\n// @ts-ignore\n\n\n\n\n\nclass TerminalDevice {\n    term;\n    resolve;\n    buffer = \"\";\n    constructor(el) {\n        this.term = new xterm__WEBPACK_IMPORTED_MODULE_0__.Terminal({\n            fontFamily: \"JetBrainsMono\",\n            fontSize: 13,\n            rendererType: \"dom\"\n        });\n        const fitAddon = new xterm_addon_fit__WEBPACK_IMPORTED_MODULE_1__.FitAddon();\n        this.term.loadAddon(fitAddon);\n        this.term.loadAddon(new xterm_webfont__WEBPACK_IMPORTED_MODULE_2__());\n        this.term.onData((data) => {\n            if (this.resolve && this.buffer.length == 0) {\n                this.resolve(data);\n                this.resolve = undefined;\n            }\n            else {\n                this.buffer += data;\n            }\n        });\n        fitAddon.fit();\n        // @ts-ignore\n        this.term.loadWebfontAndOpen(el);\n    }\n    async read(count) {\n        return new Promise(x => {\n            if (this.buffer.length) {\n                x(this.buffer);\n                this.buffer = \"\";\n            }\n            else {\n                this.resolve = x;\n            }\n        });\n    }\n    write(str) {\n        this.term.write(str);\n    }\n}\nconst terminal = new TerminalDevice(document.getElementById(\"term\"));\nwindow.onload = async () => setTimeout(async (x) => {\n    const vm = new _vm_vm__WEBPACK_IMPORTED_MODULE_6__.VirtualMachine((0,_vm_devicetree__WEBPACK_IMPORTED_MODULE_5__.discover)([\n        (0,_vm_devicetree__WEBPACK_IMPORTED_MODULE_5__.DeviceDetail)(\"initrd\", {\n            compatibility: [\"storage:image\"],\n            image: _initrd_img__WEBPACK_IMPORTED_MODULE_4__\n        }),\n        (0,_vm_devicetree__WEBPACK_IMPORTED_MODULE_5__.DeviceDetail)(\"serial\", {\n            compatibility: [\"serial:terminal\"],\n            write: (buf) => terminal.write(buf),\n            read: (count) => terminal.read(count)\n        }),\n        (0,_vm_devicetree__WEBPACK_IMPORTED_MODULE_5__.DeviceDetail)(\"console\", {\n            compatibility: [\"display:console\"],\n            write: (buf) => console.log(buf)\n        }),\n    ]));\n    try {\n        await vm.boot(new _sys_system__WEBPACK_IMPORTED_MODULE_7__.System({\n            serial: \"/dev/serial\",\n            initrd: \"#💾/initrd\",\n            filesrv: \"memfs\",\n            initrc: \"/bin/init\"\n        }));\n    }\n    catch (e) {\n        if (e instanceof _public_api__WEBPACK_IMPORTED_MODULE_8__.PError) {\n            console.error(\"Caught \" + _public_api__WEBPACK_IMPORTED_MODULE_8__.Status[e.code]);\n        }\n        else {\n            console.error(e);\n        }\n    }\n}, 100);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWFpbi50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3NzaW1waWJsZS8uL3NyYy9tYWluLnRzP2NkNDkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUZXJtaW5hbH0gZnJvbSBcInh0ZXJtXCI7XG5pbXBvcnQge0ZpdEFkZG9ufSBmcm9tIFwieHRlcm0tYWRkb24tZml0XCI7XG5pbXBvcnQgKiBhcyBYdGVybVdlYmZvbnQgZnJvbSAneHRlcm0td2ViZm9udCdcbmltcG9ydCBcInh0ZXJtL2Nzcy94dGVybS5jc3NcIjtcblxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IGluaXRyZCBmcm9tIFwiJi9pbml0cmQuaW1nXCI7XG5pbXBvcnQge0RldmljZURldGFpbCwgZGlzY292ZXJ9IGZyb20gXCIuL3ZtL2RldmljZXRyZWVcIjtcbmltcG9ydCB7VmlydHVhbE1hY2hpbmV9IGZyb20gXCIuL3ZtL3ZtXCI7XG5pbXBvcnQge1N5c3RlbX0gZnJvbSBcIi4vc3lzL3N5c3RlbVwiO1xuaW1wb3J0IHtQRXJyb3IsIFN0YXR1c30gZnJvbSBcIi4vcHVibGljL2FwaVwiO1xuXG5cbmNsYXNzIFRlcm1pbmFsRGV2aWNle1xuICAgIHByaXZhdGUgdGVybTogVGVybWluYWw7XG4gICAgcHJpdmF0ZSByZXNvbHZlOiAoKHZhbHVlOiAoc3RyaW5nIHwgUHJvbWlzZUxpa2U8c3RyaW5nPikpID0+IHZvaWQpIHwgdW5kZWZpbmVkO1xuICAgIHByaXZhdGUgYnVmZmVyOiBzdHJpbmcgPSBcIlwiO1xuXG4gICAgY29uc3RydWN0b3IoZWw6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIHRoaXMudGVybSA9IG5ldyBUZXJtaW5hbCh7XG4gICAgICAgICAgICBmb250RmFtaWx5OiBcIkpldEJyYWluc01vbm9cIixcbiAgICAgICAgICAgIGZvbnRTaXplOjEzLFxuICAgICAgICAgICAgcmVuZGVyZXJUeXBlOiBcImRvbVwiXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBmaXRBZGRvbiA9IG5ldyBGaXRBZGRvbigpO1xuXG4gICAgICAgIHRoaXMudGVybS5sb2FkQWRkb24oZml0QWRkb24pO1xuICAgICAgICB0aGlzLnRlcm0ubG9hZEFkZG9uKG5ldyBYdGVybVdlYmZvbnQoKSlcblxuICAgICAgICB0aGlzLnRlcm0ub25EYXRhKChkYXRhKSA9PiB7XG4gICAgICAgICAgICBpZih0aGlzLnJlc29sdmUgJiYgdGhpcy5idWZmZXIubGVuZ3RoID09IDApe1xuICAgICAgICAgICAgICAgIHRoaXMucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc29sdmUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlciArPSBkYXRhXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIGZpdEFkZG9uLmZpdCgpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMudGVybS5sb2FkV2ViZm9udEFuZE9wZW4oZWwpO1xuICAgIH1cblxuICAgIGFzeW5jIHJlYWQoY291bnQ6IG51bWJlcik6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KHggPT57XG4gICAgICAgICAgICBpZih0aGlzLmJ1ZmZlci5sZW5ndGgpe1xuICAgICAgICAgICAgICAgIHgodGhpcy5idWZmZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gXCJcIjtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHRoaXMucmVzb2x2ZSA9IHg7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICB3cml0ZShzdHI6IHN0cmluZykge1xuICAgICAgICB0aGlzLnRlcm0ud3JpdGUoc3RyKTtcbiAgICB9XG59XG5cblxuY29uc3QgdGVybWluYWwgPSBuZXcgVGVybWluYWxEZXZpY2UoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXJtXCIpISk7XG5cbndpbmRvdy5vbmxvYWQgPSBhc3luYyAoKSA9PiBzZXRUaW1lb3V0KGFzeW5jIHggPT4ge1xuICAgIGNvbnN0IHZtID0gbmV3IFZpcnR1YWxNYWNoaW5lKGRpc2NvdmVyKFtcbiAgICAgICAgRGV2aWNlRGV0YWlsKFwiaW5pdHJkXCIsIHtcbiAgICAgICAgICAgIGNvbXBhdGliaWxpdHk6IFtcInN0b3JhZ2U6aW1hZ2VcIl0sXG4gICAgICAgICAgICBpbWFnZTogaW5pdHJkXG4gICAgICAgIH0pLFxuXG4gICAgICAgIERldmljZURldGFpbChcInNlcmlhbFwiLCB7XG4gICAgICAgICAgICBjb21wYXRpYmlsaXR5OiBbXCJzZXJpYWw6dGVybWluYWxcIl0sXG4gICAgICAgICAgICB3cml0ZTogKGJ1Zjogc3RyaW5nKSA9PiB0ZXJtaW5hbC53cml0ZShidWYpLFxuICAgICAgICAgICAgcmVhZDogKGNvdW50OiBudW1iZXIpID0+IHRlcm1pbmFsLnJlYWQoY291bnQpXG4gICAgICAgIH0pLFxuXG4gICAgICAgIERldmljZURldGFpbChcImNvbnNvbGVcIiwge1xuICAgICAgICAgICAgY29tcGF0aWJpbGl0eTogW1wiZGlzcGxheTpjb25zb2xlXCJdLFxuICAgICAgICAgICAgd3JpdGU6IChidWY6IHN0cmluZykgPT4gY29uc29sZS5sb2coYnVmKVxuICAgICAgICB9KSxcbiAgICBdKSk7XG4gICAgdHJ5e1xuICAgICAgICBhd2FpdCB2bS5ib290KG5ldyBTeXN0ZW0oe1xuICAgICAgICAgICAgc2VyaWFsOiBcIi9kZXYvc2VyaWFsXCIsXG4gICAgICAgICAgICBpbml0cmQ6IFwiI/Cfkr4vaW5pdHJkXCIsXG4gICAgICAgICAgICBmaWxlc3J2OiBcIm1lbWZzXCIsXG4gICAgICAgICAgICBpbml0cmM6IFwiL2Jpbi9pbml0XCJcbiAgICAgICAgfSkpO1xuICAgIH1jYXRjaCAoZSkge1xuICAgICAgICBpZihlIGluc3RhbmNlb2YgUEVycm9yKXtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDYXVnaHQgXCIgKyBTdGF0dXNbZS5jb2RlXSlcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICB9XG4gICAgfVxuXG59LCAxMDApO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main.ts\n");

/***/ }),

/***/ "./src/public/9p.ts":
/*!**************************!*\
  !*** ./src/public/9p.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Protocol9P\": () => (/* binding */ Protocol9P),\n/* harmony export */   \"MPTversion\": () => (/* binding */ MPTversion),\n/* harmony export */   \"MUTversion\": () => (/* binding */ MUTversion),\n/* harmony export */   \"MPRversion\": () => (/* binding */ MPRversion),\n/* harmony export */   \"MURversion\": () => (/* binding */ MURversion),\n/* harmony export */   \"MPRerror\": () => (/* binding */ MPRerror),\n/* harmony export */   \"MURerror\": () => (/* binding */ MURerror),\n/* harmony export */   \"MPTflush\": () => (/* binding */ MPTflush),\n/* harmony export */   \"MUTflush\": () => (/* binding */ MUTflush),\n/* harmony export */   \"MPRflush\": () => (/* binding */ MPRflush),\n/* harmony export */   \"MURflush\": () => (/* binding */ MURflush),\n/* harmony export */   \"MPTattach\": () => (/* binding */ MPTattach),\n/* harmony export */   \"MUTattach\": () => (/* binding */ MUTattach),\n/* harmony export */   \"MPRattach\": () => (/* binding */ MPRattach),\n/* harmony export */   \"MURattach\": () => (/* binding */ MURattach),\n/* harmony export */   \"MPTwalk\": () => (/* binding */ MPTwalk),\n/* harmony export */   \"MUTwalk\": () => (/* binding */ MUTwalk),\n/* harmony export */   \"MPRwalk\": () => (/* binding */ MPRwalk),\n/* harmony export */   \"MURwalk\": () => (/* binding */ MURwalk),\n/* harmony export */   \"MPTopen\": () => (/* binding */ MPTopen),\n/* harmony export */   \"MUTopen\": () => (/* binding */ MUTopen),\n/* harmony export */   \"MPRopen\": () => (/* binding */ MPRopen),\n/* harmony export */   \"MURopen\": () => (/* binding */ MURopen),\n/* harmony export */   \"MPTcreate\": () => (/* binding */ MPTcreate),\n/* harmony export */   \"MUTcreate\": () => (/* binding */ MUTcreate),\n/* harmony export */   \"MPRcreate\": () => (/* binding */ MPRcreate),\n/* harmony export */   \"MURcreate\": () => (/* binding */ MURcreate),\n/* harmony export */   \"MPTread\": () => (/* binding */ MPTread),\n/* harmony export */   \"MUTread\": () => (/* binding */ MUTread),\n/* harmony export */   \"MPRread\": () => (/* binding */ MPRread),\n/* harmony export */   \"MURread\": () => (/* binding */ MURread),\n/* harmony export */   \"MPTwrite\": () => (/* binding */ MPTwrite),\n/* harmony export */   \"MUTwrite\": () => (/* binding */ MUTwrite),\n/* harmony export */   \"MPRwrite\": () => (/* binding */ MPRwrite),\n/* harmony export */   \"MURwrite\": () => (/* binding */ MURwrite),\n/* harmony export */   \"MPTclunk\": () => (/* binding */ MPTclunk),\n/* harmony export */   \"MUTclunk\": () => (/* binding */ MUTclunk),\n/* harmony export */   \"MPRclunk\": () => (/* binding */ MPRclunk),\n/* harmony export */   \"MURclunk\": () => (/* binding */ MURclunk),\n/* harmony export */   \"MPTremove\": () => (/* binding */ MPTremove),\n/* harmony export */   \"MUTremove\": () => (/* binding */ MUTremove),\n/* harmony export */   \"MPRremove\": () => (/* binding */ MPRremove),\n/* harmony export */   \"MURremove\": () => (/* binding */ MURremove),\n/* harmony export */   \"MPTstat\": () => (/* binding */ MPTstat),\n/* harmony export */   \"MUTstat\": () => (/* binding */ MUTstat),\n/* harmony export */   \"MPRstat\": () => (/* binding */ MPRstat),\n/* harmony export */   \"MURstat\": () => (/* binding */ MURstat),\n/* harmony export */   \"peak9p\": () => (/* binding */ peak9p),\n/* harmony export */   \"Service9P\": () => (/* binding */ Service9P)\n/* harmony export */ });\n/* harmony import */ var _shared_struct__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/struct */ \"./src/shared/struct.ts\");\n\nvar Protocol9P;\n(function (Protocol9P) {\n    Protocol9P[Protocol9P[\"Tversion\"] = 100] = \"Tversion\";\n    Protocol9P[Protocol9P[\"Rversion\"] = 101] = \"Rversion\";\n    Protocol9P[Protocol9P[\"Tattach\"] = 104] = \"Tattach\";\n    Protocol9P[Protocol9P[\"Rattach\"] = 105] = \"Rattach\";\n    Protocol9P[Protocol9P[\"Rerror\"] = 107] = \"Rerror\";\n    Protocol9P[Protocol9P[\"Tflush\"] = 108] = \"Tflush\";\n    Protocol9P[Protocol9P[\"Rflush\"] = 109] = \"Rflush\";\n    Protocol9P[Protocol9P[\"Twalk\"] = 110] = \"Twalk\";\n    Protocol9P[Protocol9P[\"Rwalk\"] = 111] = \"Rwalk\";\n    Protocol9P[Protocol9P[\"Topen\"] = 112] = \"Topen\";\n    Protocol9P[Protocol9P[\"Ropen\"] = 113] = \"Ropen\";\n    Protocol9P[Protocol9P[\"Tcreate\"] = 114] = \"Tcreate\";\n    Protocol9P[Protocol9P[\"Rcreate\"] = 115] = \"Rcreate\";\n    Protocol9P[Protocol9P[\"Tread\"] = 116] = \"Tread\";\n    Protocol9P[Protocol9P[\"Rread\"] = 117] = \"Rread\";\n    Protocol9P[Protocol9P[\"Twrite\"] = 118] = \"Twrite\";\n    Protocol9P[Protocol9P[\"Rwrite\"] = 119] = \"Rwrite\";\n    Protocol9P[Protocol9P[\"Tclunk\"] = 120] = \"Tclunk\";\n    Protocol9P[Protocol9P[\"Rclunk\"] = 121] = \"Rclunk\";\n    Protocol9P[Protocol9P[\"Tremove\"] = 122] = \"Tremove\";\n    Protocol9P[Protocol9P[\"Rremove\"] = 123] = \"Rremove\";\n    Protocol9P[Protocol9P[\"Tstat\"] = 124] = \"Tstat\";\n    Protocol9P[Protocol9P[\"Rstat\"] = 125] = \"Rstat\";\n    Protocol9P[Protocol9P[\"Twstat\"] = 126] = \"Twstat\";\n})(Protocol9P || (Protocol9P = {}));\nconst MPTversion = (tag, msize, version) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(Protocol9P.Tversion), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(tag), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt32)(msize), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(version)]);\nconst MUTversion = (a) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt32, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackString]);\nconst MPRversion = (tag, msize, version) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(Protocol9P.Rversion), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(tag), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt32)(msize), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(version)]);\nconst MURversion = (a) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt32, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackString]);\n;\nconst MPRerror = (tag, ename) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(Protocol9P.Rerror), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(tag), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(ename)]);\nconst MURerror = (a) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackString]);\nconst MPTflush = (tag, oldtag) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(Protocol9P.Tflush), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(tag), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(oldtag)]);\nconst MUTflush = (a) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16]);\nconst MPRflush = (tag, oldtag) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(Protocol9P.Rflush), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(tag)]);\nconst MURflush = (a) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16]);\nconst MPTattach = (tag, fd, uname, aname) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(Protocol9P.Tattach), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(tag), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt32)(fd), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(uname), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(aname)]);\nconst MUTattach = (a) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt32, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackString]);\nconst MPRattach = (tag, type) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(Protocol9P.Rattach), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(tag), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(type)]);\nconst MURattach = (a) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8]);\nconst MPTwalk = (tag, fd, newfd, wname) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(Protocol9P.Twalk), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(tag), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt32)(fd), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt32)(newfd), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packA)(wname, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.packString)]);\nconst MUTwalk = (a) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt32, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt32, (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackA)(_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackString)]);\nconst MPRwalk = (tag, type) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(Protocol9P.Rwalk), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(tag), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packA)(type, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)]);\nconst MURwalk = (a) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16, (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackA)(_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8)]);\nconst MPTopen = (tag, fd, mode) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(Protocol9P.Topen), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(tag), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt32)(fd), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(mode)]);\nconst MUTopen = (a) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt32, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8]);\nconst MPRopen = (tag, type) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(Protocol9P.Ropen), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(tag), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(type)]);\nconst MURopen = (a) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8]);\nconst MPTcreate = (tag, fd, name, mode) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(Protocol9P.Tcreate), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(tag), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt32)(fd), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(name), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packDouble)(mode)]);\nconst MUTcreate = (a) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt32, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackDouble]);\nconst MPRcreate = (tag, type) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(Protocol9P.Rcreate), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(tag), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(type)]);\nconst MURcreate = (a) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8]);\nconst MPTread = (tag, fd, offset, count) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(Protocol9P.Tread), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(tag), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt32)(fd), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packDouble)(offset), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt32)(count)]);\nconst MUTread = (a) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt32, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackDouble, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt32]);\nconst MPRread = (tag, buf) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(Protocol9P.Rread), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(tag), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packBytearray)(buf)]);\nconst MURread = (a) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackBytearray]);\nconst MPTwrite = (tag, fd, offset, buf) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(Protocol9P.Twrite), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(tag), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt32)(fd), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packDouble)(offset), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packBytearray)(buf)]);\nconst MUTwrite = (a) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt32, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackDouble, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackBytearray]);\nconst MPRwrite = (tag, count) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(Protocol9P.Rwrite), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(tag), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt32)(count)]);\nconst MURwrite = (a) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt32]);\nconst MPTclunk = (tag, fd) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(Protocol9P.Tclunk), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(tag), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt32)(fd)]);\nconst MUTclunk = (a) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt32]);\nconst MPRclunk = (tag) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(Protocol9P.Rclunk), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(tag)]);\nconst MURclunk = (a) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16]);\nconst MPTremove = (tag, fd) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(Protocol9P.Tremove), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(tag), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt32)(fd)]);\nconst MUTremove = (a) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt32]);\nconst MPRremove = (tag) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(Protocol9P.Rremove), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(tag)]);\nconst MURremove = (a) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16]);\nconst MPTstat = (tag, fd) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(Protocol9P.Tstat), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(tag), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt32)(fd)]);\nconst MUTstat = (a) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt32]);\nconst MPRstat = (tag, stat) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(Protocol9P.Rstat), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt16)(tag), (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.packStat)(stat)]);\nconst MURstat = (a) => (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackStat]);\nfunction peak9p(a) {\n    return (0,_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _shared_struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt16]);\n}\nclass Service9P {\n    fd;\n    ops;\n    map = new Map();\n    constructor(fd, ops) {\n        this.fd = fd;\n        this.ops = ops;\n    }\n    set(fd, obj) {\n        this.map.set(fd, obj);\n    }\n    get(fd) {\n        return this.map.get(fd);\n    }\n    async run() {\n        while (true) {\n            const message = await self.proc.sys.read(this.fd, -1);\n            const [type, t] = peak9p(message);\n            try {\n                switch (type) {\n                    case Protocol9P.Tversion:\n                        break;\n                    case Protocol9P.Tattach: {\n                        const [_, tag, fd, uname, aname] = MUTattach(message);\n                        const type = await this.ops.attach(fd, aname);\n                        await self.proc.sys.write(this.fd, MPRattach(tag, type));\n                        break;\n                    }\n                    case Protocol9P.Tflush:\n                        break;\n                    case Protocol9P.Twalk: {\n                        const [_, tag, fd, nfd, wnames] = MUTwalk(message);\n                        const types = await this.ops.walk(fd, nfd, wnames);\n                        await self.proc.sys.write(this.fd, MPRwalk(tag, types));\n                        break;\n                    }\n                    case Protocol9P.Topen: {\n                        const [_, tag, fd, mode] = MUTopen(message);\n                        const type = await this.ops.open(fd, mode);\n                        await self.proc.sys.write(this.fd, MPRopen(tag, type));\n                        break;\n                    }\n                    case Protocol9P.Tcreate: {\n                        const [_, tag, fd, name, mode] = MUTcreate(message);\n                        const type = await this.ops.create(fd, name, mode);\n                        await self.proc.sys.write(this.fd, MPRcreate(tag, type));\n                        break;\n                    }\n                    case Protocol9P.Tread: {\n                        const [_, tag, fd, offset, count] = MUTread(message);\n                        const buf = await this.ops.read(fd, offset, count);\n                        await self.proc.sys.write(this.fd, MPRread(tag, buf));\n                        break;\n                    }\n                    case Protocol9P.Twrite: {\n                        const [_, tag, fd, offset, buf] = MUTwrite(message);\n                        const count = await this.ops.write(fd, buf, offset);\n                        await self.proc.sys.write(this.fd, MPRwrite(tag, count));\n                        break;\n                    }\n                    case Protocol9P.Tclunk:\n                        break;\n                    case Protocol9P.Tremove:\n                        break;\n                    case Protocol9P.Tstat: {\n                        const [_, tag, fd] = MUTstat(message);\n                        const stat = await this.ops.stat(fd);\n                        await self.proc.sys.write(this.fd, MPRstat(tag, stat));\n                        break;\n                    }\n                }\n            }\n            catch (e) {\n                await self.proc.sys.write(this.fd, MPRerror(t, e));\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcHVibGljLzlwLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7QUFZQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBb0JBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Bvc3NpbXBpYmxlLy4vc3JjL3B1YmxpYy85cC50cz80ZGYxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q3JlYXRlTW9kZSwgSVN0YXQsIE9wZW5Nb2RlLCBUeXBlfSBmcm9tIFwiLi9hcGlcIjtcbmltcG9ydCB7RmlsZURlc2NyaXB0b3J9IGZyb20gXCIuLi9zaGFyZWQvcHJvY1wiO1xuaW1wb3J0IHtcbiAgICBwYWNrLCBwYWNrQSwgcGFja0J5dGVhcnJheSwgcGFja0RvdWJsZSwgcGFja1N0YXQsXG4gICAgcGFja1N0cmluZyxcbiAgICBwYWNrVUludDE2LFxuICAgIHBhY2tVSW50MzIsXG4gICAgcGFja1VJbnQ4LFxuICAgIHVucGFjaywgdW5wYWNrQSwgdW5wYWNrQnl0ZWFycmF5LCB1bnBhY2tEb3VibGUsIHVucGFja0ludDgsIHVucGFja1N0YXQsIHVucGFja1N0cmluZyxcbiAgICB1bnBhY2tVSW50MTYsXG4gICAgdW5wYWNrVUludDMyLFxuICAgIHVucGFja1VJbnQ4XG59IGZyb20gXCIuLi9zaGFyZWQvc3RydWN0XCI7XG5cbmV4cG9ydCBlbnVtIFByb3RvY29sOVB7XG4gICAgVHZlcnNpb24gPSAxMDAsXG4gICAgUnZlcnNpb24gPSAxMDEsXG4gICAgVGF0dGFjaCA9IDEwNCxcbiAgICBSYXR0YWNoID0gMTA1LFxuICAgIFJlcnJvciA9IDEwNyxcbiAgICBUZmx1c2ggPSAxMDgsXG4gICAgUmZsdXNoID0gMTA5LFxuICAgIFR3YWxrID0gMTEwLFxuICAgIFJ3YWxrID0gMTExLFxuICAgIFRvcGVuID0gMTEyLFxuICAgIFJvcGVuID0gMTEzLFxuICAgIFRjcmVhdGUgPSAxMTQsXG4gICAgUmNyZWF0ZSA9IDExNSxcbiAgICBUcmVhZCA9IDExNixcbiAgICBScmVhZCA9IDExNyxcbiAgICBUd3JpdGUgPSAxMTgsXG4gICAgUndyaXRlID0gMTE5LFxuICAgIFRjbHVuayA9IDEyMCxcbiAgICBSY2x1bmsgPSAxMjEsXG4gICAgVHJlbW92ZSA9IDEyMixcbiAgICBScmVtb3ZlID0gMTIzLFxuICAgIFRzdGF0ID0gMTI0LFxuICAgIFJzdGF0ID0gMTI1LFxuICAgIFR3c3RhdCA9IDEyNlxufVxuXG50eXBlIFRhZyA9IG51bWJlcjtcblxuZXhwb3J0IGNvbnN0IE1QVHZlcnNpb24gPSAodGFnOiBUYWcsIG1zaXplOiBudW1iZXIsIHZlcnNpb246IHN0cmluZykgPT4gcGFjayhbcGFja1VJbnQ4KFByb3RvY29sOVAuVHZlcnNpb24pLCBwYWNrVUludDE2KHRhZyksIHBhY2tVSW50MzIobXNpemUpLCBwYWNrU3RyaW5nKHZlcnNpb24pXSk7XG5leHBvcnQgY29uc3QgTVVUdmVyc2lvbiA9IChhOiBVaW50OEFycmF5KSA9PiB1bnBhY2soYSwgW3VucGFja1VJbnQ4LCB1bnBhY2tVSW50MTYsIHVucGFja1VJbnQzMiwgdW5wYWNrU3RyaW5nXSkgYXMgW1Byb3RvY29sOVAsIFRhZywgbnVtYmVyLCBzdHJpbmddO1xuXG5leHBvcnQgY29uc3QgTVBSdmVyc2lvbiA9ICh0YWc6IFRhZywgbXNpemU6IG51bWJlciwgdmVyc2lvbjogc3RyaW5nKSA9PiBwYWNrKFtwYWNrVUludDgoUHJvdG9jb2w5UC5SdmVyc2lvbiksIHBhY2tVSW50MTYodGFnKSwgcGFja1VJbnQzMihtc2l6ZSksIHBhY2tTdHJpbmcodmVyc2lvbildKTtcbmV4cG9ydCBjb25zdCBNVVJ2ZXJzaW9uID0gKGE6IFVpbnQ4QXJyYXkpID0+IHVucGFjayhhLCBbdW5wYWNrVUludDgsIHVucGFja1VJbnQxNiwgdW5wYWNrVUludDMyLCB1bnBhY2tTdHJpbmddKSBhcyBbUHJvdG9jb2w5UCwgVGFnLCBudW1iZXIsIHN0cmluZ107O1xuXG5leHBvcnQgY29uc3QgTVBSZXJyb3IgPSAodGFnOiBUYWcsIGVuYW1lOiBzdHJpbmcpID0+IHBhY2soW3BhY2tVSW50OChQcm90b2NvbDlQLlJlcnJvciksIHBhY2tVSW50MTYodGFnKSwgcGFja1N0cmluZyhlbmFtZSldKTtcbmV4cG9ydCBjb25zdCBNVVJlcnJvciA9IChhOiBVaW50OEFycmF5KSA9PiB1bnBhY2soYSwgW3VucGFja1VJbnQ4LCB1bnBhY2tVSW50MTYsIHVucGFja1N0cmluZ10pIGFzIFtQcm90b2NvbDlQLCBUYWcsIHN0cmluZ107XG5cbmV4cG9ydCBjb25zdCBNUFRmbHVzaCA9ICh0YWc6IFRhZywgb2xkdGFnOiBUYWcpID0+IHBhY2soW3BhY2tVSW50OChQcm90b2NvbDlQLlRmbHVzaCksIHBhY2tVSW50MTYodGFnKSwgcGFja1VJbnQxNihvbGR0YWcpXSk7XG5leHBvcnQgY29uc3QgTVVUZmx1c2ggPSAoYTogVWludDhBcnJheSkgPT4gdW5wYWNrKGEsIFt1bnBhY2tVSW50OCwgdW5wYWNrVUludDE2LCB1bnBhY2tVSW50MTZdKSBhcyBbUHJvdG9jb2w5UCwgVGFnLCBudW1iZXJdO1xuXG5leHBvcnQgY29uc3QgTVBSZmx1c2ggPSAodGFnOiBUYWcsIG9sZHRhZzogVGFnKSA9PiBwYWNrKFtwYWNrVUludDgoUHJvdG9jb2w5UC5SZmx1c2gpLCBwYWNrVUludDE2KHRhZyldKTtcbmV4cG9ydCBjb25zdCBNVVJmbHVzaCA9IChhOiBVaW50OEFycmF5KSA9PiB1bnBhY2soYSwgW3VucGFja1VJbnQ4LCB1bnBhY2tVSW50MTZdKSBhcyBbUHJvdG9jb2w5UCwgVGFnXTtcblxuZXhwb3J0IGNvbnN0IE1QVGF0dGFjaCA9ICh0YWc6IFRhZywgZmQ6IEZpZCwgdW5hbWU6c3RyaW5nLCBhbmFtZTpzdHJpbmcpID0+IHBhY2soW3BhY2tVSW50OChQcm90b2NvbDlQLlRhdHRhY2gpLCBwYWNrVUludDE2KHRhZyksIHBhY2tVSW50MzIoZmQpLCBwYWNrU3RyaW5nKHVuYW1lKSwgcGFja1N0cmluZyhhbmFtZSldKTtcbmV4cG9ydCBjb25zdCBNVVRhdHRhY2ggPSAoYTogVWludDhBcnJheSkgPT4gdW5wYWNrKGEsIFt1bnBhY2tVSW50OCwgdW5wYWNrVUludDE2LCB1bnBhY2tVSW50MzIsIHVucGFja1N0cmluZywgdW5wYWNrU3RyaW5nXSkgYXMgW1Byb3RvY29sOVAsIFRhZywgRmlkLCBzdHJpbmcsIHN0cmluZ107XG5cbmV4cG9ydCBjb25zdCBNUFJhdHRhY2ggPSAodGFnOiBUYWcsIHR5cGU6IFR5cGUpID0+IHBhY2soW3BhY2tVSW50OChQcm90b2NvbDlQLlJhdHRhY2gpLCBwYWNrVUludDE2KHRhZyksIHBhY2tVSW50OCh0eXBlKV0pO1xuZXhwb3J0IGNvbnN0IE1VUmF0dGFjaCA9IChhOiBVaW50OEFycmF5KSA9PiB1bnBhY2soYSwgW3VucGFja1VJbnQ4LCB1bnBhY2tVSW50MTYsIHVucGFja1VJbnQ4XSkgIGFzIFtQcm90b2NvbDlQLCBUYWcsIFR5cGVdO1xuXG5leHBvcnQgY29uc3QgTVBUd2FsayA9ICh0YWc6IFRhZywgZmQ6IEZpZCwgbmV3ZmQ6IEZpZCwgd25hbWU6IHN0cmluZ1tdKSA9PiBwYWNrKFtwYWNrVUludDgoUHJvdG9jb2w5UC5Ud2FsayksIHBhY2tVSW50MTYodGFnKSwgcGFja1VJbnQzMihmZCksIHBhY2tVSW50MzIobmV3ZmQpLCBwYWNrQSh3bmFtZSwgcGFja1N0cmluZyldKTtcbmV4cG9ydCBjb25zdCBNVVR3YWxrID0gKGE6IFVpbnQ4QXJyYXkpID0+IHVucGFjayhhLCBbdW5wYWNrVUludDgsIHVucGFja1VJbnQxNiwgdW5wYWNrVUludDMyLCB1bnBhY2tVSW50MzIsIHVucGFja0EodW5wYWNrU3RyaW5nKV0pIGFzIFtQcm90b2NvbDlQLCBUYWcsIEZpZCwgRmlkLCBzdHJpbmdbXV07XG5cbmV4cG9ydCBjb25zdCBNUFJ3YWxrID0gKHRhZzogVGFnLCB0eXBlOiBUeXBlW10pID0+IHBhY2soW3BhY2tVSW50OChQcm90b2NvbDlQLlJ3YWxrKSwgcGFja1VJbnQxNih0YWcpLCBwYWNrQSh0eXBlLCBwYWNrVUludDgpXSk7XG5leHBvcnQgY29uc3QgTVVSd2FsayA9IChhOiBVaW50OEFycmF5KSA9PiB1bnBhY2soYSwgW3VucGFja1VJbnQ4LCB1bnBhY2tVSW50MTYsIHVucGFja0EodW5wYWNrVUludDgpXSkgIGFzIFtQcm90b2NvbDlQLCBUYWcsIFR5cGVbXV07XG5cbmV4cG9ydCBjb25zdCBNUFRvcGVuID0gKHRhZzogVGFnLCBmZDogRmlkLCBtb2RlOiBPcGVuTW9kZSkgPT4gcGFjayhbcGFja1VJbnQ4KFByb3RvY29sOVAuVG9wZW4pLCBwYWNrVUludDE2KHRhZyksIHBhY2tVSW50MzIoZmQpLCBwYWNrVUludDgobW9kZSldKTtcbmV4cG9ydCBjb25zdCBNVVRvcGVuID0gKGE6IFVpbnQ4QXJyYXkpID0+IHVucGFjayhhLCBbdW5wYWNrVUludDgsIHVucGFja1VJbnQxNiwgdW5wYWNrVUludDMyLCB1bnBhY2tVSW50OF0pIGFzIFtQcm90b2NvbDlQLCBUYWcsIEZpZCwgT3Blbk1vZGVdO1xuXG5leHBvcnQgY29uc3QgTVBSb3BlbiA9ICh0YWc6IFRhZywgdHlwZTogVHlwZSkgPT4gcGFjayhbcGFja1VJbnQ4KFByb3RvY29sOVAuUm9wZW4pLCBwYWNrVUludDE2KHRhZyksIHBhY2tVSW50OCh0eXBlKV0pO1xuZXhwb3J0IGNvbnN0IE1VUm9wZW4gPSAoYTogVWludDhBcnJheSkgPT4gdW5wYWNrKGEsIFt1bnBhY2tVSW50OCwgdW5wYWNrVUludDE2LCB1bnBhY2tVSW50OF0pICBhcyBbUHJvdG9jb2w5UCwgVGFnLCBUeXBlXTtcblxuZXhwb3J0IGNvbnN0IE1QVGNyZWF0ZSA9ICh0YWc6IFRhZywgZmQ6IEZpZCwgbmFtZTogc3RyaW5nLCBtb2RlOiBDcmVhdGVNb2RlKSA9PiBwYWNrKFtwYWNrVUludDgoUHJvdG9jb2w5UC5UY3JlYXRlKSwgcGFja1VJbnQxNih0YWcpLCBwYWNrVUludDMyKGZkKSwgcGFja1N0cmluZyhuYW1lKSwgcGFja0RvdWJsZShtb2RlKV0pO1xuZXhwb3J0IGNvbnN0IE1VVGNyZWF0ZSA9IChhOiBVaW50OEFycmF5KSA9PiB1bnBhY2soYSwgW3VucGFja1VJbnQ4LCB1bnBhY2tVSW50MTYsIHVucGFja1VJbnQzMiwgdW5wYWNrU3RyaW5nLCB1bnBhY2tEb3VibGVdKSBhcyBbUHJvdG9jb2w5UCwgVGFnLCBGaWQsIHN0cmluZywgQ3JlYXRlTW9kZV07XG5cbmV4cG9ydCBjb25zdCBNUFJjcmVhdGUgPSAodGFnOiBUYWcsIHR5cGU6IFR5cGUpID0+IHBhY2soW3BhY2tVSW50OChQcm90b2NvbDlQLlJjcmVhdGUpLCBwYWNrVUludDE2KHRhZyksIHBhY2tVSW50OCh0eXBlKV0pO1xuZXhwb3J0IGNvbnN0IE1VUmNyZWF0ZSA9IChhOiBVaW50OEFycmF5KSA9PiB1bnBhY2soYSwgW3VucGFja1VJbnQ4LCB1bnBhY2tVSW50MTYsIHVucGFja1VJbnQ4XSkgIGFzIFtQcm90b2NvbDlQLCBUYWcsIFR5cGVdO1xuXG5leHBvcnQgY29uc3QgTVBUcmVhZCA9ICh0YWc6IFRhZywgZmQ6IEZpZCwgb2Zmc2V0OiBudW1iZXIsIGNvdW50OiBudW1iZXIpID0+IHBhY2soW3BhY2tVSW50OChQcm90b2NvbDlQLlRyZWFkKSwgcGFja1VJbnQxNih0YWcpLCBwYWNrVUludDMyKGZkKSwgcGFja0RvdWJsZShvZmZzZXQpLCBwYWNrVUludDMyKGNvdW50KV0pO1xuZXhwb3J0IGNvbnN0IE1VVHJlYWQgPSAoYTogVWludDhBcnJheSkgPT4gdW5wYWNrKGEsIFt1bnBhY2tVSW50OCwgdW5wYWNrVUludDE2LCB1bnBhY2tVSW50MzIsIHVucGFja0RvdWJsZSwgdW5wYWNrVUludDMyXSkgYXMgW1Byb3RvY29sOVAsIFRhZywgRmlkLCBudW1iZXIsIG51bWJlcl07XG5cbmV4cG9ydCBjb25zdCBNUFJyZWFkID0gKHRhZzogVGFnLCBidWY6IFVpbnQ4QXJyYXkpID0+IHBhY2soW3BhY2tVSW50OChQcm90b2NvbDlQLlJyZWFkKSwgcGFja1VJbnQxNih0YWcpLCBwYWNrQnl0ZWFycmF5KGJ1ZildKTtcbmV4cG9ydCBjb25zdCBNVVJyZWFkID0gKGE6IFVpbnQ4QXJyYXkpID0+IHVucGFjayhhLCBbdW5wYWNrVUludDgsIHVucGFja1VJbnQxNiwgdW5wYWNrQnl0ZWFycmF5XSkgIGFzIFtQcm90b2NvbDlQLCBUYWcsIFVpbnQ4QXJyYXldO1xuXG5leHBvcnQgY29uc3QgTVBUd3JpdGUgPSAodGFnOiBUYWcsIGZkOiBGaWQsIG9mZnNldDogbnVtYmVyLCBidWY6IFVpbnQ4QXJyYXkpID0+IHBhY2soW3BhY2tVSW50OChQcm90b2NvbDlQLlR3cml0ZSksIHBhY2tVSW50MTYodGFnKSwgcGFja1VJbnQzMihmZCksIHBhY2tEb3VibGUob2Zmc2V0KSwgcGFja0J5dGVhcnJheShidWYpXSk7XG5leHBvcnQgY29uc3QgTVVUd3JpdGUgPSAoYTogVWludDhBcnJheSkgPT4gdW5wYWNrKGEsIFt1bnBhY2tVSW50OCwgdW5wYWNrVUludDE2LCB1bnBhY2tVSW50MzIsIHVucGFja0RvdWJsZSwgdW5wYWNrQnl0ZWFycmF5XSkgYXMgW1Byb3RvY29sOVAsIFRhZywgRmlkLCBudW1iZXIsIFVpbnQ4QXJyYXldO1xuXG5leHBvcnQgY29uc3QgTVBSd3JpdGUgPSAodGFnOiBUYWcsIGNvdW50OiBudW1iZXIpID0+IHBhY2soW3BhY2tVSW50OChQcm90b2NvbDlQLlJ3cml0ZSksIHBhY2tVSW50MTYodGFnKSwgcGFja1VJbnQzMihjb3VudCldKTtcbmV4cG9ydCBjb25zdCBNVVJ3cml0ZSA9IChhOiBVaW50OEFycmF5KSA9PiB1bnBhY2soYSwgW3VucGFja1VJbnQ4LCB1bnBhY2tVSW50MTYsIHVucGFja1VJbnQzMl0pICBhcyBbUHJvdG9jb2w5UCwgVGFnLCBudW1iZXJdO1xuXG5leHBvcnQgY29uc3QgTVBUY2x1bmsgPSAodGFnOiBUYWcsIGZkOiBGaWQpID0+IHBhY2soW3BhY2tVSW50OChQcm90b2NvbDlQLlRjbHVuayksIHBhY2tVSW50MTYodGFnKSwgcGFja1VJbnQzMihmZCldKTtcbmV4cG9ydCBjb25zdCBNVVRjbHVuayA9IChhOiBVaW50OEFycmF5KSA9PiB1bnBhY2soYSwgW3VucGFja1VJbnQ4LCB1bnBhY2tVSW50MTYsIHVucGFja1VJbnQzMl0pIGFzIFtQcm90b2NvbDlQLCBUYWcsIEZpZF07XG5cbmV4cG9ydCBjb25zdCBNUFJjbHVuayA9ICh0YWc6IFRhZykgPT4gcGFjayhbcGFja1VJbnQ4KFByb3RvY29sOVAuUmNsdW5rKSwgcGFja1VJbnQxNih0YWcpXSk7XG5leHBvcnQgY29uc3QgTVVSY2x1bmsgPSAoYTogVWludDhBcnJheSkgPT4gdW5wYWNrKGEsIFt1bnBhY2tVSW50OCwgdW5wYWNrVUludDE2XSkgIGFzIFtQcm90b2NvbDlQLCBUYWddO1xuXG5leHBvcnQgY29uc3QgTVBUcmVtb3ZlID0gKHRhZzogVGFnLCBmZDogRmlkKSA9PiBwYWNrKFtwYWNrVUludDgoUHJvdG9jb2w5UC5UcmVtb3ZlKSwgcGFja1VJbnQxNih0YWcpLCBwYWNrVUludDMyKGZkKV0pO1xuZXhwb3J0IGNvbnN0IE1VVHJlbW92ZSA9IChhOiBVaW50OEFycmF5KSA9PiB1bnBhY2soYSwgW3VucGFja1VJbnQ4LCB1bnBhY2tVSW50MTYsIHVucGFja1VJbnQzMl0pIGFzIFtQcm90b2NvbDlQLCBUYWcsIEZpZF07XG5cbmV4cG9ydCBjb25zdCBNUFJyZW1vdmUgPSAodGFnOiBUYWcpID0+IHBhY2soW3BhY2tVSW50OChQcm90b2NvbDlQLlJyZW1vdmUpLCBwYWNrVUludDE2KHRhZyldKTtcbmV4cG9ydCBjb25zdCBNVVJyZW1vdmUgPSAoYTogVWludDhBcnJheSkgPT4gdW5wYWNrKGEsIFt1bnBhY2tVSW50OCwgdW5wYWNrVUludDE2XSkgIGFzIFtQcm90b2NvbDlQLCBUYWddO1xuXG5leHBvcnQgY29uc3QgTVBUc3RhdCA9ICh0YWc6IFRhZywgZmQ6IEZpZCkgPT4gcGFjayhbcGFja1VJbnQ4KFByb3RvY29sOVAuVHN0YXQpLCBwYWNrVUludDE2KHRhZyksIHBhY2tVSW50MzIoZmQpXSk7XG5leHBvcnQgY29uc3QgTVVUc3RhdCA9IChhOiBVaW50OEFycmF5KSA9PiB1bnBhY2soYSwgW3VucGFja1VJbnQ4LCB1bnBhY2tVSW50MTYsIHVucGFja1VJbnQzMl0pIGFzIFtQcm90b2NvbDlQLCBUYWcsIEZpZF07XG5cbmV4cG9ydCBjb25zdCBNUFJzdGF0ID0gKHRhZzogVGFnLCBzdGF0OiBJU3RhdCkgPT4gcGFjayhbcGFja1VJbnQ4KFByb3RvY29sOVAuUnN0YXQpLCBwYWNrVUludDE2KHRhZyksIHBhY2tTdGF0KHN0YXQpXSk7XG5leHBvcnQgY29uc3QgTVVSc3RhdCA9IChhOiBVaW50OEFycmF5KSA9PiB1bnBhY2soYSwgW3VucGFja1VJbnQ4LCB1bnBhY2tVSW50MTYsIHVucGFja1N0YXRdKSAgYXMgW1Byb3RvY29sOVAsIFRhZywgSVN0YXRdO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBwZWFrOXAoYTogVWludDhBcnJheSl7XG4gICAgcmV0dXJuIHVucGFjayhhLCBbdW5wYWNrVUludDgsIHVucGFja1VJbnQxNl0pIGFzIFtQcm90b2NvbDlQLCBUYWddXG59XG5cblxuZXhwb3J0IHR5cGUgRmlkID0gbnVtYmVyO1xuXG5pbnRlcmZhY2UgSU9wZXJhdGlvbnM5UHtcbiAgICBhdHRhY2g6IChmaWQ6IEZpZCwgYW5hbWU6IHN0cmluZykgPT4gUHJvbWlzZTxUeXBlPlxuICAgIG9wZW46IChmaWQ6IEZpZCwgbW9kZTogT3Blbk1vZGUpID0+IFByb21pc2U8VHlwZT4sXG4gICAgY2x1bms6IChmaWQ6IEZpZCkgPT4gUHJvbWlzZTx2b2lkPixcbiAgICBjcmVhdGU6IChmaWQ6IEZpZCwgbmFtZTpzdHJpbmcsIG1vZGU6Q3JlYXRlTW9kZSkgPT4gUHJvbWlzZTxUeXBlPixcbiAgICByZW1vdmU6IChmaWQ6IEZpZCkgPT4gUHJvbWlzZTx2b2lkPixcbiAgICB3c3RhdDogKGZpZDogRmlkLCBzOiBJU3RhdCkgPT4gUHJvbWlzZTx2b2lkPixcbiAgICBzdGF0OiAoZmlkOiBGaWQpID0+IFByb21pc2U8SVN0YXQ+LFxuICAgIHdhdHRyOiAoZmlkOiBGaWQsIGw6c3RyaW5nLCBzOiBzdHJpbmcpID0+IFByb21pc2U8dm9pZD4sXG4gICAgYXR0cjogKGZpZDogRmlkLCBsOnN0cmluZykgPT4gUHJvbWlzZTxzdHJpbmc+LFxuICAgIHJlYWQ6IChmaWQ6IEZpZCwgb2Zmc2V0Om51bWJlciwgY291bnQ6bnVtYmVyKSA9PiBQcm9taXNlPFVpbnQ4QXJyYXk+LFxuICAgIHdyaXRlOiAoZmlkOiBGaWQsIGJ1ZjpVaW50OEFycmF5LCBvZmZzZXQ6bnVtYmVyKSA9PiBQcm9taXNlPG51bWJlcj4sXG4gICAgd2FsazogKGZpZDogRmlkLCBuZXdmaWQ6IEZpZCwgbmFtZTogc3RyaW5nW10pID0+IFByb21pc2U8VHlwZVtdPixcbn1cblxuZXhwb3J0IGNsYXNzIFNlcnZpY2U5UHtcbiAgICBwcml2YXRlIGZkOiBGaWxlRGVzY3JpcHRvcjtcbiAgICBwcml2YXRlIG9wczogSU9wZXJhdGlvbnM5UDtcbiAgICBwcml2YXRlIG1hcCA9IG5ldyBNYXA8RmlkLCBhbnk+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihmZDogRmlsZURlc2NyaXB0b3IsIG9wczogSU9wZXJhdGlvbnM5UCl7XG4gICAgICAgIHRoaXMuZmQgPSBmZDtcbiAgICAgICAgdGhpcy5vcHMgPSBvcHM7XG4gICAgfVxuXG4gICAgc2V0KGZkOiBGaWQsIG9iajogYW55KXtcbiAgICAgICAgdGhpcy5tYXAuc2V0KGZkLCBvYmopO1xuICAgIH1cblxuICAgIGdldChmZDogRmlkKXtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwLmdldChmZCk7XG4gICAgfVxuXG4gICAgYXN5bmMgcnVuKCkge1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGF3YWl0IHNlbGYucHJvYy5zeXMucmVhZCh0aGlzLmZkLCAtMSk7XG4gICAgICAgICAgICBjb25zdCBbdHlwZSwgdF0gPSBwZWFrOXAobWVzc2FnZSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFByb3RvY29sOVAuVHZlcnNpb246XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBQcm90b2NvbDlQLlRhdHRhY2g6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFtfLCB0YWcsIGZkLCB1bmFtZSwgYW5hbWVdID0gTVVUYXR0YWNoKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IGF3YWl0IHRoaXMub3BzLmF0dGFjaChmZCwgYW5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2VsZi5wcm9jLnN5cy53cml0ZSh0aGlzLmZkLCBNUFJhdHRhY2godGFnLCB0eXBlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXNlIFByb3RvY29sOVAuVGZsdXNoOlxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUHJvdG9jb2w5UC5Ud2Fsazoge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgW18sIHRhZywgZmQsIG5mZCwgd25hbWVzXSA9IE1VVHdhbGsobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0eXBlcyA9IGF3YWl0IHRoaXMub3BzLndhbGsoZmQsIG5mZCwgd25hbWVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHNlbGYucHJvYy5zeXMud3JpdGUodGhpcy5mZCwgTVBSd2Fsayh0YWcsIHR5cGVzKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUHJvdG9jb2w5UC5Ub3Blbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgW18sIHRhZywgZmQsIG1vZGVdID0gTVVUb3BlbihtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBhd2FpdCB0aGlzLm9wcy5vcGVuKGZkLCBtb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHNlbGYucHJvYy5zeXMud3JpdGUodGhpcy5mZCwgTVBSb3Blbih0YWcsIHR5cGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBQcm90b2NvbDlQLlRjcmVhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFtfLCB0YWcsIGZkLCBuYW1lLCBtb2RlXSA9IE1VVGNyZWF0ZShtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBhd2FpdCB0aGlzLm9wcy5jcmVhdGUoZmQsIG5hbWUsIG1vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2VsZi5wcm9jLnN5cy53cml0ZSh0aGlzLmZkLCBNUFJjcmVhdGUodGFnLCB0eXBlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUHJvdG9jb2w5UC5UcmVhZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgW18sIHRhZywgZmQsIG9mZnNldCwgY291bnRdID0gTVVUcmVhZChtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZiA9IGF3YWl0IHRoaXMub3BzLnJlYWQoZmQsIG9mZnNldCwgY291bnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2VsZi5wcm9jLnN5cy53cml0ZSh0aGlzLmZkLCBNUFJyZWFkKHRhZywgYnVmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUHJvdG9jb2w5UC5Ud3JpdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFtfLCB0YWcsIGZkLCBvZmZzZXQsIGJ1Zl0gPSBNVVR3cml0ZShtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gYXdhaXQgdGhpcy5vcHMud3JpdGUoZmQsIGJ1Ziwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHNlbGYucHJvYy5zeXMud3JpdGUodGhpcy5mZCwgTVBSd3JpdGUodGFnLCBjb3VudCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXNlIFByb3RvY29sOVAuVGNsdW5rOlxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUHJvdG9jb2w5UC5UcmVtb3ZlOlxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUHJvdG9jb2w5UC5Uc3RhdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgW18sIHRhZywgZmRdID0gTVVUc3RhdChtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXQgPSBhd2FpdCB0aGlzLm9wcy5zdGF0KGZkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHNlbGYucHJvYy5zeXMud3JpdGUodGhpcy5mZCwgTVBSc3RhdCh0YWcsIHN0YXQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9Y2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBzZWxmLnByb2Muc3lzLndyaXRlKHRoaXMuZmQsIE1QUmVycm9yKHQsIGUgYXMgc3RyaW5nKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/public/9p.ts\n");

/***/ }),

/***/ "./src/public/api.ts":
/*!***************************!*\
  !*** ./src/public/api.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FD_STDIN\": () => (/* binding */ FD_STDIN),\n/* harmony export */   \"FD_STDOUT\": () => (/* binding */ FD_STDOUT),\n/* harmony export */   \"FD_STDERR\": () => (/* binding */ FD_STDERR),\n/* harmony export */   \"CreateMode\": () => (/* binding */ CreateMode),\n/* harmony export */   \"MountType\": () => (/* binding */ MountType),\n/* harmony export */   \"OpenMode\": () => (/* binding */ OpenMode),\n/* harmony export */   \"ForkMode2\": () => (/* binding */ ForkMode2),\n/* harmony export */   \"ForkMode\": () => (/* binding */ ForkMode),\n/* harmony export */   \"Status\": () => (/* binding */ Status),\n/* harmony export */   \"PError\": () => (/* binding */ PError),\n/* harmony export */   \"Type\": () => (/* binding */ Type)\n/* harmony export */ });\nconst FD_STDIN = 0;\nconst FD_STDOUT = 1;\nconst FD_STDERR = 2;\nvar CreateMode;\n(function (CreateMode) {\n    CreateMode[CreateMode[\"DIR\"] = 2147483648] = \"DIR\";\n    CreateMode[CreateMode[\"APPEND\"] = 1073741824] = \"APPEND\";\n    CreateMode[CreateMode[\"EXCL\"] = 536870912] = \"EXCL\";\n    CreateMode[CreateMode[\"MOUNT\"] = 268435456] = \"MOUNT\";\n    CreateMode[CreateMode[\"AUTH\"] = 134217728] = \"AUTH\";\n    CreateMode[CreateMode[\"TMP\"] = 67108864] = \"TMP\";\n    CreateMode[CreateMode[\"READ\"] = 4] = \"READ\";\n    CreateMode[CreateMode[\"WRITE\"] = 2] = \"WRITE\";\n    CreateMode[CreateMode[\"EXEC\"] = 1] = \"EXEC\";\n})(CreateMode || (CreateMode = {}));\nvar MountType;\n(function (MountType) {\n    MountType[MountType[\"REPL\"] = 0] = \"REPL\";\n    MountType[MountType[\"BEFORE\"] = 1] = \"BEFORE\";\n    MountType[MountType[\"AFTER\"] = 2] = \"AFTER\";\n    MountType[MountType[\"CREATE\"] = 4] = \"CREATE\";\n})(MountType || (MountType = {}));\nvar OpenMode;\n(function (OpenMode) {\n    OpenMode[OpenMode[\"READ\"] = 1] = \"READ\";\n    OpenMode[OpenMode[\"WRITE\"] = 2] = \"WRITE\";\n    OpenMode[OpenMode[\"RDWR\"] = 3] = \"RDWR\";\n    OpenMode[OpenMode[\"EXEC\"] = 4] = \"EXEC\";\n    OpenMode[OpenMode[\"TRUNC\"] = 16] = \"TRUNC\";\n    OpenMode[OpenMode[\"RCLOSE\"] = 64] = \"RCLOSE\";\n})(OpenMode || (OpenMode = {}));\nvar ForkMode2;\n(function (ForkMode2) {\n    ForkMode2[ForkMode2[\"NEW_NAMESPACE\"] = 0] = \"NEW_NAMESPACE\";\n    ForkMode2[ForkMode2[\"CLONE_MNT\"] = 1] = \"CLONE_MNT\";\n    ForkMode2[ForkMode2[\"CLONE_PID\"] = 2] = \"CLONE_PID\";\n    ForkMode2[ForkMode2[\"NO_MNT\"] = 3] = \"NO_MNT\";\n    ForkMode2[ForkMode2[\"COPY_ENV\"] = 4] = \"COPY_ENV\";\n    ForkMode2[ForkMode2[\"EMPTY_ENV\"] = 5] = \"EMPTY_ENV\";\n    ForkMode2[ForkMode2[\"COPY_FD\"] = 6] = \"COPY_FD\";\n    ForkMode2[ForkMode2[\"EMPTY_FD\"] = 7] = \"EMPTY_FD\";\n})(ForkMode2 || (ForkMode2 = {}));\nvar ForkMode;\n(function (ForkMode) {\n    ForkMode[ForkMode[\"RFNAMEG\"] = 1] = \"RFNAMEG\";\n    ForkMode[ForkMode[\"RFENVG\"] = 2] = \"RFENVG\";\n    ForkMode[ForkMode[\"RFFDG\"] = 4] = \"RFFDG\";\n    ForkMode[ForkMode[\"RFNOTEG\"] = 8] = \"RFNOTEG\";\n    ForkMode[ForkMode[\"RFPROC\"] = 16] = \"RFPROC\";\n    ForkMode[ForkMode[\"RFMEM\"] = 32] = \"RFMEM\";\n    ForkMode[ForkMode[\"RFNOWAIT\"] = 64] = \"RFNOWAIT\";\n    ForkMode[ForkMode[\"RFCNAMEG\"] = 1024] = \"RFCNAMEG\";\n    ForkMode[ForkMode[\"RFCENVG\"] = 2048] = \"RFCENVG\";\n    ForkMode[ForkMode[\"RFCFDG\"] = 4096] = \"RFCFDG\";\n    ForkMode[ForkMode[\"RFREND\"] = 8192] = \"RFREND\";\n    ForkMode[ForkMode[\"RFNOMNT\"] = 16384] = \"RFNOMNT\";\n})(ForkMode || (ForkMode = {}));\nvar Status;\n(function (Status) {\n    Status[Status[\"OK\"] = 0] = \"OK\";\n    Status[Status[\"EPERM\"] = 1] = \"EPERM\";\n    Status[Status[\"ENOENT\"] = 2] = \"ENOENT\";\n    Status[Status[\"ESRCH\"] = 3] = \"ESRCH\";\n    Status[Status[\"EINTR\"] = 4] = \"EINTR\";\n    Status[Status[\"EIO\"] = 5] = \"EIO\";\n    Status[Status[\"ENXIO\"] = 6] = \"ENXIO\";\n    Status[Status[\"E2BIG\"] = 7] = \"E2BIG\";\n    Status[Status[\"ENOEXEC\"] = 8] = \"ENOEXEC\";\n    Status[Status[\"EBADF\"] = 9] = \"EBADF\";\n    Status[Status[\"ECHILD\"] = 10] = \"ECHILD\";\n    Status[Status[\"EAGAIN\"] = 11] = \"EAGAIN\";\n    Status[Status[\"ENOMEM\"] = 12] = \"ENOMEM\";\n    Status[Status[\"EACCES\"] = 13] = \"EACCES\";\n    Status[Status[\"EFAULT\"] = 14] = \"EFAULT\";\n    Status[Status[\"ENOTBLK\"] = 15] = \"ENOTBLK\";\n    Status[Status[\"EBUSY\"] = 16] = \"EBUSY\";\n    Status[Status[\"EEXIST\"] = 17] = \"EEXIST\";\n    Status[Status[\"EXDEV\"] = 18] = \"EXDEV\";\n    Status[Status[\"ENODEV\"] = 19] = \"ENODEV\";\n    Status[Status[\"ENOTDIR\"] = 20] = \"ENOTDIR\";\n    Status[Status[\"EISDIR\"] = 21] = \"EISDIR\";\n    Status[Status[\"EINVAL\"] = 22] = \"EINVAL\";\n    Status[Status[\"ENFILE\"] = 23] = \"ENFILE\";\n    Status[Status[\"EMFILE\"] = 24] = \"EMFILE\";\n    Status[Status[\"ENOTTY\"] = 25] = \"ENOTTY\";\n    Status[Status[\"ETXTBSY\"] = 26] = \"ETXTBSY\";\n    Status[Status[\"EFBIG\"] = 27] = \"EFBIG\";\n    Status[Status[\"ENOSPC\"] = 28] = \"ENOSPC\";\n    Status[Status[\"ESPIPE\"] = 29] = \"ESPIPE\";\n    Status[Status[\"EROFS\"] = 30] = \"EROFS\";\n    Status[Status[\"EMLINK\"] = 31] = \"EMLINK\";\n    Status[Status[\"EPIPE\"] = 32] = \"EPIPE\";\n    Status[Status[\"EDOM\"] = 33] = \"EDOM\";\n    Status[Status[\"ERANGE\"] = 34] = \"ERANGE\";\n    Status[Status[\"EDEADLK\"] = 35] = \"EDEADLK\";\n    Status[Status[\"ENAMETOOLONG\"] = 36] = \"ENAMETOOLONG\";\n    Status[Status[\"ENOLCK\"] = 37] = \"ENOLCK\";\n    Status[Status[\"ENOSYS\"] = 38] = \"ENOSYS\";\n    Status[Status[\"ENOTEMPTY\"] = 39] = \"ENOTEMPTY\";\n    Status[Status[\"ELOOP\"] = 40] = \"ELOOP\";\n    Status[Status[\"ENOMSG\"] = 42] = \"ENOMSG\";\n    Status[Status[\"EIDRM\"] = 43] = \"EIDRM\";\n    Status[Status[\"ECHRNG\"] = 44] = \"ECHRNG\";\n    Status[Status[\"EL2NSYNC\"] = 45] = \"EL2NSYNC\";\n    Status[Status[\"EL3HLT\"] = 46] = \"EL3HLT\";\n    Status[Status[\"EL3RST\"] = 47] = \"EL3RST\";\n    Status[Status[\"ELNRNG\"] = 48] = \"ELNRNG\";\n    Status[Status[\"EUNATCH\"] = 49] = \"EUNATCH\";\n    Status[Status[\"ENOCSI\"] = 50] = \"ENOCSI\";\n    Status[Status[\"EL2HLT\"] = 51] = \"EL2HLT\";\n    Status[Status[\"EBADE\"] = 52] = \"EBADE\";\n    Status[Status[\"EBADR\"] = 53] = \"EBADR\";\n    Status[Status[\"EXFULL\"] = 54] = \"EXFULL\";\n    Status[Status[\"ENOANO\"] = 55] = \"ENOANO\";\n    Status[Status[\"EBADRQC\"] = 56] = \"EBADRQC\";\n    Status[Status[\"EBADSLT\"] = 57] = \"EBADSLT\";\n    Status[Status[\"EBFONT\"] = 59] = \"EBFONT\";\n    Status[Status[\"ENOSTR\"] = 60] = \"ENOSTR\";\n    Status[Status[\"ENODATA\"] = 61] = \"ENODATA\";\n    Status[Status[\"ETIME\"] = 62] = \"ETIME\";\n    Status[Status[\"ENOSR\"] = 63] = \"ENOSR\";\n    Status[Status[\"ENONET\"] = 64] = \"ENONET\";\n    Status[Status[\"ENOPKG\"] = 65] = \"ENOPKG\";\n    Status[Status[\"EREMOTE\"] = 66] = \"EREMOTE\";\n    Status[Status[\"ENOLINK\"] = 67] = \"ENOLINK\";\n    Status[Status[\"EADV\"] = 68] = \"EADV\";\n    Status[Status[\"ESRMNT\"] = 69] = \"ESRMNT\";\n    Status[Status[\"ECOMM\"] = 70] = \"ECOMM\";\n    Status[Status[\"EPROTO\"] = 71] = \"EPROTO\";\n    Status[Status[\"EMULTIHOP\"] = 72] = \"EMULTIHOP\";\n    Status[Status[\"EDOTDOT\"] = 73] = \"EDOTDOT\";\n    Status[Status[\"EBADMSG\"] = 74] = \"EBADMSG\";\n    Status[Status[\"EOVERFLOW\"] = 75] = \"EOVERFLOW\";\n    Status[Status[\"ENOTUNIQ\"] = 76] = \"ENOTUNIQ\";\n    Status[Status[\"EBADFD\"] = 77] = \"EBADFD\";\n    Status[Status[\"EREMCHG\"] = 78] = \"EREMCHG\";\n    Status[Status[\"ELIBACC\"] = 79] = \"ELIBACC\";\n    Status[Status[\"ELIBBAD\"] = 80] = \"ELIBBAD\";\n    Status[Status[\"ELIBSCN\"] = 81] = \"ELIBSCN\";\n    Status[Status[\"ELIBMAX\"] = 82] = \"ELIBMAX\";\n    Status[Status[\"ELIBEXEC\"] = 83] = \"ELIBEXEC\";\n    Status[Status[\"EILSEQ\"] = 84] = \"EILSEQ\";\n    Status[Status[\"ERESTART\"] = 85] = \"ERESTART\";\n    Status[Status[\"ESTRPIPE\"] = 86] = \"ESTRPIPE\";\n    Status[Status[\"EUSERS\"] = 87] = \"EUSERS\";\n    Status[Status[\"ENOTSOCK\"] = 88] = \"ENOTSOCK\";\n    Status[Status[\"EDESTADDRREQ\"] = 89] = \"EDESTADDRREQ\";\n    Status[Status[\"EMSGSIZE\"] = 90] = \"EMSGSIZE\";\n    Status[Status[\"EPROTOTYPE\"] = 91] = \"EPROTOTYPE\";\n    Status[Status[\"ENOPROTOOPT\"] = 92] = \"ENOPROTOOPT\";\n    Status[Status[\"EPROTONOSUPPORT\"] = 93] = \"EPROTONOSUPPORT\";\n    Status[Status[\"ESOCKTNOSUPPORT\"] = 94] = \"ESOCKTNOSUPPORT\";\n    Status[Status[\"EOPNOTSUPP\"] = 95] = \"EOPNOTSUPP\";\n    Status[Status[\"EPFNOSUPPORT\"] = 96] = \"EPFNOSUPPORT\";\n    Status[Status[\"EAFNOSUPPORT\"] = 97] = \"EAFNOSUPPORT\";\n    Status[Status[\"EADDRINUSE\"] = 98] = \"EADDRINUSE\";\n    Status[Status[\"EADDRNOTAVAIL\"] = 99] = \"EADDRNOTAVAIL\";\n    Status[Status[\"ENETDOWN\"] = 100] = \"ENETDOWN\";\n    Status[Status[\"ENETUNREACH\"] = 101] = \"ENETUNREACH\";\n    Status[Status[\"ENETRESET\"] = 102] = \"ENETRESET\";\n    Status[Status[\"ECONNABORTED\"] = 103] = \"ECONNABORTED\";\n    Status[Status[\"ECONNRESET\"] = 104] = \"ECONNRESET\";\n    Status[Status[\"ENOBUFS\"] = 105] = \"ENOBUFS\";\n    Status[Status[\"EISCONN\"] = 106] = \"EISCONN\";\n    Status[Status[\"ENOTCONN\"] = 107] = \"ENOTCONN\";\n    Status[Status[\"ESHUTDOWN\"] = 108] = \"ESHUTDOWN\";\n    Status[Status[\"ETOOMANYREFS\"] = 109] = \"ETOOMANYREFS\";\n    Status[Status[\"ETIMEDOUT\"] = 110] = \"ETIMEDOUT\";\n    Status[Status[\"ECONNREFUSED\"] = 111] = \"ECONNREFUSED\";\n    Status[Status[\"EHOSTDOWN\"] = 112] = \"EHOSTDOWN\";\n    Status[Status[\"EHOSTUNREACH\"] = 113] = \"EHOSTUNREACH\";\n    Status[Status[\"EALREADY\"] = 114] = \"EALREADY\";\n    Status[Status[\"EINPROGRESS\"] = 115] = \"EINPROGRESS\";\n    Status[Status[\"ESTALE\"] = 116] = \"ESTALE\";\n    Status[Status[\"EUCLEAN\"] = 117] = \"EUCLEAN\";\n    Status[Status[\"ENOTNAM\"] = 118] = \"ENOTNAM\";\n    Status[Status[\"ENAVAIL\"] = 119] = \"ENAVAIL\";\n    Status[Status[\"EISNAM\"] = 120] = \"EISNAM\";\n    Status[Status[\"EREMOTEIO\"] = 121] = \"EREMOTEIO\";\n    Status[Status[\"EDQUOT\"] = 122] = \"EDQUOT\";\n    Status[Status[\"ENOMEDIUM\"] = 123] = \"ENOMEDIUM\";\n    Status[Status[\"EMEDIUMTYPE\"] = 124] = \"EMEDIUMTYPE\";\n    Status[Status[\"ECANCELED\"] = 125] = \"ECANCELED\";\n    Status[Status[\"ENOKEY\"] = 126] = \"ENOKEY\";\n    Status[Status[\"EKEYEXPIRED\"] = 127] = \"EKEYEXPIRED\";\n    Status[Status[\"EKEYREVOKED\"] = 128] = \"EKEYREVOKED\";\n    Status[Status[\"EKEYREJECTED\"] = 129] = \"EKEYREJECTED\";\n    Status[Status[\"EOWNERDEAD\"] = 130] = \"EOWNERDEAD\";\n    Status[Status[\"ENOTRECOVERABLE\"] = 131] = \"ENOTRECOVERABLE\";\n})(Status || (Status = {}));\nclass PError {\n    code;\n    constructor(code) {\n        this.code = code;\n        Object.setPrototypeOf(this, PError.prototype);\n    }\n}\nvar Type;\n(function (Type) {\n    Type[Type[\"DIR\"] = 128] = \"DIR\";\n    Type[Type[\"APPEND\"] = 64] = \"APPEND\";\n    Type[Type[\"EXCL\"] = 32] = \"EXCL\";\n    Type[Type[\"MOUNT\"] = 16] = \"MOUNT\";\n    Type[Type[\"AUTH\"] = 8] = \"AUTH\";\n    Type[Type[\"TMP\"] = 4] = \"TMP\";\n    Type[Type[\"FILE\"] = 0] = \"FILE\"; /* plain file */\n})(Type || (Type = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/public/api.ts\n");

/***/ }),

/***/ "./src/shared/proc.ts":
/*!****************************!*\
  !*** ./src/shared/proc.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MessageType\": () => (/* binding */ MessageType),\n/* harmony export */   \"Signal\": () => (/* binding */ Signal),\n/* harmony export */   \"peak\": () => (/* binding */ peak),\n/* harmony export */   \"MPDependency\": () => (/* binding */ MPDependency),\n/* harmony export */   \"MUDependency\": () => (/* binding */ MUDependency),\n/* harmony export */   \"MPStat\": () => (/* binding */ MPStat),\n/* harmony export */   \"MUStat\": () => (/* binding */ MUStat),\n/* harmony export */   \"MPRead\": () => (/* binding */ MPRead),\n/* harmony export */   \"MURead\": () => (/* binding */ MURead),\n/* harmony export */   \"MPWrite\": () => (/* binding */ MPWrite),\n/* harmony export */   \"MUWrite\": () => (/* binding */ MUWrite),\n/* harmony export */   \"MPPipeRes\": () => (/* binding */ MPPipeRes),\n/* harmony export */   \"MUPipeRes\": () => (/* binding */ MUPipeRes),\n/* harmony export */   \"MPBind\": () => (/* binding */ MPBind),\n/* harmony export */   \"MUBind\": () => (/* binding */ MUBind),\n/* harmony export */   \"MPMount\": () => (/* binding */ MPMount),\n/* harmony export */   \"MUMount\": () => (/* binding */ MUMount),\n/* harmony export */   \"MPStart\": () => (/* binding */ MPStart),\n/* harmony export */   \"MUStart\": () => (/* binding */ MUStart),\n/* harmony export */   \"MPForkStart\": () => (/* binding */ MPForkStart),\n/* harmony export */   \"MUForkStart\": () => (/* binding */ MUForkStart),\n/* harmony export */   \"MPFork\": () => (/* binding */ MPFork),\n/* harmony export */   \"MUFork\": () => (/* binding */ MUFork),\n/* harmony export */   \"MPForkRes\": () => (/* binding */ MPForkRes),\n/* harmony export */   \"MUForkRes\": () => (/* binding */ MUForkRes),\n/* harmony export */   \"MPExec\": () => (/* binding */ MPExec),\n/* harmony export */   \"MUExec\": () => (/* binding */ MUExec),\n/* harmony export */   \"MPOpen\": () => (/* binding */ MPOpen),\n/* harmony export */   \"MUOpen\": () => (/* binding */ MUOpen),\n/* harmony export */   \"MPCreate\": () => (/* binding */ MPCreate),\n/* harmony export */   \"MUCreate\": () => (/* binding */ MUCreate),\n/* harmony export */   \"MPSignal\": () => (/* binding */ MPSignal),\n/* harmony export */   \"MUSignal\": () => (/* binding */ MUSignal),\n/* harmony export */   \"MPWriteRes\": () => (/* binding */ MPWriteRes),\n/* harmony export */   \"MUWriteRes\": () => (/* binding */ MUWriteRes),\n/* harmony export */   \"MPReadRes\": () => (/* binding */ MPReadRes),\n/* harmony export */   \"MUReadRes\": () => (/* binding */ MUReadRes),\n/* harmony export */   \"MPStatRes\": () => (/* binding */ MPStatRes),\n/* harmony export */   \"MUStatRes\": () => (/* binding */ MUStatRes),\n/* harmony export */   \"MPExecRes\": () => (/* binding */ MPExecRes),\n/* harmony export */   \"MUExecRes\": () => (/* binding */ MUExecRes),\n/* harmony export */   \"MPOpenRes\": () => (/* binding */ MPOpenRes),\n/* harmony export */   \"MUOpenRes\": () => (/* binding */ MUOpenRes),\n/* harmony export */   \"MPCreateRes\": () => (/* binding */ MPCreateRes),\n/* harmony export */   \"MUCreateRes\": () => (/* binding */ MUCreateRes),\n/* harmony export */   \"MPClose\": () => (/* binding */ MPClose),\n/* harmony export */   \"MUClose\": () => (/* binding */ MUClose),\n/* harmony export */   \"MPDie\": () => (/* binding */ MPDie),\n/* harmony export */   \"MUDie\": () => (/* binding */ MUDie),\n/* harmony export */   \"MPGetCwdRes\": () => (/* binding */ MPGetCwdRes),\n/* harmony export */   \"MUGetCwdRes\": () => (/* binding */ MUGetCwdRes),\n/* harmony export */   \"MPChCwd\": () => (/* binding */ MPChCwd),\n/* harmony export */   \"MUChCwd\": () => (/* binding */ MUChCwd),\n/* harmony export */   \"MPUnmount\": () => (/* binding */ MPUnmount),\n/* harmony export */   \"MUUnmount\": () => (/* binding */ MUUnmount),\n/* harmony export */   \"MPRemove\": () => (/* binding */ MPRemove),\n/* harmony export */   \"MURemove\": () => (/* binding */ MURemove),\n/* harmony export */   \"MPGetCwd\": () => (/* binding */ MPGetCwd),\n/* harmony export */   \"MUGetCwd\": () => (/* binding */ MUGetCwd),\n/* harmony export */   \"MPChCwdRes\": () => (/* binding */ MPChCwdRes),\n/* harmony export */   \"MUChCwdRes\": () => (/* binding */ MUChCwdRes),\n/* harmony export */   \"MPMountRes\": () => (/* binding */ MPMountRes),\n/* harmony export */   \"MUMountRes\": () => (/* binding */ MUMountRes),\n/* harmony export */   \"MPRemoveRes\": () => (/* binding */ MPRemoveRes),\n/* harmony export */   \"MURemoveRes\": () => (/* binding */ MURemoveRes),\n/* harmony export */   \"MPUnmountRes\": () => (/* binding */ MPUnmountRes),\n/* harmony export */   \"MUUnmountRes\": () => (/* binding */ MUUnmountRes),\n/* harmony export */   \"MPCloseRes\": () => (/* binding */ MPCloseRes),\n/* harmony export */   \"MUCloseRes\": () => (/* binding */ MUCloseRes),\n/* harmony export */   \"MPPipe\": () => (/* binding */ MPPipe),\n/* harmony export */   \"MUPipe\": () => (/* binding */ MUPipe),\n/* harmony export */   \"MPBindRes\": () => (/* binding */ MPBindRes),\n/* harmony export */   \"MUBindRes\": () => (/* binding */ MUBindRes),\n/* harmony export */   \"MPReady\": () => (/* binding */ MPReady),\n/* harmony export */   \"MUReady\": () => (/* binding */ MUReady),\n/* harmony export */   \"debug\": () => (/* binding */ debug)\n/* harmony export */ });\n/* harmony import */ var _struct__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./struct */ \"./src/shared/struct.ts\");\n\nvar MessageType;\n(function (MessageType) {\n    MessageType[MessageType[\"READY\"] = 0] = \"READY\";\n    MessageType[MessageType[\"DEPENDENCY\"] = 1] = \"DEPENDENCY\";\n    MessageType[MessageType[\"START\"] = 2] = \"START\";\n    MessageType[MessageType[\"FORK_START\"] = 3] = \"FORK_START\";\n    MessageType[MessageType[\"READ\"] = 10] = \"READ\";\n    MessageType[MessageType[\"WRITE\"] = 11] = \"WRITE\";\n    MessageType[MessageType[\"OPEN\"] = 12] = \"OPEN\";\n    MessageType[MessageType[\"CREATE\"] = 13] = \"CREATE\";\n    MessageType[MessageType[\"CLOSE\"] = 14] = \"CLOSE\";\n    MessageType[MessageType[\"GETCWD\"] = 15] = \"GETCWD\";\n    MessageType[MessageType[\"EXEC\"] = 16] = \"EXEC\";\n    MessageType[MessageType[\"FORK\"] = 17] = \"FORK\";\n    MessageType[MessageType[\"CHCWD\"] = 18] = \"CHCWD\";\n    MessageType[MessageType[\"MOUNT\"] = 19] = \"MOUNT\";\n    MessageType[MessageType[\"BIND\"] = 20] = \"BIND\";\n    MessageType[MessageType[\"UNMOUNT\"] = 21] = \"UNMOUNT\";\n    MessageType[MessageType[\"REMOVE\"] = 22] = \"REMOVE\";\n    MessageType[MessageType[\"PIPE\"] = 23] = \"PIPE\";\n    MessageType[MessageType[\"STAT\"] = 24] = \"STAT\";\n    MessageType[MessageType[\"DIE\"] = 25] = \"DIE\";\n    MessageType[MessageType[\"READ_RES\"] = 100] = \"READ_RES\";\n    MessageType[MessageType[\"WRITE_RES\"] = 101] = \"WRITE_RES\";\n    MessageType[MessageType[\"OPEN_RES\"] = 102] = \"OPEN_RES\";\n    MessageType[MessageType[\"CREATE_RES\"] = 103] = \"CREATE_RES\";\n    MessageType[MessageType[\"CLOSE_RES\"] = 104] = \"CLOSE_RES\";\n    MessageType[MessageType[\"GETCWD_RES\"] = 105] = \"GETCWD_RES\";\n    MessageType[MessageType[\"EXEC_RES\"] = 106] = \"EXEC_RES\";\n    MessageType[MessageType[\"FORK_RES\"] = 107] = \"FORK_RES\";\n    MessageType[MessageType[\"CHCWD_RES\"] = 108] = \"CHCWD_RES\";\n    MessageType[MessageType[\"MOUNT_RES\"] = 109] = \"MOUNT_RES\";\n    MessageType[MessageType[\"BIND_RES\"] = 110] = \"BIND_RES\";\n    MessageType[MessageType[\"UNMOUNT_RES\"] = 111] = \"UNMOUNT_RES\";\n    MessageType[MessageType[\"REMOVE_RES\"] = 112] = \"REMOVE_RES\";\n    MessageType[MessageType[\"PIPE_RES\"] = 113] = \"PIPE_RES\";\n    MessageType[MessageType[\"STAT_RES\"] = 114] = \"STAT_RES\";\n    MessageType[MessageType[\"SIGNAL\"] = 115] = \"SIGNAL\";\n})(MessageType || (MessageType = {}));\nvar Signal;\n(function (Signal) {\n    Signal[Signal[\"ERROR\"] = 0] = \"ERROR\";\n})(Signal || (Signal = {}));\nfunction unpackMessage(a, pattern) {\n    const s = (0,_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, pattern);\n    s.shift();\n    return s;\n}\nfunction peak(a) {\n    return (0,_struct__WEBPACK_IMPORTED_MODULE_0__.unpack)(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString]);\n}\nconst MPDependency = (id, name, code) => (0,_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt8)(MessageType.DEPENDENCY), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(id), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(name), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(code)]);\nconst MUDependency = (a) => unpackMessage(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString]);\nconst MPStat = (id, fd) => (0,_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt8)(MessageType.STAT), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(id), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt32)(fd)]);\nconst MUStat = (a) => unpackMessage(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt32]);\nconst MPRead = (id, fd, count) => (0,_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt8)(MessageType.READ), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(id), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt32)(fd), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packDouble)(count)]);\nconst MURead = (a) => unpackMessage(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt32, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackDouble]);\nconst MPWrite = (id, fd, buf) => (0,_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt8)(MessageType.WRITE), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(id), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt32)(fd), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packBytearray)(buf)]);\nconst MUWrite = (a) => unpackMessage(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt32, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackBytearray]);\nconst MPPipeRes = (id, fd) => (0,_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt8)(MessageType.PIPE_RES), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(id), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packA)(fd, _struct__WEBPACK_IMPORTED_MODULE_0__.packInt32)]);\nconst MUPipeRes = (a) => unpackMessage(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, (0,_struct__WEBPACK_IMPORTED_MODULE_0__.unpackA)(_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt32)]);\nconst MPBind = (id, name, old, flags) => (0,_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt8)(MessageType.BIND), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(id), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(name), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(old), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt32)(flags)]);\nconst MUBind = (a) => unpackMessage(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt32]);\nconst MPMount = (id, fd, afd, old, aname, flags) => (0,_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt8)(MessageType.MOUNT), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(id), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt32)(fd), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt32)(afd), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(old), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(aname), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt32)(flags)]);\nconst MUMount = (a) => unpackMessage(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt32, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt32, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt32]);\nconst MPStart = (id, code, args) => (0,_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt8)(MessageType.START), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(id), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(code), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packA)(args, _struct__WEBPACK_IMPORTED_MODULE_0__.packString)]);\nconst MUStart = (a) => unpackMessage(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, (0,_struct__WEBPACK_IMPORTED_MODULE_0__.unpackA)(_struct__WEBPACK_IMPORTED_MODULE_0__.unpackString)]);\nconst MPForkStart = (id, code, entrypoint, args) => (0,_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt8)(MessageType.FORK_START), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(id), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(code), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(entrypoint), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packA)(args, _struct__WEBPACK_IMPORTED_MODULE_0__.packString)]);\nconst MUForkStart = (a) => unpackMessage(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, (0,_struct__WEBPACK_IMPORTED_MODULE_0__.unpackA)(_struct__WEBPACK_IMPORTED_MODULE_0__.unpackString)]);\nconst MPFork = (id, path, args, mode) => (0,_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt8)(MessageType.FORK), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(id), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(path), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packA)(args, _struct__WEBPACK_IMPORTED_MODULE_0__.packString), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packDouble)(mode)]);\nconst MUFork = (a) => unpackMessage(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, (0,_struct__WEBPACK_IMPORTED_MODULE_0__.unpackA)(_struct__WEBPACK_IMPORTED_MODULE_0__.unpackString), _struct__WEBPACK_IMPORTED_MODULE_0__.unpackDouble]);\nconst MPForkRes = (id, pid) => (0,_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt8)(MessageType.FORK_RES), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(id), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt32)(pid)]);\nconst MUForkRes = (a) => unpackMessage(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt32]);\nconst MPExec = (id, code, args) => (0,_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt8)(MessageType.EXEC), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(id), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(code), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packA)(args, _struct__WEBPACK_IMPORTED_MODULE_0__.packString)]);\nconst MUExec = (a) => unpackMessage(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, (0,_struct__WEBPACK_IMPORTED_MODULE_0__.unpackA)(_struct__WEBPACK_IMPORTED_MODULE_0__.unpackString)]);\nconst MPOpen = (id, file, mode) => (0,_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt8)(MessageType.OPEN), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(id), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(file), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt32)(mode)]);\nconst MUOpen = (a) => unpackMessage(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt32]);\nconst MPCreate = (id, file, mode) => (0,_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt8)(MessageType.CREATE), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(id), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(file), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packDouble)(mode)]);\nconst MUCreate = (a) => unpackMessage(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackDouble]);\nconst MPSignal = (id, signal, arg) => (0,_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt8)(MessageType.SIGNAL), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(id), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(signal), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt8)(arg)]);\nconst MUSignal = (a) => unpackMessage(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt8]);\nconst MPWriteRes = (id, count) => (0,_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt8)(MessageType.WRITE_RES), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(id), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packDouble)(count)]);\nconst MUWriteRes = (a) => unpackMessage(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackDouble]);\nconst MPReadRes = (id, buf) => (0,_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt8)(MessageType.READ_RES), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(id), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packBytearray)(buf)]);\nconst MUReadRes = (a) => unpackMessage(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackBytearray]);\nconst MPStatRes = (id, stat) => (0,_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt8)(MessageType.STAT_RES), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(id), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packStat)(stat)]);\nconst MUStatRes = (a) => unpackMessage(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackStat]);\nconst MPExecRes = (id, pid) => (0,_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt8)(MessageType.EXEC_RES), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(id), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt32)(pid)]);\nconst MUExecRes = (a) => unpackMessage(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackUInt32]);\nconst packFD = (m) => ((id, fd) => (0,_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt8)(m), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(id), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt32)(fd)]));\nconst unpackFD = (a) => unpackMessage(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt32]);\nconst MPOpenRes = packFD(MessageType.OPEN_RES);\nconst MUOpenRes = unpackFD;\nconst MPCreateRes = packFD(MessageType.CREATE_RES);\nconst MUCreateRes = unpackFD;\nconst MPClose = packFD(MessageType.CLOSE);\nconst MUClose = unpackFD;\nconst MPDie = (id, status) => (0,_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt8)(MessageType.DIE), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(id), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packUInt32)(status)]);\nconst MUDie = (a) => unpackMessage(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackDouble]);\nconst packPath = (m) => ((id, path) => (0,_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt8)(m), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(id), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(path)]));\nconst unpackPath = (a) => unpackMessage(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString]);\nconst MPGetCwdRes = packPath(MessageType.GETCWD_RES);\nconst MUGetCwdRes = unpackPath;\nconst MPChCwd = packPath(MessageType.CHCWD);\nconst MUChCwd = unpackPath;\nconst MPUnmount = packPath(MessageType.UNMOUNT);\nconst MUUnmount = unpackPath;\nconst MPRemove = packPath(MessageType.REMOVE);\nconst MURemove = unpackPath;\nconst packAnswer = (m) => ((id) => (0,_struct__WEBPACK_IMPORTED_MODULE_0__.pack)([(0,_struct__WEBPACK_IMPORTED_MODULE_0__.packInt8)(m), (0,_struct__WEBPACK_IMPORTED_MODULE_0__.packString)(id)]));\nconst unpackAnswer = (a) => unpackMessage(a, [_struct__WEBPACK_IMPORTED_MODULE_0__.unpackInt8, _struct__WEBPACK_IMPORTED_MODULE_0__.unpackString]);\nconst MPGetCwd = packAnswer(MessageType.GETCWD);\nconst MUGetCwd = unpackAnswer;\nconst MPChCwdRes = packAnswer(MessageType.CHCWD_RES);\nconst MUChCwdRes = unpackAnswer;\nconst MPMountRes = packAnswer(MessageType.MOUNT_RES);\nconst MUMountRes = unpackAnswer;\nconst MPRemoveRes = packAnswer(MessageType.REMOVE_RES);\nconst MURemoveRes = unpackAnswer;\nconst MPUnmountRes = packAnswer(MessageType.UNMOUNT_RES);\nconst MUUnmountRes = unpackAnswer;\nconst MPCloseRes = packAnswer(MessageType.CLOSE_RES);\nconst MUCloseRes = unpackAnswer;\nconst MPPipe = packAnswer(MessageType.PIPE);\nconst MUPipe = unpackAnswer;\nconst MPBindRes = packAnswer(MessageType.BIND_RES);\nconst MUBindRes = unpackAnswer;\nconst MPReady = packAnswer(MessageType.READY);\nconst MUReady = unpackAnswer;\nfunction debug(a) {\n    const [type, id] = peak(a);\n    let result = [];\n    switch (type) {\n        case MessageType.READY:\n            result = MUReady(a);\n            break;\n        case MessageType.DEPENDENCY:\n            result = MUDependency(a);\n            break;\n        case MessageType.START:\n            result = MUStart(a);\n            break;\n        case MessageType.READ:\n            result = MURead(a);\n            break;\n        case MessageType.WRITE:\n            result = MUWrite(a);\n            break;\n        case MessageType.OPEN:\n            result = MUOpen(a);\n            break;\n        case MessageType.CREATE:\n            result = MUCreate(a);\n            break;\n        case MessageType.CLOSE:\n            result = MUClose(a);\n            break;\n        case MessageType.GETCWD:\n            result = MUGetCwd(a);\n            break;\n        case MessageType.EXEC:\n            result = MUExec(a);\n            break;\n        case MessageType.CHCWD:\n            result = MUChCwd(a);\n            break;\n        case MessageType.MOUNT:\n            result = MUMount(a);\n            break;\n        case MessageType.BIND:\n            result = MUBind(a);\n            break;\n        case MessageType.UNMOUNT:\n            result = MUUnmount(a);\n            break;\n        case MessageType.REMOVE:\n            result = MURemove(a);\n            break;\n        case MessageType.PIPE:\n            result = MUPipe(a);\n            break;\n        case MessageType.DIE:\n            result = MUDie(a);\n            break;\n        case MessageType.READ_RES:\n            result = MUReadRes(a);\n            break;\n        case MessageType.WRITE_RES:\n            result = MUWriteRes(a);\n            break;\n        case MessageType.OPEN_RES:\n            result = MUOpenRes(a);\n            break;\n        case MessageType.CREATE_RES:\n            result = MUCreateRes(a);\n            break;\n        case MessageType.CLOSE_RES:\n            result = MUCloseRes(a);\n            break;\n        case MessageType.GETCWD_RES:\n            result = MUGetCwdRes(a);\n            break;\n        case MessageType.EXEC_RES:\n            result = MUExecRes(a);\n            break;\n        case MessageType.CHCWD_RES:\n            result = MUChCwdRes(a);\n            break;\n        case MessageType.MOUNT_RES:\n            result = MUMountRes(a);\n            break;\n        case MessageType.BIND_RES:\n            result = MUBindRes(a);\n            break;\n        case MessageType.UNMOUNT_RES:\n            result = MUUnmountRes(a);\n            break;\n        case MessageType.REMOVE_RES:\n            result = MURemoveRes(a);\n            break;\n        case MessageType.PIPE_RES:\n            result = MUPipeRes(a);\n            break;\n        case MessageType.SIGNAL:\n            result = MUSignal(a);\n            break;\n        case MessageType.FORK:\n            result = MUFork(a);\n            break;\n        case MessageType.FORK_RES:\n            result = MUForkRes(a);\n            break;\n    }\n    result.unshift(MessageType[type]);\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/shared/proc.ts\n");

/***/ }),

/***/ "./src/shared/struct.ts":
/*!******************************!*\
  !*** ./src/shared/struct.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"packBytearray\": () => (/* binding */ packBytearray),\n/* harmony export */   \"unpackBytearray\": () => (/* binding */ unpackBytearray),\n/* harmony export */   \"packString\": () => (/* binding */ packString),\n/* harmony export */   \"unpackString\": () => (/* binding */ unpackString),\n/* harmony export */   \"packA\": () => (/* binding */ packA),\n/* harmony export */   \"unpackA\": () => (/* binding */ unpackA),\n/* harmony export */   \"packInt8\": () => (/* binding */ packInt8),\n/* harmony export */   \"unpackInt8\": () => (/* binding */ unpackInt8),\n/* harmony export */   \"packUInt8\": () => (/* binding */ packUInt8),\n/* harmony export */   \"unpackUInt8\": () => (/* binding */ unpackUInt8),\n/* harmony export */   \"packUInt16\": () => (/* binding */ packUInt16),\n/* harmony export */   \"unpackUInt16\": () => (/* binding */ unpackUInt16),\n/* harmony export */   \"packInt32\": () => (/* binding */ packInt32),\n/* harmony export */   \"unpackInt32\": () => (/* binding */ unpackInt32),\n/* harmony export */   \"packUInt32\": () => (/* binding */ packUInt32),\n/* harmony export */   \"unpackUInt32\": () => (/* binding */ unpackUInt32),\n/* harmony export */   \"packDouble\": () => (/* binding */ packDouble),\n/* harmony export */   \"unpackDouble\": () => (/* binding */ unpackDouble),\n/* harmony export */   \"pack\": () => (/* binding */ pack),\n/* harmony export */   \"packStat\": () => (/* binding */ packStat),\n/* harmony export */   \"unpackStat\": () => (/* binding */ unpackStat),\n/* harmony export */   \"unpack\": () => (/* binding */ unpack)\n/* harmony export */ });\nconst decoder = new TextDecoder();\nconst encoder = new TextEncoder();\nfunction packBytearray(s) {\n    const buff = new ArrayBuffer(s.length + 8);\n    const dv = new DataView(buff);\n    dv.setFloat64(0, s.length);\n    const result = new Uint8Array(buff);\n    result.set(s, 8);\n    return result;\n}\nfunction unpackBytearray(s, p) {\n    const dv = new DataView(s.buffer);\n    const l = dv.getFloat64(s.byteOffset + p);\n    return [s.subarray(p + 8, p + 8 + l), p + 8 + l];\n}\nfunction packString(s) {\n    const arr = encoder.encode(s);\n    const buff = new ArrayBuffer(arr.length + 8);\n    const dv = new DataView(buff);\n    dv.setFloat64(0, arr.length);\n    const result = new Uint8Array(buff);\n    result.set(arr, 8);\n    return result;\n}\nfunction unpackString(s, p) {\n    const dv = new DataView(s.buffer);\n    const l = dv.getFloat64(s.byteOffset + p);\n    return [decoder.decode(s.subarray(p + 8, p + 8 + l)), p + 8 + l];\n}\nfunction packA(s, packer) {\n    const arrs = s.map(x => packer(x));\n    const length = arrs.map(x => x.length).reduce((x, y) => x + y, 0);\n    const result = new Uint8Array(8 + length);\n    const dv = new DataView(result.buffer);\n    dv.setFloat64(0, s.length);\n    let p = 8;\n    for (const arr of arrs) {\n        result.set(arr, p);\n        p += arr.length;\n    }\n    return result;\n}\nfunction unpackA(unpacker) {\n    return (s, p) => {\n        const dv = new DataView(s.buffer);\n        const length = dv.getFloat64(s.byteOffset + p);\n        const result = [];\n        p += 8;\n        for (let i = 0; i < length; i++) {\n            let [str, off] = unpacker(s, p);\n            result.push(str);\n            p = off;\n        }\n        return [result, p];\n    };\n}\nfunction packInt8(s) {\n    const arr = new Uint8Array(1);\n    const dv = new DataView(arr.buffer);\n    dv.setInt8(0, s);\n    return arr;\n}\nfunction unpackInt8(s, p) {\n    return [new DataView(s.buffer).getInt8(s.byteOffset + p), p + 1];\n}\nfunction packUInt8(s) {\n    const arr = new Uint8Array(1);\n    const dv = new DataView(arr.buffer);\n    dv.setUint8(0, s);\n    return arr;\n}\nfunction unpackUInt8(s, p) {\n    return [new DataView(s.buffer).getUint8(s.byteOffset + p), p + 1];\n}\nfunction packUInt16(s) {\n    const arr = new Uint8Array(2);\n    const dv = new DataView(arr.buffer);\n    dv.setUint16(0, s);\n    return arr;\n}\nfunction unpackUInt16(s, p) {\n    return [new DataView(s.buffer).getUint16(s.byteOffset + p), p + 2];\n}\nfunction packInt32(s) {\n    const arr = new Uint8Array(4);\n    const dv = new DataView(arr.buffer);\n    dv.setInt32(0, s);\n    return arr;\n}\nfunction unpackInt32(s, p) {\n    return [new DataView(s.buffer).getInt32(s.byteOffset + p), p + 4];\n}\nfunction packUInt32(s) {\n    const arr = new Uint8Array(4);\n    const dv = new DataView(arr.buffer);\n    dv.setUint32(0, s);\n    return arr;\n}\nfunction unpackUInt32(s, p) {\n    return [new DataView(s.buffer).getUint32(s.byteOffset + p), p + 4];\n}\nfunction packDouble(s) {\n    const arr = new Uint8Array(8);\n    const dv = new DataView(arr.buffer);\n    dv.setFloat32(0, s);\n    return arr;\n}\nfunction unpackDouble(s, p) {\n    return [new DataView(s.buffer).getFloat32(s.byteOffset + p), p + 8];\n}\nfunction pack(arrs) {\n    const length = arrs.map(x => x.length).reduce((x, y) => x + y);\n    const result = new Uint8Array(length);\n    let p = 0;\n    for (const arr of arrs) {\n        result.set(arr, p);\n        p += arr.length;\n    }\n    return result;\n}\nfunction packStat(stat) {\n    return pack([\n        packString(stat.srv),\n        packUInt16(stat.subsrv),\n        packUInt8(stat.type),\n        packUInt32(stat.mode),\n        packUInt32(stat.atime),\n        packUInt32(stat.mtime),\n        packUInt32(stat.length),\n        packString(stat.name),\n        packString(stat.uid),\n        packString(stat.gid),\n        packString(stat.muid)\n    ]);\n}\nfunction unpackStat(s, p) {\n    let stat = {};\n    [stat.srv, p] = unpackString(s, p);\n    [stat.subsrv, p] = unpackUInt16(s, p);\n    [stat.type, p] = unpackUInt8(s, p);\n    [stat.mode, p] = unpackUInt32(s, p);\n    [stat.atime, p] = unpackUInt32(s, p);\n    [stat.mtime, p] = unpackUInt32(s, p);\n    [stat.length, p] = unpackUInt32(s, p);\n    [stat.name, p] = unpackString(s, p);\n    [stat.uid, p] = unpackString(s, p);\n    [stat.gid, p] = unpackString(s, p);\n    [stat.muid, p] = unpackString(s, p);\n    return [stat, p];\n}\nfunction unpack(arr, pattern) {\n    let p = 0;\n    const result = [];\n    for (const pat of pattern) {\n        const [obj, off] = pat(arr, p);\n        result.push(obj);\n        p = off;\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/shared/struct.ts\n");

/***/ }),

/***/ "./src/sys/aqueue.ts":
/*!***************************!*\
  !*** ./src/sys/aqueue.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"mkaqueue\": () => (/* binding */ mkaqueue),\n/* harmony export */   \"dequeue\": () => (/* binding */ dequeue),\n/* harmony export */   \"enqueue\": () => (/* binding */ enqueue)\n/* harmony export */ });\nfunction mkaqueue() {\n    return { buffer: [], promise: [] };\n}\nfunction dequeue(queue) {\n    if (queue.buffer.length == 0) {\n        return new Promise((resolve, reject) => {\n            queue.promise?.push(resolve);\n        });\n    }\n    else {\n        return Promise.resolve(queue.buffer.pop());\n    }\n}\nasync function enqueue(queue, value) {\n    if (queue.promise.length) {\n        queue.promise.pop()(value);\n    }\n    else {\n        queue.buffer.push(value);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzL2FxdWV1ZS50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3NzaW1waWJsZS8uL3NyYy9zeXMvYXF1ZXVlLnRzPzg5NTYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBJQXN5bmNRdWV1ZTxUPntcbiAgICBidWZmZXI6IFRbXVxuICAgIHByb21pc2UgOiAoKHZhbHVlOiBUKSA9PiB2b2lkKVtdXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBta2FxdWV1ZTxUPigpOiBJQXN5bmNRdWV1ZTxUPntcbiAgICByZXR1cm4ge2J1ZmZlcjogW10sIHByb21pc2U6IFtdfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVxdWV1ZTxUPihxdWV1ZTogSUFzeW5jUXVldWU8VD4pe1xuICAgIGlmKHF1ZXVlLmJ1ZmZlci5sZW5ndGggPT0gMCl7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxUPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBxdWV1ZS5wcm9taXNlPy5wdXNoKHJlc29sdmUpO1xuICAgICAgICB9KVxuICAgIH1lbHNle1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlPFQ+KHF1ZXVlLmJ1ZmZlci5wb3AoKSEpO1xuICAgIH1cbn1cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZW5xdWV1ZTxUPihxdWV1ZTogSUFzeW5jUXVldWU8VD4sIHZhbHVlOiBUKXtcbiAgICBpZihxdWV1ZS5wcm9taXNlLmxlbmd0aCl7XG4gICAgICAgIHF1ZXVlLnByb21pc2UucG9wKCkhKHZhbHVlKVxuICAgIH1lbHNle1xuICAgICAgICBxdWV1ZS5idWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/sys/aqueue.ts\n");

/***/ }),

/***/ "./src/sys/colors.ts":
/*!***************************!*\
  !*** ./src/sys/colors.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Colors\": () => (/* binding */ Colors),\n/* harmony export */   \"red\": () => (/* binding */ red),\n/* harmony export */   \"yellow\": () => (/* binding */ yellow),\n/* harmony export */   \"cyan\": () => (/* binding */ cyan),\n/* harmony export */   \"green\": () => (/* binding */ green)\n/* harmony export */ });\nvar Colors;\n(function (Colors) {\n    Colors[\"HEADER\"] = \"\\u001B[95m\";\n    Colors[\"BLUE\"] = \"\\u001B[94m\";\n    Colors[\"CYAN\"] = \"\\u001B[96m\";\n    Colors[\"GREEN\"] = \"\\u001B[92m\";\n    Colors[\"YELLOW\"] = \"\\u001B[93m\";\n    Colors[\"RED\"] = \"\\u001B[91m\";\n    Colors[\"ENDC\"] = \"\\u001B[0m\";\n    Colors[\"BOLD\"] = \"\\u001B[1m\";\n    Colors[\"UNDERLINE\"] = \"\\u001B[4m\";\n})(Colors || (Colors = {}));\nconst red = (s) => Colors.RED + s + Colors.ENDC;\nconst yellow = (s) => Colors.YELLOW + s + Colors.ENDC;\nconst cyan = (s) => Colors.CYAN + s + Colors.ENDC;\nconst green = (s) => Colors.GREEN + s + Colors.ENDC;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzL2NvbG9ycy50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9zc2ltcGlibGUvLi9zcmMvc3lzL2NvbG9ycy50cz9iYTFiIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBlbnVtIENvbG9ycyB7XG4gICAgSEVBREVSID0gICdcXHUwMDFiWzk1bScsXG4gICAgQkxVRSA9ICAnXFx1MDAxYls5NG0nLFxuICAgIENZQU4gPSAgJ1xcdTAwMWJbOTZtJyxcbiAgICBHUkVFTiA9ICAnXFx1MDAxYls5Mm0nLFxuICAgIFlFTExPVyA9ICAnXFx1MDAxYls5M20nLFxuICAgIFJFRCA9ICAnXFx1MDAxYls5MW0nLFxuICAgIEVOREMgPSAgJ1xcdTAwMWJbMG0nLFxuICAgIEJPTEQgPSAgJ1xcdTAwMWJbMW0nLFxuICAgIFVOREVSTElORSA9ICAnXFx1MDAxYls0bScsXG59XG5cbmV4cG9ydCBjb25zdCByZWQgPSAoczogc3RyaW5nKSA9PiBDb2xvcnMuUkVEICsgcyArIENvbG9ycy5FTkRDO1xuZXhwb3J0IGNvbnN0IHllbGxvdyA9IChzOiBzdHJpbmcpID0+IENvbG9ycy5ZRUxMT1cgKyBzICsgQ29sb3JzLkVOREM7XG5leHBvcnQgY29uc3QgY3lhbiA9IChzOiBzdHJpbmcpID0+IENvbG9ycy5DWUFOICsgcyArIENvbG9ycy5FTkRDO1xuZXhwb3J0IGNvbnN0IGdyZWVuID0gKHM6IHN0cmluZykgPT4gQ29sb3JzLkdSRUVOICsgcyArIENvbG9ycy5FTkRDO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/sys/colors.ts\n");

/***/ }),

/***/ "./src/sys/dev/bootimg.ts":
/*!********************************!*\
  !*** ./src/sys/dev/bootimg.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _dirtab__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dirtab */ \"./src/sys/dirtab.ts\");\n/* harmony import */ var _public_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../public/api */ \"./src/public/api.ts\");\n\n\nconst rootdir = [];\nfunction init(system) {\n    system.dev.registerDriver({\n        probe: async (x, match) => {\n            rootdir.push({\n                name: x.id, id: 1, type: _public_api__WEBPACK_IMPORTED_MODULE_1__.Type.FILE, l: 0, mode: 0, uid: system.sysUser,\n                read: async (file, buf) => {\n                    return new Uint8Array(await (await (await fetch(x.properties.image)).blob()).arrayBuffer());\n                }\n            });\n        },\n        remove: (x) => { },\n        driver: {\n            name: \"image\",\n            matchTable: [{ compatible: \"storage:image\", data: null }]\n        }\n    });\n    system.dev.registerDevice({\n        id: \"💾\",\n        name: \"image\",\n        operations: {\n            attach: async (options, system1) => {\n                let c = system.channels.mkchannel();\n                c.srv = \"💾\";\n                c.map = (0,_dirtab__WEBPACK_IMPORTED_MODULE_0__.mkdirtabA)(rootdir, system1);\n                c.type = _public_api__WEBPACK_IMPORTED_MODULE_1__.Type.DIR;\n                c.operations = {\n                    read: _dirtab__WEBPACK_IMPORTED_MODULE_0__.read,\n                    walk: _dirtab__WEBPACK_IMPORTED_MODULE_0__.walk,\n                    getstat: _dirtab__WEBPACK_IMPORTED_MODULE_0__.getstat\n                };\n                return c;\n            }\n        }\n    });\n}\nfunction cleanup() {\n}\nconst module = {\n    name: \"image\",\n    init: init,\n    cleanup: cleanup\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (module);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzL2Rldi9ib290aW1nLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9zc2ltcGlibGUvLi9zcmMvc3lzL2Rldi9ib290aW1nLnRzP2JkNDEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJU3lzdGVtTW9kdWxlfSBmcm9tIFwiLi4vbW9kdWxlc1wiO1xuaW1wb3J0IHtTeXN0ZW19IGZyb20gXCIuLi9zeXN0ZW1cIjtcbmltcG9ydCB7Z2V0c3RhdCwgSURpcnRhYiwgbWtkaXJ0YWJBLCByZWFkLCB3YWxrfSBmcm9tIFwiLi4vZGlydGFiXCI7XG5pbXBvcnQge1R5cGV9IGZyb20gXCIuLi8uLi9wdWJsaWMvYXBpXCI7XG5cbmNvbnN0IHJvb3RkaXI6IElEaXJ0YWJbXSA9IFtdXG5cbmZ1bmN0aW9uIGluaXQoc3lzdGVtOiBTeXN0ZW0pe1xuICAgIHN5c3RlbS5kZXYucmVnaXN0ZXJEcml2ZXIoe1xuICAgICAgICBwcm9iZTogYXN5bmMgKHgsIG1hdGNoKSA9PiB7XG4gICAgICAgICAgICByb290ZGlyLnB1c2goe1xuICAgICAgICAgICAgICAgIG5hbWU6IHguaWQsIGlkOjEsIHR5cGU6VHlwZS5GSUxFLCBsOjAsIG1vZGU6IDAsIHVpZDogc3lzdGVtLnN5c1VzZXIsXG4gICAgICAgICAgICAgICAgcmVhZDogYXN5bmMgKGZpbGUsIGJ1ZikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgKGF3YWl0IChhd2FpdCBmZXRjaCgoeCBhcyBhbnkpLnByb3BlcnRpZXMuaW1hZ2UpKS5ibG9iKCkpLmFycmF5QnVmZmVyKCkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZTogKHgpID0+IHt9LFxuICAgICAgICBkcml2ZXI6e1xuICAgICAgICAgICAgbmFtZTogXCJpbWFnZVwiLFxuICAgICAgICAgICAgbWF0Y2hUYWJsZTogW3tjb21wYXRpYmxlOiBcInN0b3JhZ2U6aW1hZ2VcIiwgZGF0YTogbnVsbH1dXG4gICAgICAgIH1cbiAgICB9KVxuXG4gICAgc3lzdGVtLmRldi5yZWdpc3RlckRldmljZSh7XG4gICAgICAgIGlkOiBcIvCfkr5cIixcbiAgICAgICAgbmFtZTogXCJpbWFnZVwiLFxuICAgICAgICBvcGVyYXRpb25zOiB7XG4gICAgICAgICAgICBhdHRhY2g6IGFzeW5jIChvcHRpb25zLCBzeXN0ZW0xKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGMgPSBzeXN0ZW0uY2hhbm5lbHMubWtjaGFubmVsKCk7XG4gICAgICAgICAgICAgICAgYy5zcnYgPSBcIvCfkr5cIlxuICAgICAgICAgICAgICAgIGMubWFwID0gbWtkaXJ0YWJBKHJvb3RkaXIsIHN5c3RlbTEpO1xuICAgICAgICAgICAgICAgIGMudHlwZSA9IFR5cGUuRElSXG4gICAgICAgICAgICAgICAgYy5vcGVyYXRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICByZWFkOiByZWFkLFxuICAgICAgICAgICAgICAgICAgICB3YWxrOiB3YWxrLFxuICAgICAgICAgICAgICAgICAgICBnZXRzdGF0OiBnZXRzdGF0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNsZWFudXAoKXtcblxufVxuXG5jb25zdCBtb2R1bGU6IElTeXN0ZW1Nb2R1bGUgPSB7XG4gICAgbmFtZTogXCJpbWFnZVwiLFxuICAgIGluaXQ6IGluaXQsXG4gICAgY2xlYW51cDogY2xlYW51cFxufVxuXG5leHBvcnQgZGVmYXVsdCBtb2R1bGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/sys/dev/bootimg.ts\n");

/***/ }),

/***/ "./src/sys/dev/cons.ts":
/*!*****************************!*\
  !*** ./src/sys/dev/cons.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _dirtab__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dirtab */ \"./src/sys/dirtab.ts\");\n/* harmony import */ var _public_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../public/api */ \"./src/public/api.ts\");\n\n\nfunction init(system) {\n    const rootdir = [\n        { name: \"cons\", id: 1, type: _public_api__WEBPACK_IMPORTED_MODULE_1__.Type.FILE, l: 0, mode: 0, uid: system.sysUser }\n    ];\n    system.dev.registerDevice({\n        id: \"c\",\n        name: \"cons\",\n        operations: {\n            attach: async (options, kernel) => {\n                let c = system.channels.mkchannel();\n                c.srv = \"c\";\n                c.map = (0,_dirtab__WEBPACK_IMPORTED_MODULE_0__.mkdirtabA)(rootdir, kernel);\n                c.type = _public_api__WEBPACK_IMPORTED_MODULE_1__.Type.DIR;\n                c.operations = {\n                    read: _dirtab__WEBPACK_IMPORTED_MODULE_0__.read,\n                    walk: _dirtab__WEBPACK_IMPORTED_MODULE_0__.walk,\n                    getstat: _dirtab__WEBPACK_IMPORTED_MODULE_0__.getstat\n                };\n                return c;\n            }\n        }\n    });\n}\nfunction cleanup() {\n}\nconst module = {\n    name: \"cons\",\n    init: init,\n    cleanup: cleanup\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (module);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzL2Rldi9jb25zLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Bvc3NpbXBpYmxlLy4vc3JjL3N5cy9kZXYvY29ucy50cz82NWQ3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U3lzdGVtfSBmcm9tIFwiLi4vc3lzdGVtXCI7XG5pbXBvcnQge0lTeXN0ZW1Nb2R1bGV9IGZyb20gXCIuLi9tb2R1bGVzXCI7XG5pbXBvcnQge2dldHN0YXQsIElEaXJ0YWIsIG1rZGlydGFiQSwgcmVhZCwgd2Fsa30gZnJvbSBcIi4uL2RpcnRhYlwiO1xuaW1wb3J0IHtUeXBlfSBmcm9tIFwiLi4vLi4vcHVibGljL2FwaVwiO1xuXG5mdW5jdGlvbiBpbml0KHN5c3RlbTogU3lzdGVtKSB7XG4gICAgY29uc3Qgcm9vdGRpcjogSURpcnRhYltdID0gW1xuICAgICAgICB7bmFtZTogXCJjb25zXCIsIGlkOjEsIHR5cGU6VHlwZS5GSUxFLCBsOjAsIG1vZGU6IDAsIHVpZDogc3lzdGVtLnN5c1VzZXJ9XG4gICAgXVxuXG4gICAgc3lzdGVtLmRldi5yZWdpc3RlckRldmljZSh7XG4gICAgICAgIGlkOiBcImNcIixcbiAgICAgICAgbmFtZTogXCJjb25zXCIsXG4gICAgICAgIG9wZXJhdGlvbnM6IHtcbiAgICAgICAgICAgIGF0dGFjaDogYXN5bmMgKG9wdGlvbnMsIGtlcm5lbCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBjID0gc3lzdGVtLmNoYW5uZWxzLm1rY2hhbm5lbCgpO1xuICAgICAgICAgICAgICAgIGMuc3J2ID0gXCJjXCI7XG4gICAgICAgICAgICAgICAgYy5tYXAgPSBta2RpcnRhYkEocm9vdGRpciwga2VybmVsKTtcbiAgICAgICAgICAgICAgICBjLnR5cGUgPSBUeXBlLkRJUlxuICAgICAgICAgICAgICAgIGMub3BlcmF0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmVhZDogcmVhZCxcbiAgICAgICAgICAgICAgICAgICAgd2Fsazogd2FsayxcbiAgICAgICAgICAgICAgICAgICAgZ2V0c3RhdDogZ2V0c3RhdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjbGVhbnVwKCl7XG5cbn1cblxuY29uc3QgbW9kdWxlOiBJU3lzdGVtTW9kdWxlID0ge1xuICAgIG5hbWU6IFwiY29uc1wiLFxuICAgIGluaXQ6IGluaXQsXG4gICAgY2xlYW51cDogY2xlYW51cFxufVxuZXhwb3J0IGRlZmF1bHQgbW9kdWxlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/sys/dev/cons.ts\n");

/***/ }),

/***/ "./src/sys/dev/cpu.ts":
/*!****************************!*\
  !*** ./src/sys/dev/cpu.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _dirtab__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dirtab */ \"./src/sys/dirtab.ts\");\n/* harmony import */ var _public_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../public/api */ \"./src/public/api.ts\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uuid */ \"./node_modules/uuid/dist/esm-browser/v4.js\");\n/* harmony import */ var _shared_proc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/proc */ \"./src/shared/proc.ts\");\n/* harmony import */ var _worker_img__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! &/worker.img */ \"./dist/worker.img\");\n/* harmony import */ var _aqueue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../aqueue */ \"./src/sys/aqueue.ts\");\n\n\n\n\n// @ts-ignore\n\n\nclass Process {\n    name = (0,uuid__WEBPACK_IMPORTED_MODULE_5__[\"default\"])();\n    id = 1;\n    type = _public_api__WEBPACK_IMPORTED_MODULE_1__.Type.FILE;\n    l = 0;\n    mode = 0;\n    worker;\n    aqueue = (0,_aqueue__WEBPACK_IMPORTED_MODULE_4__.mkaqueue)();\n    atime;\n    mtime;\n    muid;\n    uid;\n    constructor(system) {\n        this.muid = system.sysUser;\n        this.uid = system.sysUser;\n        this.atime = new Date().valueOf();\n        this.mtime = this.atime;\n        this.worker = new Worker(_worker_img__WEBPACK_IMPORTED_MODULE_3__, {\n            name: \"\" + this.name\n        });\n        this.worker.addEventListener(\"message\", async (ev) => {\n            console.log(this.name.substring(0, 5) + \" <\", (0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.debug)(ev.data));\n            await (0,_aqueue__WEBPACK_IMPORTED_MODULE_4__.enqueue)(this.aqueue, ev.data);\n        });\n    }\n    async read(c, count, offset) {\n        return await (0,_aqueue__WEBPACK_IMPORTED_MODULE_4__.dequeue)(c.map.aqueue);\n    }\n    async write(c, buf, offset) {\n        console.log(c.name.substring(0, 5) + \" >\", (0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.debug)(buf));\n        c.map.worker.postMessage(buf);\n    }\n    async remove(c) {\n        c.map.worker.terminate();\n    }\n}\nasync function init(system) {\n    const cpudir = [\n        { name: \"ctrl\", id: 1, type: _public_api__WEBPACK_IMPORTED_MODULE_1__.Type.FILE, l: 0, mode: 0, uid: system.sysUser,\n            read: async (c, count, offset) => {\n                const process = new Process(system);\n                cpudir.push((0,_dirtab__WEBPACK_IMPORTED_MODULE_0__.mkdirtab)(process, system));\n                return new TextEncoder().encode(process.name);\n            }\n        }\n    ];\n    const rootdir = [\n        { name: \"cpu\", id: 1, type: _public_api__WEBPACK_IMPORTED_MODULE_1__.Type.DIR, l: 0, mode: 0, uid: system.sysUser, dirtab: cpudir },\n    ];\n    system.dev.registerDevice({\n        id: \"C\",\n        name: \"cpu\",\n        operations: {\n            attach: async (options, kernel) => {\n                let c = system.channels.mkchannel();\n                c.srv = \"C\";\n                c.type = _public_api__WEBPACK_IMPORTED_MODULE_1__.Type.DIR;\n                c.map = (0,_dirtab__WEBPACK_IMPORTED_MODULE_0__.mkdirtabA)(rootdir, kernel);\n                c.operations = {\n                    walk: _dirtab__WEBPACK_IMPORTED_MODULE_0__.walk,\n                    read: _dirtab__WEBPACK_IMPORTED_MODULE_0__.read,\n                    getstat: _dirtab__WEBPACK_IMPORTED_MODULE_0__.getstat\n                };\n                return c;\n            },\n        }\n    });\n}\nfunction cleanup() {\n}\nconst module = {\n    name: \"cpu\",\n    init: init,\n    cleanup: cleanup\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (module);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzL2Rldi9jcHUudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3NzaW1waWJsZS8uL3NyYy9zeXMvZGV2L2NwdS50cz81YzIzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U3lzdGVtfSBmcm9tIFwiLi4vc3lzdGVtXCI7XG5pbXBvcnQge0lDaGFubmVsfSBmcm9tIFwiLi4vdmZzL2NoYW5uZWxcIjtcbmltcG9ydCB7SVN5c3RlbU1vZHVsZX0gZnJvbSBcIi4uL21vZHVsZXNcIjtcbmltcG9ydCB7Z2V0c3RhdCwgSURpcnRhYiwgbWtkaXJ0YWIsIG1rZGlydGFiQSwgcmVhZCwgd2Fsa30gZnJvbSBcIi4uL2RpcnRhYlwiO1xuaW1wb3J0IHtUeXBlfSBmcm9tIFwiLi4vLi4vcHVibGljL2FwaVwiO1xuaW1wb3J0IHt2NCBhcyBVVUlEIH0gZnJvbSAndXVpZCc7XG5pbXBvcnQge2RlYnVnLCBNZXNzYWdlVHlwZSwgcGVha30gZnJvbSBcIi4uLy4uL3NoYXJlZC9wcm9jXCI7XG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgd29ya2VySW1hZ2UgZnJvbSAnJi93b3JrZXIuaW1nJztcbmltcG9ydCB7ZGVxdWV1ZSwgZW5xdWV1ZSwgbWthcXVldWV9IGZyb20gXCIuLi9hcXVldWVcIjtcblxuXG5jbGFzcyBQcm9jZXNzIGltcGxlbWVudHMgSURpcnRhYntcbiAgICBuYW1lID0gVVVJRCgpO1xuICAgIGlkID0gMTtcbiAgICB0eXBlID0gVHlwZS5GSUxFO1xuICAgIGwgPSAwO1xuICAgIG1vZGUgPSAwO1xuICAgIHdvcmtlcjogV29ya2VyO1xuICAgIGFxdWV1ZSA9IG1rYXF1ZXVlPFVpbnQ4QXJyYXk+KClcbiAgICBhdGltZTogbnVtYmVyO1xuICAgIG10aW1lOiBudW1iZXI7XG4gICAgbXVpZDogc3RyaW5nO1xuICAgIHVpZDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3Ioc3lzdGVtOiBTeXN0ZW0pIHtcbiAgICAgICAgdGhpcy5tdWlkID0gc3lzdGVtLnN5c1VzZXI7XG4gICAgICAgIHRoaXMudWlkID0gc3lzdGVtLnN5c1VzZXI7XG4gICAgICAgIHRoaXMuYXRpbWUgPSBuZXcgRGF0ZSgpLnZhbHVlT2YoKTtcbiAgICAgICAgdGhpcy5tdGltZSA9IHRoaXMuYXRpbWU7XG4gICAgICAgIHRoaXMud29ya2VyID0gbmV3IFdvcmtlcih3b3JrZXJJbWFnZSwge1xuICAgICAgICAgICAgbmFtZTogXCJcIiArIHRoaXMubmFtZVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLndvcmtlci5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBhc3luYyAoZXY6IE1lc3NhZ2VFdmVudDxVaW50OEFycmF5PikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5uYW1lLnN1YnN0cmluZygwLDUpICsgXCIgPFwiLCBkZWJ1Zyhldi5kYXRhKSk7XG4gICAgICAgICAgICBhd2FpdCBlbnF1ZXVlKHRoaXMuYXF1ZXVlLCBldi5kYXRhKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgcmVhZChjOklDaGFubmVsLCBjb3VudDpudW1iZXIsIG9mZnNldDpudW1iZXIpOiBQcm9taXNlPFVpbnQ4QXJyYXk+IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IGRlcXVldWUoYy5tYXAuYXF1ZXVlKTtcbiAgICB9XG5cbiAgICBhc3luYyB3cml0ZShjOklDaGFubmVsLCBidWY6VWludDhBcnJheSwgb2Zmc2V0OiBudW1iZXIpIHtcbiAgICAgICAgY29uc29sZS5sb2coYy5uYW1lLnN1YnN0cmluZygwLDUpICsgXCIgPlwiLCBkZWJ1ZyhidWYpKTtcbiAgICAgICAgYy5tYXAud29ya2VyLnBvc3RNZXNzYWdlKGJ1Zik7XG4gICAgfVxuXG4gICAgYXN5bmMgcmVtb3ZlKGM6IElDaGFubmVsKSB7XG4gICAgICAgIGMubWFwLndvcmtlci50ZXJtaW5hdGUoKTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGluaXQoc3lzdGVtOiBTeXN0ZW0pIHtcbiAgICBjb25zdCBjcHVkaXI6IElEaXJ0YWJbXSA9IFtcbiAgICAgICAge25hbWU6IFwiY3RybFwiLCBpZDoxLCB0eXBlOlR5cGUuRklMRSwgbDowLCBtb2RlOiAwLCB1aWQ6IHN5c3RlbS5zeXNVc2VyLFxuICAgICAgICAgICAgcmVhZDogYXN5bmMgKGMsIGNvdW50LCBvZmZzZXQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9jZXNzID0gbmV3IFByb2Nlc3Moc3lzdGVtKTtcblxuICAgICAgICAgICAgICAgIGNwdWRpci5wdXNoKG1rZGlydGFiKHByb2Nlc3MsIHN5c3RlbSkpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShwcm9jZXNzLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXTtcblxuICAgIGNvbnN0IHJvb3RkaXI6IElEaXJ0YWJbXSA9IFtcbiAgICAgICAge25hbWU6IFwiY3B1XCIsIGlkOjEsIHR5cGU6VHlwZS5ESVIsIGw6MCwgbW9kZTogMCwgdWlkOnN5c3RlbS5zeXNVc2VyLCBkaXJ0YWI6Y3B1ZGlyfSxcbiAgICBdXG5cbiAgICBzeXN0ZW0uZGV2LnJlZ2lzdGVyRGV2aWNlKHtcbiAgICAgICAgaWQ6IFwiQ1wiLFxuICAgICAgICBuYW1lOiBcImNwdVwiLFxuICAgICAgICBvcGVyYXRpb25zOiB7XG4gICAgICAgICAgICBhdHRhY2g6IGFzeW5jIChvcHRpb25zLCBrZXJuZWwpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgYyA9IHN5c3RlbS5jaGFubmVscy5ta2NoYW5uZWwoKVxuICAgICAgICAgICAgICAgIGMuc3J2ID0gXCJDXCI7XG4gICAgICAgICAgICAgICAgYy50eXBlID0gVHlwZS5ESVI7XG4gICAgICAgICAgICAgICAgYy5tYXAgPSBta2RpcnRhYkEocm9vdGRpciwga2VybmVsKTtcbiAgICAgICAgICAgICAgICBjLm9wZXJhdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHdhbGs6IHdhbGssXG4gICAgICAgICAgICAgICAgICAgIHJlYWQ6IHJlYWQsXG4gICAgICAgICAgICAgICAgICAgIGdldHN0YXQ6IGdldHN0YXRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNsZWFudXAoKXtcblxufVxuXG5jb25zdCBtb2R1bGU6IElTeXN0ZW1Nb2R1bGUgPSB7XG4gICAgbmFtZTogXCJjcHVcIixcbiAgICBpbml0OiBpbml0LFxuICAgIGNsZWFudXA6IGNsZWFudXBcbn1cbmV4cG9ydCBkZWZhdWx0IG1vZHVsZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/sys/dev/cpu.ts\n");

/***/ }),

/***/ "./src/sys/dev/dev.ts":
/*!****************************!*\
  !*** ./src/sys/dev/dev.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DeviceManager\": () => (/* binding */ DeviceManager)\n/* harmony export */ });\nclass DeviceManager {\n    devices = {};\n    system;\n    matchTable = new Map();\n    deviceDrivers = [];\n    constructor(system) {\n        this.system = system;\n    }\n    registerDevice(device) {\n        this.devices[device.id] = device;\n    }\n    getDevice(id) {\n        return this.devices[id];\n    }\n    registerDriver(driver) {\n        this.deviceDrivers.push(driver);\n        for (const match of driver.driver.matchTable) {\n            this.matchTable.set(match.compatible, async (x) => {\n                await driver.probe(x, match);\n            });\n        }\n    }\n    async init() {\n        for (const dd of this.system.descriptions) {\n            for (const s of dd.properties.compatibility) {\n                if (this.matchTable.has(s)) {\n                    await this.matchTable.get(s)(dd);\n                }\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzL2Rldi9kZXYudHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQW9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9zc2ltcGlibGUvLi9zcmMvc3lzL2Rldi9kZXYudHM/Yzk4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7SURldmljZURlc2NyaXB0aW9ufSBmcm9tIFwiLi4vLi4vdm0vZGV2aWNldHJlZVwiO1xuaW1wb3J0IHtTeXN0ZW19IGZyb20gXCIuLi9zeXN0ZW1cIjtcbmltcG9ydCB7SURldmljZX0gZnJvbSBcIi4uL3Zmcy9kZXZpY2VcIjtcbmltcG9ydCB7UEVycm9yLCBTdGF0dXN9IGZyb20gXCIuLi8uLi9wdWJsaWMvYXBpXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRHJpdmVyTWF0Y2h7XG4gICAgY29tcGF0aWJsZTogc3RyaW5nLFxuICAgIGRhdGE6IGFueVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIERyaXZlciB7XG4gICAgcHJvYmU6ICh4OiBJRGV2aWNlRGVzY3JpcHRpb24sIG1hdGNoOkRyaXZlck1hdGNoKSA9PiB2b2lkXG4gICAgcmVtb3ZlOiAoeDogSURldmljZURlc2NyaXB0aW9uICApID0+IHZvaWRcbiAgICBkcml2ZXI6IHtcbiAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICBtYXRjaFRhYmxlOiBEcml2ZXJNYXRjaFtdXG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGV2aWNlTWFuYWdlcntcbiAgICBkZXZpY2VzOiBSZWNvcmQ8c3RyaW5nLCBJRGV2aWNlPiA9IHt9O1xuICAgIHByaXZhdGUgc3lzdGVtOiBTeXN0ZW07XG4gICAgcHJpdmF0ZSBtYXRjaFRhYmxlID0gbmV3IE1hcDxzdHJpbmcsICh4OklEZXZpY2VEZXNjcmlwdGlvbikgPT4gdm9pZD4oKTtcbiAgICBwcml2YXRlIGRldmljZURyaXZlcnM6IERyaXZlcltdID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcihzeXN0ZW06IFN5c3RlbSkge1xuICAgICAgICB0aGlzLnN5c3RlbSA9IHN5c3RlbTtcbiAgICB9XG5cblxuICAgIHJlZ2lzdGVyRGV2aWNlKGRldmljZTogSURldmljZSl7XG4gICAgICAgIHRoaXMuZGV2aWNlc1tkZXZpY2UuaWRdID0gZGV2aWNlO1xuICAgIH1cblxuICAgIGdldERldmljZShpZDogc3RyaW5nKTogSURldmljZXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGV2aWNlc1tpZF07XG4gICAgfVxuXG4gICAgcmVnaXN0ZXJEcml2ZXIoZHJpdmVyOiBEcml2ZXIpe1xuICAgICAgICB0aGlzLmRldmljZURyaXZlcnMucHVzaChkcml2ZXIpO1xuICAgICAgICBmb3IgKGNvbnN0IG1hdGNoIG9mIGRyaXZlci5kcml2ZXIubWF0Y2hUYWJsZSkge1xuICAgICAgICAgICAgdGhpcy5tYXRjaFRhYmxlLnNldChtYXRjaC5jb21wYXRpYmxlLCBhc3luYyAoeDogSURldmljZURlc2NyaXB0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgYXdhaXQgZHJpdmVyLnByb2JlKHgsIG1hdGNoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgaW5pdCgpIHtcbiAgICAgICAgZm9yIChjb25zdCBkZCBvZiB0aGlzLnN5c3RlbS5kZXNjcmlwdGlvbnMhKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2YgZGQucHJvcGVydGllcy5jb21wYXRpYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2hUYWJsZS5oYXMocykpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5tYXRjaFRhYmxlLmdldChzKSEoZGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/sys/dev/dev.ts\n");

/***/ }),

/***/ "./src/sys/dev/env.ts":
/*!****************************!*\
  !*** ./src/sys/dev/env.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _dirtab__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dirtab */ \"./src/sys/dirtab.ts\");\n/* harmony import */ var _public_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../public/api */ \"./src/public/api.ts\");\n\n\nfunction gendirtab(system) {\n    const task = system.current;\n    const result = [];\n    for (const key of task?.env.keys()) {\n        const f = { name: key, id: 1, type: _public_api__WEBPACK_IMPORTED_MODULE_1__.Type.FILE, l: 0, mode: 0, uid: task.uid,\n            read: async (c, count, offset) => {\n                const task = system.current;\n                return new TextEncoder().encode(task?.env.get(c.name));\n            }\n        };\n        result.push((0,_dirtab__WEBPACK_IMPORTED_MODULE_0__.mkdirtab)(f, system));\n    }\n    return result;\n}\nasync function init(system) {\n    system.dev.registerDevice({\n        id: \"e\",\n        name: \"env\",\n        operations: {\n            attach: async (options, kernel) => {\n                let c = system.channels.mkchannel();\n                c.srv = \"e\";\n                c.type = _public_api__WEBPACK_IMPORTED_MODULE_1__.Type.DIR;\n                c.map = (0,_dirtab__WEBPACK_IMPORTED_MODULE_0__.mkdirtabA)(() => gendirtab(system), kernel);\n                c.operations = {\n                    walk: _dirtab__WEBPACK_IMPORTED_MODULE_0__.walk,\n                    read: _dirtab__WEBPACK_IMPORTED_MODULE_0__.read,\n                    getstat: _dirtab__WEBPACK_IMPORTED_MODULE_0__.getstat\n                };\n                return c;\n            },\n        }\n    });\n}\nfunction cleanup() {\n}\nconst module = {\n    name: \"rootfs\",\n    init: init,\n    cleanup: cleanup\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (module);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzL2Rldi9lbnYudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Bvc3NpbXBpYmxlLy4vc3JjL3N5cy9kZXYvZW52LnRzPzVmMjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTeXN0ZW19IGZyb20gXCIuLi9zeXN0ZW1cIjtcbmltcG9ydCB7SVN5c3RlbU1vZHVsZX0gZnJvbSBcIi4uL21vZHVsZXNcIjtcbmltcG9ydCB7Z2V0c3RhdCwgSURpcnRhYiwgbWtkaXJ0YWIsIG1rZGlydGFiQSwgcmVhZCwgd2Fsa30gZnJvbSBcIi4uL2RpcnRhYlwiO1xuaW1wb3J0IHtUeXBlfSBmcm9tIFwiLi4vLi4vcHVibGljL2FwaVwiO1xuXG5cbmZ1bmN0aW9uIGdlbmRpcnRhYihzeXN0ZW06IFN5c3RlbSl7XG4gICAgY29uc3QgdGFzayA9IHN5c3RlbS5jdXJyZW50ITtcbiAgICBjb25zdCByZXN1bHQ6SURpcnRhYltdID0gW11cbiAgICBmb3IoY29uc3Qga2V5IG9mIHRhc2s/LmVudiEua2V5cygpISl7XG4gICAgICAgIGNvbnN0IGY6IElEaXJ0YWIgPSB7bmFtZToga2V5LCBpZDoxLCB0eXBlOlR5cGUuRklMRSwgbDowLCBtb2RlOiAwLCB1aWQ6dGFzay51aWQsXG4gICAgICAgICAgICByZWFkOmFzeW5jIChjLCBjb3VudCwgb2Zmc2V0KTogUHJvbWlzZTxVaW50OEFycmF5PiA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFzayA9ICBzeXN0ZW0uY3VycmVudDtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHRhc2s/LmVudi5nZXQoYy5uYW1lKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJlc3VsdC5wdXNoKG1rZGlydGFiKGYsIHN5c3RlbSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5hc3luYyBmdW5jdGlvbiBpbml0KHN5c3RlbTogU3lzdGVtKSB7XG4gICAgc3lzdGVtLmRldi5yZWdpc3RlckRldmljZSh7XG4gICAgICAgIGlkOiBcImVcIixcbiAgICAgICAgbmFtZTogXCJlbnZcIixcbiAgICAgICAgb3BlcmF0aW9uczoge1xuICAgICAgICAgICAgYXR0YWNoOiBhc3luYyAob3B0aW9ucywga2VybmVsKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGMgPSBzeXN0ZW0uY2hhbm5lbHMubWtjaGFubmVsKClcbiAgICAgICAgICAgICAgICBjLnNydiA9IFwiZVwiO1xuICAgICAgICAgICAgICAgIGMudHlwZSA9IFR5cGUuRElSO1xuICAgICAgICAgICAgICAgIGMubWFwID0gbWtkaXJ0YWJBKCgpID0+IGdlbmRpcnRhYihzeXN0ZW0pLCBrZXJuZWwpO1xuICAgICAgICAgICAgICAgIGMub3BlcmF0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgd2Fsazogd2FsayxcbiAgICAgICAgICAgICAgICAgICAgcmVhZDogcmVhZCxcbiAgICAgICAgICAgICAgICAgICAgZ2V0c3RhdDogZ2V0c3RhdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gY2xlYW51cCgpe1xuXG59XG5cbmNvbnN0IG1vZHVsZTogSVN5c3RlbU1vZHVsZSA9IHtcbiAgICBuYW1lOiBcInJvb3Rmc1wiLFxuICAgIGluaXQ6IGluaXQsXG4gICAgY2xlYW51cDogY2xlYW51cFxufVxuZXhwb3J0IGRlZmF1bHQgbW9kdWxlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/sys/dev/env.ts\n");

/***/ }),

/***/ "./src/sys/dev/kbd.ts":
/*!****************************!*\
  !*** ./src/sys/dev/kbd.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _dirtab__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dirtab */ \"./src/sys/dirtab.ts\");\n/* harmony import */ var _public_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../public/api */ \"./src/public/api.ts\");\n\n\nfunction init(system) {\n    const rootdir = [\n        { name: \"scancode\", id: 1, type: _public_api__WEBPACK_IMPORTED_MODULE_1__.Type.FILE, l: 0, mode: 0, uid: system.sysUser }\n    ];\n    system.dev.registerDevice({\n        id: \"b\",\n        name: \"kbd\",\n        operations: {\n            attach: async (options, kernel) => {\n                let c = system.channels.mkchannel();\n                c.srv = \"b\";\n                c.map = (0,_dirtab__WEBPACK_IMPORTED_MODULE_0__.mkdirtabA)(rootdir, kernel);\n                c.type = _public_api__WEBPACK_IMPORTED_MODULE_1__.Type.DIR;\n                c.operations = {\n                    read: _dirtab__WEBPACK_IMPORTED_MODULE_0__.read,\n                    walk: _dirtab__WEBPACK_IMPORTED_MODULE_0__.walk,\n                    getstat: _dirtab__WEBPACK_IMPORTED_MODULE_0__.getstat\n                };\n                return c;\n            }\n        }\n    });\n}\nfunction cleanup() {\n}\nconst module = {\n    name: \"cons\",\n    init: init,\n    cleanup: cleanup\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (module);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzL2Rldi9rYmQudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9zc2ltcGlibGUvLi9zcmMvc3lzL2Rldi9rYmQudHM/NjEzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1N5c3RlbX0gZnJvbSBcIi4uL3N5c3RlbVwiO1xuaW1wb3J0IHtJU3lzdGVtTW9kdWxlfSBmcm9tIFwiLi4vbW9kdWxlc1wiO1xuaW1wb3J0IHtnZXRzdGF0LCBJRGlydGFiLCBta2RpcnRhYkEsIHJlYWQsIHdhbGt9IGZyb20gXCIuLi9kaXJ0YWJcIjtcbmltcG9ydCB7VHlwZX0gZnJvbSBcIi4uLy4uL3B1YmxpYy9hcGlcIjtcblxuZnVuY3Rpb24gaW5pdChzeXN0ZW06IFN5c3RlbSkge1xuICAgIGNvbnN0IHJvb3RkaXI6IElEaXJ0YWJbXSA9IFtcbiAgICAgICAge25hbWU6IFwic2NhbmNvZGVcIiwgaWQ6MSwgdHlwZTpUeXBlLkZJTEUsIGw6MCwgbW9kZTogMCwgdWlkOiBzeXN0ZW0uc3lzVXNlcn1cbiAgICBdXG5cbiAgICBzeXN0ZW0uZGV2LnJlZ2lzdGVyRGV2aWNlKHtcbiAgICAgICAgaWQ6IFwiYlwiLFxuICAgICAgICBuYW1lOiBcImtiZFwiLFxuICAgICAgICBvcGVyYXRpb25zOiB7XG4gICAgICAgICAgICBhdHRhY2g6IGFzeW5jIChvcHRpb25zLCBrZXJuZWwpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgYyA9IHN5c3RlbS5jaGFubmVscy5ta2NoYW5uZWwoKVxuICAgICAgICAgICAgICAgIGMuc3J2ID0gXCJiXCI7XG4gICAgICAgICAgICAgICAgYy5tYXAgPSBta2RpcnRhYkEocm9vdGRpciwga2VybmVsKTtcbiAgICAgICAgICAgICAgICBjLnR5cGUgPSBUeXBlLkRJUlxuICAgICAgICAgICAgICAgIGMub3BlcmF0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmVhZDogcmVhZCxcbiAgICAgICAgICAgICAgICAgICAgd2Fsazogd2FsayxcbiAgICAgICAgICAgICAgICAgICAgZ2V0c3RhdDogZ2V0c3RhdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjbGVhbnVwKCl7XG5cbn1cblxuY29uc3QgbW9kdWxlOiBJU3lzdGVtTW9kdWxlID0ge1xuICAgIG5hbWU6IFwiY29uc1wiLFxuICAgIGluaXQ6IGluaXQsXG4gICAgY2xlYW51cDogY2xlYW51cFxufVxuZXhwb3J0IGRlZmF1bHQgbW9kdWxlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/sys/dev/kbd.ts\n");

/***/ }),

/***/ "./src/sys/dev/mount.ts":
/*!******************************!*\
  !*** ./src/sys/dev/mount.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _public_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../public/api */ \"./src/public/api.ts\");\n/* harmony import */ var _public_9p__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../public/9p */ \"./src/public/9p.ts\");\n\n\nclass MountClient {\n    tag;\n    fid;\n    srv;\n    aname;\n    constructor(fd, aname) {\n        this.srv = fd;\n        this.tag = 0;\n        this.fid = 1;\n        this.aname = aname;\n    }\n    async mountrpc(args, pack, unpack) {\n        const tag = this.tag++;\n        args[0] = tag;\n        await this.srv.operations.write?.(this.srv, pack(...args), 0);\n        const buf = await this.srv.operations.read?.(this.srv, -1, 0);\n        const [type, t] = (0,_public_9p__WEBPACK_IMPORTED_MODULE_1__.peak9p)(buf);\n        if (type != _public_9p__WEBPACK_IMPORTED_MODULE_1__.Protocol9P.Rerror) {\n            if (t == tag) {\n                return unpack(buf);\n            }\n            throw new _public_api__WEBPACK_IMPORTED_MODULE_0__.PError(_public_api__WEBPACK_IMPORTED_MODULE_0__.Status.ENOENT);\n        }\n        else if (type == _public_9p__WEBPACK_IMPORTED_MODULE_1__.Protocol9P.Rerror) {\n            const c = (0,_public_9p__WEBPACK_IMPORTED_MODULE_1__.MURerror)(buf);\n            throw new _public_api__WEBPACK_IMPORTED_MODULE_0__.PError(_public_api__WEBPACK_IMPORTED_MODULE_0__.Status.ENOENT);\n        }\n        else {\n            throw new _public_api__WEBPACK_IMPORTED_MODULE_0__.PError(_public_api__WEBPACK_IMPORTED_MODULE_0__.Status.ENOENT);\n        }\n    }\n    async attach() {\n        const result = await this.mountrpc([0, 0, \"\", this.aname], _public_9p__WEBPACK_IMPORTED_MODULE_1__.MPTattach, _public_9p__WEBPACK_IMPORTED_MODULE_1__.MURattach);\n        return {\n            client: this,\n            fid: 0,\n            type: result[2]\n        };\n    }\n    async open(node, mode) {\n        await this.mountrpc([0, node.fid, mode], _public_9p__WEBPACK_IMPORTED_MODULE_1__.MPTopen, _public_9p__WEBPACK_IMPORTED_MODULE_1__.MURopen);\n        return node;\n    }\n    async read(node, offset, count) {\n        const result = await this.mountrpc([0, node.fid, offset, count], _public_9p__WEBPACK_IMPORTED_MODULE_1__.MPTread, _public_9p__WEBPACK_IMPORTED_MODULE_1__.MURread);\n        return result[2];\n    }\n    async write(node, offset, buf) {\n        const result = await this.mountrpc([0, node.fid, offset, buf], _public_9p__WEBPACK_IMPORTED_MODULE_1__.MPTwrite, _public_9p__WEBPACK_IMPORTED_MODULE_1__.MURwrite);\n        return result[2];\n    }\n    async walk(node, wname) {\n        const fid = this.fid++;\n        const result = await this.mountrpc([0, node.fid, fid, wname], _public_9p__WEBPACK_IMPORTED_MODULE_1__.MPTwalk, _public_9p__WEBPACK_IMPORTED_MODULE_1__.MURwalk);\n        return {\n            client: this,\n            fid: fid,\n            type: result[2].pop(),\n        };\n    }\n    async stat(node) {\n        const result = await this.mountrpc([0, node.fid], _public_9p__WEBPACK_IMPORTED_MODULE_1__.MPTstat, _public_9p__WEBPACK_IMPORTED_MODULE_1__.MURstat);\n        return result[2];\n    }\n}\nasync function mountread(c, count, offset) {\n    const node = c.map;\n    const buf = await node.client.read(node, offset, count);\n    return buf;\n}\nasync function mountwrite(c, buf, offset) {\n    const node = c.map;\n    return await node.client.write(node, offset, buf);\n}\nasync function mountopen(c, mode) {\n    const node = c.map;\n    await node.client.open(node, mode);\n    return c;\n}\nasync function mountstat(c) {\n    const node = c.map;\n    return await node.client.stat(node);\n}\nasync function mountwalk(dir, c1, name) {\n    const node = dir.map;\n    const newnode = await node.client.walk(node, [name]);\n    c1.map = newnode;\n    c1.parent = dir;\n    c1.name = name;\n    c1.type = newnode.type;\n    if (c1.type == _public_api__WEBPACK_IMPORTED_MODULE_0__.Type.DIR) {\n        c1.operations = {\n            walk: mountwalk,\n            open: mountopen,\n            read: mountread,\n            getstat: mountstat\n        };\n    }\n    else {\n        c1.operations = {\n            read: mountread,\n            open: mountopen,\n            write: mountwrite,\n            getstat: mountstat\n        };\n    }\n}\nconst mounts = [];\nasync function init(system) {\n    system.dev.registerDevice({\n        id: \"M\",\n        name: \"mount\",\n        operations: {\n            attach: async (options, kernel) => {\n                const struct = options;\n                let c = system.channels.mkchannel();\n                c.srv = \"M\";\n                const client = new MountClient(struct.fd, struct.aname);\n                c.subsrv = mounts.push(client);\n                const node = await client.attach();\n                c.map = node;\n                c.type = node.type;\n                c.parent = null;\n                c.operations = {\n                    walk: mountwalk,\n                    open: mountopen,\n                    read: mountread,\n                    getstat: mountstat\n                };\n                return c;\n            },\n        }\n    });\n}\nfunction cleanup() {\n}\nconst module = {\n    name: \"rootfs\",\n    init: init,\n    cleanup: cleanup\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (module);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzL2Rldi9tb3VudC50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFHQTtBQUNBO0FBb0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9zc2ltcGlibGUvLi9zcmMvc3lzL2Rldi9tb3VudC50cz9lNjRhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U3lzdGVtfSBmcm9tIFwiLi4vc3lzdGVtXCI7XG5pbXBvcnQge0lDaGFubmVsfSBmcm9tIFwiLi4vdmZzL2NoYW5uZWxcIjtcbmltcG9ydCB7SVN5c3RlbU1vZHVsZX0gZnJvbSBcIi4uL21vZHVsZXNcIjtcbmltcG9ydCB7SVN0YXQsIE9wZW5Nb2RlLCBQRXJyb3IsIFN0YXR1cywgVHlwZX0gZnJvbSBcIi4uLy4uL3B1YmxpYy9hcGlcIjtcbmltcG9ydCB7XG4gICAgTVBUYXR0YWNoLFxuICAgIE1QVG9wZW4sXG4gICAgTVBUcmVhZCwgTVBUc3RhdCxcbiAgICBNUFR3YWxrLCBNUFR3cml0ZSxcbiAgICBNVVJhdHRhY2gsXG4gICAgTVVSZXJyb3IsXG4gICAgTVVSb3BlbixcbiAgICBNVVJyZWFkLCBNVVJzdGF0LFxuICAgIE1VUndhbGssIE1VUndyaXRlLFxuICAgIHBlYWs5cCxcbiAgICBQcm90b2NvbDlQXG59IGZyb20gXCIuLi8uLi9wdWJsaWMvOXBcIjtcblxuaW50ZXJmYWNlIE1vdW50UlBDTm9kZXtcbiAgICBjbGllbnQ6IE1vdW50Q2xpZW50LFxuICAgIGZpZDogbnVtYmVyXG4gICAgdHlwZTogVHlwZVxufVxuXG5jbGFzcyBNb3VudENsaWVudHtcbiAgICBwcml2YXRlIHRhZzogbnVtYmVyO1xuICAgIHByaXZhdGUgZmlkOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBzcnY6IElDaGFubmVsO1xuICAgIHByaXZhdGUgYW5hbWU6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGZkLCBhbmFtZSkge1xuICAgICAgICB0aGlzLnNydiA9IGZkO1xuICAgICAgICB0aGlzLnRhZyA9IDA7XG4gICAgICAgIHRoaXMuZmlkID0gMTtcbiAgICAgICAgdGhpcy5hbmFtZSA9IGFuYW1lO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgbW91bnRycGM8VCBleHRlbmRzICguLi5hcmdzKSA9PiBVaW50OEFycmF5LFIgZXh0ZW5kcyAobTogVWludDhBcnJheSkgPT4gYW55PihhcmdzOiBQYXJhbWV0ZXJzPHR5cGVvZiBwYWNrPiwgcGFjazpULCB1bnBhY2s6Uik6IFByb21pc2U8UmV0dXJuVHlwZTxSPj57XG4gICAgICAgIGNvbnN0IHRhZyA9IHRoaXMudGFnKys7XG4gICAgICAgIGFyZ3NbMF0gPSB0YWdcbiAgICAgICAgYXdhaXQgdGhpcy5zcnYub3BlcmF0aW9ucy53cml0ZT8uKHRoaXMuc3J2LCBwYWNrKC4uLmFyZ3MpLCAwKVxuICAgICAgICBjb25zdCBidWYgPSBhd2FpdCB0aGlzLnNydi5vcGVyYXRpb25zLnJlYWQ/Lih0aGlzLnNydiwgLTEsIDApITtcbiAgICAgICAgY29uc3QgW3R5cGUsIHRdID0gcGVhazlwKGJ1Zik7XG4gICAgICAgIGlmKHR5cGUgIT0gUHJvdG9jb2w5UC5SZXJyb3Ipe1xuICAgICAgICAgICAgaWYodCA9PSB0YWcpe1xuICAgICAgICAgICAgICAgIHJldHVybiB1bnBhY2soYnVmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBQRXJyb3IoU3RhdHVzLkVOT0VOVCk7XG4gICAgICAgIH1lbHNlIGlmKHR5cGUgPT0gUHJvdG9jb2w5UC5SZXJyb3Ipe1xuICAgICAgICAgICAgY29uc3QgYyA9IE1VUmVycm9yKGJ1Zik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUEVycm9yKFN0YXR1cy5FTk9FTlQpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHRocm93IG5ldyBQRXJyb3IoU3RhdHVzLkVOT0VOVCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBhdHRhY2goKTogUHJvbWlzZTxNb3VudFJQQ05vZGU+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5tb3VudHJwYyhbMCwgMCwgXCJcIiwgdGhpcy5hbmFtZV0sIE1QVGF0dGFjaCwgTVVSYXR0YWNoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNsaWVudDogdGhpcyxcbiAgICAgICAgICAgIGZpZCA6IDAsXG4gICAgICAgICAgICB0eXBlOiByZXN1bHRbMl1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhc3luYyBvcGVuKG5vZGU6IE1vdW50UlBDTm9kZSwgbW9kZTogT3Blbk1vZGUpOiBQcm9taXNlPE1vdW50UlBDTm9kZT57XG4gICAgICAgIGF3YWl0IHRoaXMubW91bnRycGMoWzAsIG5vZGUuZmlkLCBtb2RlXSwgTVBUb3BlbiwgTVVSb3Blbik7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIGFzeW5jIHJlYWQobm9kZTogTW91bnRSUENOb2RlLCBvZmZzZXQ6IG51bWJlciwgY291bnQ6IG51bWJlcik6IFByb21pc2U8VWludDhBcnJheT57XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMubW91bnRycGMoWzAsIG5vZGUuZmlkLCBvZmZzZXQsIGNvdW50XSwgTVBUcmVhZCwgTVVScmVhZCk7XG4gICAgICAgIHJldHVybiByZXN1bHRbMl07XG4gICAgfVxuXG4gICAgYXN5bmMgd3JpdGUobm9kZTogTW91bnRSUENOb2RlLCBvZmZzZXQ6IG51bWJlciwgYnVmOiBVaW50OEFycmF5KTogUHJvbWlzZTxudW1iZXI+e1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLm1vdW50cnBjKFswLCBub2RlLmZpZCwgb2Zmc2V0LCBidWZdLCBNUFR3cml0ZSwgTVVSd3JpdGUpO1xuICAgICAgICByZXR1cm4gcmVzdWx0WzJdO1xuICAgIH1cblxuICAgIGFzeW5jIHdhbGsobm9kZTogTW91bnRSUENOb2RlLCB3bmFtZTogc3RyaW5nW10pOiBQcm9taXNlPE1vdW50UlBDTm9kZT57XG4gICAgICAgIGNvbnN0IGZpZCA9IHRoaXMuZmlkKys7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMubW91bnRycGMoWzAsIG5vZGUuZmlkLCBmaWQsIHduYW1lXSwgTVBUd2FsaywgTVVSd2Fsayk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjbGllbnQ6IHRoaXMsXG4gICAgICAgICAgICBmaWQ6IGZpZCxcbiAgICAgICAgICAgIHR5cGU6IHJlc3VsdFsyXS5wb3AoKSEsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYXN5bmMgc3RhdChub2RlOiBNb3VudFJQQ05vZGUpOiBQcm9taXNlPElTdGF0PntcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5tb3VudHJwYyhbMCwgbm9kZS5maWRdLE1QVHN0YXQsIE1VUnN0YXQpXG4gICAgICAgIHJldHVybiByZXN1bHRbMl07XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBtb3VudHJlYWQoYzogSUNoYW5uZWwsIGNvdW50OiBudW1iZXIsIG9mZnNldDogbnVtYmVyKTogUHJvbWlzZTxVaW50OEFycmF5PiB7XG4gICAgY29uc3Qgbm9kZSA9IGMubWFwIGFzIE1vdW50UlBDTm9kZTtcbiAgICBjb25zdCBidWYgPSBhd2FpdCBub2RlLmNsaWVudC5yZWFkKG5vZGUsIG9mZnNldCwgY291bnQpO1xuICAgIHJldHVybiBidWY7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIG1vdW50d3JpdGUoYzogSUNoYW5uZWwsIGJ1ZjogVWludDhBcnJheSwgb2Zmc2V0OiBudW1iZXIpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIGNvbnN0IG5vZGUgPSBjLm1hcCBhcyBNb3VudFJQQ05vZGU7XG4gICAgcmV0dXJuIGF3YWl0IG5vZGUuY2xpZW50LndyaXRlKG5vZGUsIG9mZnNldCwgYnVmKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbW91bnRvcGVuKGM6IElDaGFubmVsLCBtb2RlOiBPcGVuTW9kZSkgOiBQcm9taXNlPElDaGFubmVsPiB7XG4gICAgY29uc3Qgbm9kZSA9IGMubWFwIGFzIE1vdW50UlBDTm9kZTtcbiAgICBhd2FpdCBub2RlLmNsaWVudC5vcGVuKG5vZGUsIG1vZGUpO1xuICAgIHJldHVybiBjO1xufVxuXG5hc3luYyBmdW5jdGlvbiBtb3VudHN0YXQoYzogSUNoYW5uZWwpIDogUHJvbWlzZTxJU3RhdD4ge1xuICAgIGNvbnN0IG5vZGUgPSBjLm1hcCBhcyBNb3VudFJQQ05vZGU7XG4gICAgcmV0dXJuIGF3YWl0IG5vZGUuY2xpZW50LnN0YXQobm9kZSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIG1vdW50d2FsayhkaXI6IElDaGFubmVsLCBjMTogSUNoYW5uZWwsIG5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IG5vZGUgPSBkaXIubWFwIGFzIE1vdW50UlBDTm9kZVxuICAgIGNvbnN0IG5ld25vZGUgPSBhd2FpdCBub2RlLmNsaWVudC53YWxrKG5vZGUsIFtuYW1lXSk7XG4gICAgYzEubWFwID0gbmV3bm9kZVxuICAgIGMxLnBhcmVudCA9IGRpcjtcbiAgICBjMS5uYW1lID0gbmFtZTtcbiAgICBjMS50eXBlID0gbmV3bm9kZS50eXBlO1xuICAgIGlmKGMxLnR5cGUgPT0gVHlwZS5ESVIpe1xuICAgICAgICBjMS5vcGVyYXRpb25zID0ge1xuICAgICAgICAgICAgd2FsazogbW91bnR3YWxrLFxuICAgICAgICAgICAgb3BlbjogbW91bnRvcGVuLFxuICAgICAgICAgICAgcmVhZDogbW91bnRyZWFkLFxuICAgICAgICAgICAgZ2V0c3RhdDogbW91bnRzdGF0XG4gICAgICAgIH1cbiAgICB9ZWxzZXtcbiAgICAgICAgYzEub3BlcmF0aW9ucyA9IHtcbiAgICAgICAgICAgIHJlYWQ6IG1vdW50cmVhZCxcbiAgICAgICAgICAgIG9wZW46IG1vdW50b3BlbixcbiAgICAgICAgICAgIHdyaXRlOiBtb3VudHdyaXRlLFxuICAgICAgICAgICAgZ2V0c3RhdDogbW91bnRzdGF0XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNvbnN0IG1vdW50czogTW91bnRDbGllbnRbXSA9IFtdXG5cbmFzeW5jIGZ1bmN0aW9uIGluaXQoc3lzdGVtOiBTeXN0ZW0pIHtcbiAgICBzeXN0ZW0uZGV2LnJlZ2lzdGVyRGV2aWNlKHtcbiAgICAgICAgaWQ6IFwiTVwiLFxuICAgICAgICBuYW1lOiBcIm1vdW50XCIsXG4gICAgICAgIG9wZXJhdGlvbnM6IHtcbiAgICAgICAgICAgIGF0dGFjaDogYXN5bmMgKG9wdGlvbnMsIGtlcm5lbCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0cnVjdCA9IG9wdGlvbnMgYXMgeyBmZDogSUNoYW5uZWwsIGFmZDogSUNoYW5uZWwsIGFuYW1lOnN0cmluZyB9XG4gICAgICAgICAgICAgICAgbGV0IGMgPSBzeXN0ZW0uY2hhbm5lbHMubWtjaGFubmVsKCk7XG4gICAgICAgICAgICAgICAgYy5zcnYgPSBcIk1cIjtcbiAgICAgICAgICAgICAgICBjb25zdCBjbGllbnQgPSBuZXcgTW91bnRDbGllbnQoc3RydWN0LmZkLCBzdHJ1Y3QuYW5hbWUpO1xuICAgICAgICAgICAgICAgIGMuc3Vic3J2ID0gbW91bnRzLnB1c2goY2xpZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gYXdhaXQgY2xpZW50LmF0dGFjaCgpO1xuICAgICAgICAgICAgICAgIGMubWFwID0gbm9kZVxuICAgICAgICAgICAgICAgIGMudHlwZSA9IG5vZGUudHlwZTtcbiAgICAgICAgICAgICAgICBjLnBhcmVudCA9IG51bGw7XG4gICAgICAgICAgICAgICAgYy5vcGVyYXRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICB3YWxrOiBtb3VudHdhbGssXG4gICAgICAgICAgICAgICAgICAgIG9wZW46IG1vdW50b3BlbixcbiAgICAgICAgICAgICAgICAgICAgcmVhZDogbW91bnRyZWFkLFxuICAgICAgICAgICAgICAgICAgICBnZXRzdGF0OiBtb3VudHN0YXRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNsZWFudXAoKXtcblxufVxuXG5jb25zdCBtb2R1bGU6IElTeXN0ZW1Nb2R1bGUgPSB7XG4gICAgbmFtZTogXCJyb290ZnNcIixcbiAgICBpbml0OiBpbml0LFxuICAgIGNsZWFudXA6IGNsZWFudXBcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1vZHVsZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/sys/dev/mount.ts\n");

/***/ }),

/***/ "./src/sys/dev/pipe.ts":
/*!*****************************!*\
  !*** ./src/sys/dev/pipe.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _dirtab__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dirtab */ \"./src/sys/dirtab.ts\");\n/* harmony import */ var _aqueue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../aqueue */ \"./src/sys/aqueue.ts\");\n/* harmony import */ var _public_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../public/api */ \"./src/public/api.ts\");\n\n\n\nasync function init(system) {\n    system.dev.registerDevice({\n        id: \"|\",\n        name: \"pipe\",\n        operations: {\n            attach: async (options, kernel) => {\n                const queue1 = (0,_aqueue__WEBPACK_IMPORTED_MODULE_1__.mkaqueue)();\n                const queue2 = (0,_aqueue__WEBPACK_IMPORTED_MODULE_1__.mkaqueue)();\n                const rootdir = [\n                    { name: \"data\", id: 1, type: _public_api__WEBPACK_IMPORTED_MODULE_2__.Type.FILE, l: 0, mode: 0, uid: system.sysUser,\n                        read: async (c1, count, offset) => {\n                            return await (0,_aqueue__WEBPACK_IMPORTED_MODULE_1__.dequeue)(queue1);\n                        },\n                        write: (c1, buf, offset) => {\n                            (0,_aqueue__WEBPACK_IMPORTED_MODULE_1__.enqueue)(queue2, buf);\n                        } },\n                    { name: \"data1\", id: 1, type: _public_api__WEBPACK_IMPORTED_MODULE_2__.Type.FILE, l: 0, mode: 0, uid: system.sysUser,\n                        read: async (c1, count, offset) => {\n                            return await (0,_aqueue__WEBPACK_IMPORTED_MODULE_1__.dequeue)(queue2);\n                        },\n                        write: (c1, buf, offset) => {\n                            (0,_aqueue__WEBPACK_IMPORTED_MODULE_1__.enqueue)(queue1, buf);\n                        } }\n                ];\n                let c = system.channels.mkchannel();\n                c.srv = \"|\";\n                c.type = _public_api__WEBPACK_IMPORTED_MODULE_2__.Type.DIR;\n                c.map = (0,_dirtab__WEBPACK_IMPORTED_MODULE_0__.mkdirtabA)(rootdir, system);\n                c.operations = {\n                    walk: _dirtab__WEBPACK_IMPORTED_MODULE_0__.walk,\n                    read: _dirtab__WEBPACK_IMPORTED_MODULE_0__.read,\n                    getstat: _dirtab__WEBPACK_IMPORTED_MODULE_0__.getstat,\n                };\n                return c;\n            },\n        }\n    });\n}\nfunction cleanup() {\n}\nconst module = {\n    name: \"pipe\",\n    init: init,\n    cleanup: cleanup\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (module);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzL2Rldi9waXBlLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Bvc3NpbXBpYmxlLy4vc3JjL3N5cy9kZXYvcGlwZS50cz8yMDJiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U3lzdGVtfSBmcm9tIFwiLi4vc3lzdGVtXCI7XG5pbXBvcnQge0lTeXN0ZW1Nb2R1bGV9IGZyb20gXCIuLi9tb2R1bGVzXCI7XG5pbXBvcnQge2dldHN0YXQsIElEaXJ0YWIsIG1rZGlydGFiQSwgcmVhZCwgd2Fsa30gZnJvbSBcIi4uL2RpcnRhYlwiO1xuaW1wb3J0IHtkZXF1ZXVlLCBlbnF1ZXVlLCBta2FxdWV1ZX0gZnJvbSBcIi4uL2FxdWV1ZVwiO1xuaW1wb3J0IHtUeXBlfSBmcm9tIFwiLi4vLi4vcHVibGljL2FwaVwiO1xuXG5hc3luYyBmdW5jdGlvbiBpbml0KHN5c3RlbTogU3lzdGVtKSB7XG4gICAgc3lzdGVtLmRldi5yZWdpc3RlckRldmljZSh7XG4gICAgICAgIGlkOiBcInxcIixcbiAgICAgICAgbmFtZTogXCJwaXBlXCIsXG4gICAgICAgIG9wZXJhdGlvbnM6IHtcbiAgICAgICAgICAgIGF0dGFjaDogYXN5bmMgKG9wdGlvbnMsIGtlcm5lbCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHF1ZXVlMSA9IG1rYXF1ZXVlPFVpbnQ4QXJyYXk+KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcXVldWUyID0gbWthcXVldWU8VWludDhBcnJheT4oKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHJvb3RkaXI6IElEaXJ0YWJbXSA9IFtcbiAgICAgICAgICAgICAgICAgICAge25hbWU6IFwiZGF0YVwiLCBpZDoxLCB0eXBlOlR5cGUuRklMRSwgbDowLCBtb2RlOiAwLCB1aWQ6IHN5c3RlbS5zeXNVc2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZDogYXN5bmMgKGMxLCBjb3VudCwgb2Zmc2V0KTogUHJvbWlzZTxVaW50OEFycmF5PiA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGRlcXVldWUocXVldWUxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZTogKGMxLCBidWYsIG9mZnNldCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVucXVldWUocXVldWUyLCBidWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7bmFtZTogXCJkYXRhMVwiLCBpZDoxLCB0eXBlOlR5cGUuRklMRSwgbDowLCBtb2RlOiAwLCB1aWQ6IHN5c3RlbS5zeXNVc2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZDogYXN5bmMgKGMxLCBjb3VudCwgb2Zmc2V0KTogUHJvbWlzZTxVaW50OEFycmF5PiA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGRlcXVldWUocXVldWUyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZTogKGMxLCBidWYsIG9mZnNldCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVucXVldWUocXVldWUxLCBidWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuXG4gICAgICAgICAgICAgICAgbGV0IGMgPSBzeXN0ZW0uY2hhbm5lbHMubWtjaGFubmVsKCk7XG4gICAgICAgICAgICAgICAgYy5zcnYgPSBcInxcIjtcbiAgICAgICAgICAgICAgICBjLnR5cGUgPSBUeXBlLkRJUjtcbiAgICAgICAgICAgICAgICBjLm1hcCA9IG1rZGlydGFiQShyb290ZGlyLCBzeXN0ZW0pO1xuICAgICAgICAgICAgICAgIGMub3BlcmF0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgd2Fsazogd2FsayxcbiAgICAgICAgICAgICAgICAgICAgcmVhZDogcmVhZCxcbiAgICAgICAgICAgICAgICAgICAgZ2V0c3RhdDogZ2V0c3RhdCxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNsZWFudXAoKXtcblxufVxuXG5jb25zdCBtb2R1bGU6IElTeXN0ZW1Nb2R1bGUgPSB7XG4gICAgbmFtZTogXCJwaXBlXCIsXG4gICAgaW5pdDogaW5pdCxcbiAgICBjbGVhbnVwOiBjbGVhbnVwXG59XG5leHBvcnQgZGVmYXVsdCBtb2R1bGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/sys/dev/pipe.ts\n");

/***/ }),

/***/ "./src/sys/dev/root.ts":
/*!*****************************!*\
  !*** ./src/sys/dev/root.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _bin_boot_img__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! &/bin/boot.img */ \"./dist/bin/boot.img\");\n/* harmony import */ var _bin_memfs_img__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! &/bin/memfs.img */ \"./dist/bin/memfs.img\");\n/* harmony import */ var _dirtab__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dirtab */ \"./src/sys/dirtab.ts\");\n/* harmony import */ var _public_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../public/api */ \"./src/public/api.ts\");\n// @ts-ignore\n\n// @ts-ignore\n\n\n\nasync function init(system) {\n    const bootdir = [\n        { name: \"boot\", id: 1, type: _public_api__WEBPACK_IMPORTED_MODULE_3__.Type.FILE, l: 0, mode: 0, uid: system.sysUser,\n            read: async (c, count, offset) => {\n                return new Uint8Array(await (await (await fetch(_bin_boot_img__WEBPACK_IMPORTED_MODULE_0__)).blob()).arrayBuffer());\n            } },\n        { name: \"memfs\", id: 1, type: _public_api__WEBPACK_IMPORTED_MODULE_3__.Type.FILE, l: 0, mode: 0, uid: system.sysUser,\n            read: async (c, count, offset) => {\n                return new Uint8Array(await (await (await fetch(_bin_memfs_img__WEBPACK_IMPORTED_MODULE_1__)).blob()).arrayBuffer());\n            } },\n    ];\n    const rootdir = [\n        { name: \"dev\", id: 1, type: _public_api__WEBPACK_IMPORTED_MODULE_3__.Type.DIR, l: 0, mode: 0, atime: system.boottime, uid: system.sysUser },\n        { name: \"env\", id: 1, type: _public_api__WEBPACK_IMPORTED_MODULE_3__.Type.DIR, l: 0, mode: 0, atime: system.boottime, uid: system.sysUser },\n        { name: \"fd\", id: 1, type: _public_api__WEBPACK_IMPORTED_MODULE_3__.Type.DIR, l: 0, mode: 0, atime: system.boottime, uid: system.sysUser },\n        { name: \"mnt\", id: 1, type: _public_api__WEBPACK_IMPORTED_MODULE_3__.Type.DIR, l: 0, mode: 0, atime: system.boottime, uid: system.sysUser },\n        { name: \"net\", id: 1, type: _public_api__WEBPACK_IMPORTED_MODULE_3__.Type.DIR, l: 0, mode: 0, atime: system.boottime, uid: system.sysUser },\n        { name: \"proc\", id: 1, type: _public_api__WEBPACK_IMPORTED_MODULE_3__.Type.DIR, l: 0, mode: 0, atime: system.boottime, uid: system.sysUser },\n        { name: \"root\", id: 1, type: _public_api__WEBPACK_IMPORTED_MODULE_3__.Type.DIR, l: 0, mode: 0, atime: system.boottime, uid: system.sysUser },\n        { name: \"srv\", id: 1, type: _public_api__WEBPACK_IMPORTED_MODULE_3__.Type.DIR, l: 0, mode: 0, atime: system.boottime, uid: system.sysUser },\n        { name: \"boot\", id: 1, type: _public_api__WEBPACK_IMPORTED_MODULE_3__.Type.DIR, l: 0, mode: 0, atime: system.boottime, uid: system.sysUser, dirtab: bootdir },\n        // TODO: Check if this below is really needed\n        { name: \"bin\", id: 1, type: _public_api__WEBPACK_IMPORTED_MODULE_3__.Type.DIR, l: 0, mode: 0, atime: system.boottime, uid: system.sysUser },\n        { name: \"lib\", id: 1, type: _public_api__WEBPACK_IMPORTED_MODULE_3__.Type.DIR, l: 0, mode: 0, atime: system.boottime, uid: system.sysUser },\n    ];\n    system.dev.registerDevice({\n        id: \"/\",\n        name: \"root\",\n        operations: {\n            attach: async (options, kernel) => {\n                const c = system.channels.mkchannel();\n                c.srv = \"/\";\n                c.type = _public_api__WEBPACK_IMPORTED_MODULE_3__.Type.DIR;\n                c.map = (0,_dirtab__WEBPACK_IMPORTED_MODULE_2__.mkdirtabA)(rootdir, kernel);\n                c.map.uid = system.sysUser;\n                c.map.atime = system.boottime;\n                c.operations = {\n                    walk: _dirtab__WEBPACK_IMPORTED_MODULE_2__.walk,\n                    read: _dirtab__WEBPACK_IMPORTED_MODULE_2__.read,\n                    getstat: _dirtab__WEBPACK_IMPORTED_MODULE_2__.getstat\n                };\n                return c;\n            },\n        }\n    });\n}\nfunction cleanup() {\n}\nconst module = {\n    name: \"rootfs\",\n    init: init,\n    cleanup: cleanup\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (module);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzL2Rldi9yb290LnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9zc2ltcGlibGUvLi9zcmMvc3lzL2Rldi9yb290LnRzPzc3OWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTeXN0ZW19IGZyb20gXCIuLi9zeXN0ZW1cIjtcbmltcG9ydCB7SVN5c3RlbU1vZHVsZX0gZnJvbSBcIi4uL21vZHVsZXNcIjtcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBib290YmluIGZyb20gXCImL2Jpbi9ib290LmltZ1wiO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IG1lbWZzIGZyb20gXCImL2Jpbi9tZW1mcy5pbWdcIjtcbmltcG9ydCB7Z2V0c3RhdCwgSURpcnRhYiwgbWtkaXJ0YWJBLCByZWFkLCB3YWxrfSBmcm9tIFwiLi4vZGlydGFiXCI7XG5pbXBvcnQge1R5cGV9IGZyb20gXCIuLi8uLi9wdWJsaWMvYXBpXCI7XG5cbmFzeW5jIGZ1bmN0aW9uIGluaXQoc3lzdGVtOiBTeXN0ZW0pIHtcbiAgICBjb25zdCBib290ZGlyOiBJRGlydGFiW10gPSBbXG4gICAgICAgIHtuYW1lOiBcImJvb3RcIiwgaWQ6MSwgdHlwZTpUeXBlLkZJTEUsIGw6MCwgbW9kZTogMCwgdWlkOiBzeXN0ZW0uc3lzVXNlcixcbiAgICAgICAgICAgIHJlYWQ6IGFzeW5jIChjLCBjb3VudCwgb2Zmc2V0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGF3YWl0IChhd2FpdCAoYXdhaXQgZmV0Y2goYm9vdGJpbikpLmJsb2IoKSkuYXJyYXlCdWZmZXIoKSk7XG4gICAgICAgICAgICB9fSxcbiAgICAgICAge25hbWU6IFwibWVtZnNcIiwgaWQ6MSwgdHlwZTpUeXBlLkZJTEUsIGw6MCwgbW9kZTogMCwgdWlkOiBzeXN0ZW0uc3lzVXNlcixcbiAgICAgICAgICAgIHJlYWQ6IGFzeW5jIChjLCBjb3VudCwgb2Zmc2V0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGF3YWl0IChhd2FpdCAoYXdhaXQgZmV0Y2gobWVtZnMpKS5ibG9iKCkpLmFycmF5QnVmZmVyKCkpO1xuICAgICAgICAgICAgfX0sXG4gICAgXTtcblxuICAgIGNvbnN0IHJvb3RkaXI6IElEaXJ0YWJbXSA9IFtcbiAgICAgICAge25hbWU6IFwiZGV2XCIsIGlkOjEsIHR5cGU6VHlwZS5ESVIsIGw6MCwgbW9kZTogMCwgYXRpbWU6IHN5c3RlbS5ib290dGltZSwgdWlkOiBzeXN0ZW0uc3lzVXNlcn0sXG4gICAgICAgIHtuYW1lOiBcImVudlwiLCBpZDoxLCB0eXBlOlR5cGUuRElSLCBsOjAsIG1vZGU6IDAsIGF0aW1lOiBzeXN0ZW0uYm9vdHRpbWUsIHVpZDogc3lzdGVtLnN5c1VzZXJ9LFxuICAgICAgICB7bmFtZTogXCJmZFwiLCBpZDoxLCB0eXBlOlR5cGUuRElSLCBsOjAsIG1vZGU6IDAsIGF0aW1lOiBzeXN0ZW0uYm9vdHRpbWUsIHVpZDogc3lzdGVtLnN5c1VzZXJ9LFxuICAgICAgICB7bmFtZTogXCJtbnRcIiwgaWQ6MSwgdHlwZTpUeXBlLkRJUiwgbDowLCBtb2RlOiAwLCBhdGltZTogc3lzdGVtLmJvb3R0aW1lLCB1aWQ6IHN5c3RlbS5zeXNVc2VyfSxcbiAgICAgICAge25hbWU6IFwibmV0XCIsIGlkOjEsIHR5cGU6VHlwZS5ESVIsIGw6MCwgbW9kZTogMCwgYXRpbWU6IHN5c3RlbS5ib290dGltZSwgdWlkOiBzeXN0ZW0uc3lzVXNlcn0sXG4gICAgICAgIHtuYW1lOiBcInByb2NcIiwgaWQ6MSwgdHlwZTpUeXBlLkRJUiwgbDowLCBtb2RlOiAwLCBhdGltZTogc3lzdGVtLmJvb3R0aW1lLCB1aWQ6IHN5c3RlbS5zeXNVc2VyfSxcbiAgICAgICAge25hbWU6IFwicm9vdFwiLCBpZDoxLCB0eXBlOlR5cGUuRElSLCBsOjAsIG1vZGU6IDAsIGF0aW1lOiBzeXN0ZW0uYm9vdHRpbWUsIHVpZDogc3lzdGVtLnN5c1VzZXJ9LFxuICAgICAgICB7bmFtZTogXCJzcnZcIiwgaWQ6MSwgdHlwZTpUeXBlLkRJUiwgbDowLCBtb2RlOiAwLCBhdGltZTogc3lzdGVtLmJvb3R0aW1lLCB1aWQ6IHN5c3RlbS5zeXNVc2VyfSxcbiAgICAgICAge25hbWU6IFwiYm9vdFwiLCBpZDoxLCB0eXBlOlR5cGUuRElSLCBsOjAsIG1vZGU6IDAsIGF0aW1lOiBzeXN0ZW0uYm9vdHRpbWUsIHVpZDogc3lzdGVtLnN5c1VzZXIsIGRpcnRhYjogYm9vdGRpcn0sXG5cbiAgICAgICAgLy8gVE9ETzogQ2hlY2sgaWYgdGhpcyBiZWxvdyBpcyByZWFsbHkgbmVlZGVkXG4gICAgICAgIHtuYW1lOiBcImJpblwiLCBpZDoxLCB0eXBlOlR5cGUuRElSLCBsOjAsIG1vZGU6IDAsIGF0aW1lOiBzeXN0ZW0uYm9vdHRpbWUsIHVpZDogc3lzdGVtLnN5c1VzZXJ9LFxuICAgICAgICB7bmFtZTogXCJsaWJcIiwgaWQ6MSwgdHlwZTpUeXBlLkRJUiwgbDowLCBtb2RlOiAwLCBhdGltZTogc3lzdGVtLmJvb3R0aW1lLCB1aWQ6IHN5c3RlbS5zeXNVc2VyfSxcbiAgICBdXG5cbiAgICBzeXN0ZW0uZGV2LnJlZ2lzdGVyRGV2aWNlKHtcbiAgICAgICAgaWQ6IFwiL1wiLFxuICAgICAgICBuYW1lOiBcInJvb3RcIixcblxuICAgICAgICBvcGVyYXRpb25zOiB7XG4gICAgICAgICAgICBhdHRhY2g6IGFzeW5jIChvcHRpb25zLCBrZXJuZWwpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjID0gc3lzdGVtLmNoYW5uZWxzLm1rY2hhbm5lbCgpO1xuICAgICAgICAgICAgICAgIGMuc3J2ID0gXCIvXCI7XG4gICAgICAgICAgICAgICAgYy50eXBlID0gVHlwZS5ESVI7XG4gICAgICAgICAgICAgICAgYy5tYXAgPSBta2RpcnRhYkEocm9vdGRpciwga2VybmVsKTtcbiAgICAgICAgICAgICAgICBjLm1hcC51aWQgPSBzeXN0ZW0uc3lzVXNlcjtcbiAgICAgICAgICAgICAgICBjLm1hcC5hdGltZSA9IHN5c3RlbS5ib290dGltZTtcbiAgICAgICAgICAgICAgICBjLm9wZXJhdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHdhbGs6IHdhbGssXG4gICAgICAgICAgICAgICAgICAgIHJlYWQ6IHJlYWQsXG4gICAgICAgICAgICAgICAgICAgIGdldHN0YXQ6IGdldHN0YXRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNsZWFudXAoKXtcblxufVxuXG5jb25zdCBtb2R1bGU6IElTeXN0ZW1Nb2R1bGUgPSB7XG4gICAgbmFtZTogXCJyb290ZnNcIixcbiAgICBpbml0OiBpbml0LFxuICAgIGNsZWFudXA6IGNsZWFudXBcbn1cbmV4cG9ydCBkZWZhdWx0IG1vZHVsZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/sys/dev/root.ts\n");

/***/ }),

/***/ "./src/sys/dev/serial.ts":
/*!*******************************!*\
  !*** ./src/sys/dev/serial.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _dirtab__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dirtab */ \"./src/sys/dirtab.ts\");\n/* harmony import */ var _public_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../public/api */ \"./src/public/api.ts\");\n\n\nfunction init(system) {\n    system.dev.registerDriver({\n        probe: async (x, match) => {\n            const rootdir = [\n                {\n                    name: \"serial\", id: 1, type: _public_api__WEBPACK_IMPORTED_MODULE_1__.Type.FILE, l: 0, mode: 0, uid: system.sysUser,\n                    write: async (file, buf, offset) => {\n                        return x.properties.write(buf);\n                    },\n                    read: async (c, count, offset) => {\n                        const buf = await x.properties.read();\n                        return new TextEncoder().encode(buf);\n                    },\n                }\n            ];\n            system.dev.registerDevice({\n                id: \"⌨️\",\n                name: \"serial\",\n                operations: {\n                    attach: async (options, system1) => {\n                        const c = system.channels.mkchannel();\n                        c.srv = \"⌨️\";\n                        c.map = (0,_dirtab__WEBPACK_IMPORTED_MODULE_0__.mkdirtabA)(rootdir, system1);\n                        c.type = _public_api__WEBPACK_IMPORTED_MODULE_1__.Type.DIR;\n                        c.operations = {\n                            read: _dirtab__WEBPACK_IMPORTED_MODULE_0__.read,\n                            walk: _dirtab__WEBPACK_IMPORTED_MODULE_0__.walk,\n                            getstat: _dirtab__WEBPACK_IMPORTED_MODULE_0__.getstat\n                        };\n                        return c;\n                    }\n                }\n            });\n        },\n        remove: (x) => { },\n        driver: {\n            name: \"serial\",\n            matchTable: [{ compatible: \"serial:terminal\", data: null }]\n        }\n    });\n}\nfunction cleanup() {\n}\nconst module = {\n    name: \"serial\",\n    init: init,\n    cleanup: cleanup\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (module);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzL2Rldi9zZXJpYWwudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9zc2ltcGlibGUvLi9zcmMvc3lzL2Rldi9zZXJpYWwudHM/MTEwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0lTeXN0ZW1Nb2R1bGV9IGZyb20gXCIuLi9tb2R1bGVzXCI7XG5pbXBvcnQge1N5c3RlbX0gZnJvbSBcIi4uL3N5c3RlbVwiO1xuaW1wb3J0IHtnZXRzdGF0LCBJRGlydGFiLCBta2RpcnRhYkEsIHJlYWQsIHdhbGt9IGZyb20gXCIuLi9kaXJ0YWJcIjtcbmltcG9ydCB7SUNoYW5uZWx9IGZyb20gXCIuLi92ZnMvY2hhbm5lbFwiO1xuaW1wb3J0IHtUeXBlfSBmcm9tIFwiLi4vLi4vcHVibGljL2FwaVwiO1xuXG5mdW5jdGlvbiBpbml0KHN5c3RlbTogU3lzdGVtKXtcbiAgICBzeXN0ZW0uZGV2LnJlZ2lzdGVyRHJpdmVyKHtcbiAgICAgICAgcHJvYmU6IGFzeW5jICh4LCBtYXRjaCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgcm9vdGRpcjogSURpcnRhYltdID0gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJzZXJpYWxcIiwgaWQ6MSwgdHlwZTpUeXBlLkZJTEUsIGw6MCwgbW9kZTogMCwgdWlkOiBzeXN0ZW0uc3lzVXNlcixcbiAgICAgICAgICAgICAgICAgICAgd3JpdGU6IGFzeW5jIChmaWxlLCBidWYsIG9mZnNldCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh4IGFzIGFueSkucHJvcGVydGllcy53cml0ZShidWYpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByZWFkOiBhc3luYyAoYzogSUNoYW5uZWwsIGNvdW50OiBudW1iZXIsIG9mZnNldDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBidWYgPSBhd2FpdCAoeCBhcyBhbnkpLnByb3BlcnRpZXMucmVhZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShidWYpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cblxuICAgICAgICAgICAgc3lzdGVtLmRldi5yZWdpc3RlckRldmljZSh7XG4gICAgICAgICAgICAgICAgaWQ6IFwi4oyo77iPXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzZXJpYWxcIixcbiAgICAgICAgICAgICAgICBvcGVyYXRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIGF0dGFjaDogYXN5bmMgKG9wdGlvbnMsIHN5c3RlbTEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBzeXN0ZW0uY2hhbm5lbHMubWtjaGFubmVsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLnNydiA9IFwi4oyo77iPXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLm1hcCA9IG1rZGlydGFiQShyb290ZGlyLCBzeXN0ZW0xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMudHlwZSA9IFR5cGUuRElSO1xuICAgICAgICAgICAgICAgICAgICAgICAgYy5vcGVyYXRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWQ6IHJlYWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2Fsazogd2FsayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRzdGF0OiBnZXRzdGF0XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmU6ICh4KSA9PiB7fSxcbiAgICAgICAgZHJpdmVyOntcbiAgICAgICAgICAgIG5hbWU6IFwic2VyaWFsXCIsXG4gICAgICAgICAgICBtYXRjaFRhYmxlOiBbe2NvbXBhdGlibGU6IFwic2VyaWFsOnRlcm1pbmFsXCIsIGRhdGE6IG51bGx9XVxuICAgICAgICB9XG4gICAgfSlcbn1cblxuZnVuY3Rpb24gY2xlYW51cCgpe1xuXG59XG5cbmNvbnN0IG1vZHVsZTogSVN5c3RlbU1vZHVsZSA9IHtcbiAgICBuYW1lOiBcInNlcmlhbFwiLFxuICAgIGluaXQ6IGluaXQsXG4gICAgY2xlYW51cDogY2xlYW51cFxufVxuXG5leHBvcnQgZGVmYXVsdCBtb2R1bGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/sys/dev/serial.ts\n");

/***/ }),

/***/ "./src/sys/dev/srv.ts":
/*!****************************!*\
  !*** ./src/sys/dev/srv.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _public_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../public/api */ \"./src/public/api.ts\");\n\nfunction init(system) {\n    const root = [];\n    const te = new TextEncoder();\n    const td = new TextDecoder();\n    function srvcreate(dir, c, name, mode) {\n        if (mode & _public_api__WEBPACK_IMPORTED_MODULE_0__.CreateMode.DIR) {\n            throw new _public_api__WEBPACK_IMPORTED_MODULE_0__.PError(_public_api__WEBPACK_IMPORTED_MODULE_0__.Status.EPERM);\n        }\n        let srv = {\n            name: name,\n        };\n        c.name = name;\n        c.map = srv;\n        c.type = _public_api__WEBPACK_IMPORTED_MODULE_0__.Type.FILE;\n        c.operations = {\n            write: srvwrite,\n            getstat: srvstat\n        };\n        root.push(srv);\n    }\n    async function srvread(c, count, offset) {\n        if (c.type & _public_api__WEBPACK_IMPORTED_MODULE_0__.Type.DIR) {\n            return te.encode(root.map(x => x.name).reduce((x, y) => x + \"\\n\" + y) || \"\");\n        }\n        throw new _public_api__WEBPACK_IMPORTED_MODULE_0__.PError(_public_api__WEBPACK_IMPORTED_MODULE_0__.Status.EPERM);\n    }\n    async function srvwrite(c, buf, offset) {\n        let fd = parseInt(td.decode(buf));\n        c.map.c = system.current.files.fileDescriptors[fd]?.channel;\n    }\n    async function srvstat(c) {\n        return {\n            srv: c.srv,\n            subsrv: c.subsrv,\n            type: c.type,\n            uid: system.sysUser,\n            mode: 0,\n            muid: system.sysUser,\n            gid: system.sysUser,\n            name: c.name,\n            mtime: system.boottime,\n            atime: system.boottime,\n            length: 0,\n        };\n    }\n    async function srvopen(c, mode) {\n        const s = root.find(x => x.name == c.name);\n        if (s) {\n            return s.c;\n        }\n        throw new _public_api__WEBPACK_IMPORTED_MODULE_0__.PError(_public_api__WEBPACK_IMPORTED_MODULE_0__.Status.ENOENT);\n    }\n    async function srvwalk(dir, c, name) {\n        for (const srv of root) {\n            if (srv.name == name) {\n                c.parent = dir;\n                c.map = srv;\n                c.name = name;\n                c.type = _public_api__WEBPACK_IMPORTED_MODULE_0__.Type.FILE;\n                c.operations = {\n                    open: srvopen,\n                    getstat: srvstat\n                };\n                return;\n            }\n        }\n        throw new _public_api__WEBPACK_IMPORTED_MODULE_0__.PError(_public_api__WEBPACK_IMPORTED_MODULE_0__.Status.ENOENT);\n    }\n    system.dev.registerDevice({\n        id: \"s\",\n        name: \"srv\",\n        operations: {\n            attach: async (options, system1) => {\n                const c = system.channels.mkchannel();\n                c.srv = \"s\";\n                c.map = root;\n                c.type = _public_api__WEBPACK_IMPORTED_MODULE_0__.Type.DIR;\n                c.operations = {\n                    read: srvread,\n                    walk: srvwalk,\n                    create: srvcreate,\n                    getstat: srvstat\n                };\n                return c;\n            }\n        }\n    });\n}\nfunction cleanup() {\n}\nconst module = {\n    name: \"srv\",\n    init: init,\n    cleanup: cleanup\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (module);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzL2Rldi9zcnYudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFHQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Bvc3NpbXBpYmxlLy4vc3JjL3N5cy9kZXYvc3J2LnRzP2Q0NzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJU3lzdGVtTW9kdWxlfSBmcm9tIFwiLi4vbW9kdWxlc1wiO1xuaW1wb3J0IHtTeXN0ZW19IGZyb20gXCIuLi9zeXN0ZW1cIjtcbmltcG9ydCB7SUNoYW5uZWx9IGZyb20gXCIuLi92ZnMvY2hhbm5lbFwiO1xuaW1wb3J0IHtDcmVhdGVNb2RlLCBJU3RhdCwgUEVycm9yLCBTdGF0dXMsIFR5cGV9IGZyb20gXCIuLi8uLi9wdWJsaWMvYXBpXCI7XG5pbXBvcnQge1Rhc2t9IGZyb20gXCIuLi9wcm9jL3Rhc2tcIjtcblxuaW50ZXJmYWNlIFNydiB7XG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGM/OiBJQ2hhbm5lbFxufVxuXG5mdW5jdGlvbiBpbml0KHN5c3RlbTogU3lzdGVtKXtcbiAgICBjb25zdCByb290OiBTcnZbXSA9IFtdXG4gICAgY29uc3QgdGUgPSBuZXcgVGV4dEVuY29kZXIoKTtcbiAgICBjb25zdCB0ZCA9IG5ldyBUZXh0RGVjb2RlcigpO1xuXG4gICAgZnVuY3Rpb24gc3J2Y3JlYXRlKGRpcjogSUNoYW5uZWwsIGM6IElDaGFubmVsLCBuYW1lOiBzdHJpbmcsIG1vZGU6IG51bWJlcil7XG4gICAgICAgIGlmKG1vZGUgJiBDcmVhdGVNb2RlLkRJUil7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUEVycm9yKFN0YXR1cy5FUEVSTSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc3J2ID0ge1xuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgfTtcbiAgICAgICAgYy5uYW1lID0gbmFtZTtcbiAgICAgICAgYy5tYXAgPSBzcnY7XG4gICAgICAgIGMudHlwZSA9IFR5cGUuRklMRTtcbiAgICAgICAgYy5vcGVyYXRpb25zID0ge1xuICAgICAgICAgICAgd3JpdGU6IHNydndyaXRlLFxuICAgICAgICAgICAgZ2V0c3RhdDogc3J2c3RhdFxuICAgICAgICB9XG4gICAgICAgIHJvb3QucHVzaChzcnYpO1xuICAgIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uIHNydnJlYWQoYzogSUNoYW5uZWwsIGNvdW50OiBudW1iZXIsIG9mZnNldDogbnVtYmVyKTogUHJvbWlzZTxVaW50OEFycmF5PntcbiAgICAgICAgaWYoYy50eXBlICYgVHlwZS5ESVIpe1xuICAgICAgICAgICAgcmV0dXJuIHRlLmVuY29kZShyb290Lm1hcCh4ID0+IHgubmFtZSkucmVkdWNlKCh4LHkpID0+IHggKyBcIlxcblwiICsgeSkgfHwgXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFBFcnJvcihTdGF0dXMuRVBFUk0pO1xuICAgIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uIHNydndyaXRlKGM6IElDaGFubmVsLCBidWY6IFVpbnQ4QXJyYXksIG9mZnNldDogbnVtYmVyKXtcbiAgICAgICAgbGV0IGZkID0gcGFyc2VJbnQodGQuZGVjb2RlKGJ1ZikpO1xuXG4gICAgICAgIChjLm1hcCBhcyBTcnYpLmMgPSAoc3lzdGVtLmN1cnJlbnQgYXMgVGFzaykuZmlsZXMuZmlsZURlc2NyaXB0b3JzW2ZkXT8uY2hhbm5lbDtcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBzcnZzdGF0KGM6IElDaGFubmVsKTogUHJvbWlzZTxJU3RhdD57XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzcnY6IGMuc3J2LFxuICAgICAgICAgICAgc3Vic3J2OiBjLnN1YnNydixcbiAgICAgICAgICAgIHR5cGU6IGMudHlwZSxcbiAgICAgICAgICAgIHVpZDogc3lzdGVtLnN5c1VzZXIsXG4gICAgICAgICAgICBtb2RlOiAwLFxuICAgICAgICAgICAgbXVpZDogc3lzdGVtLnN5c1VzZXIsXG4gICAgICAgICAgICBnaWQ6IHN5c3RlbS5zeXNVc2VyLFxuICAgICAgICAgICAgbmFtZTogYy5uYW1lLFxuICAgICAgICAgICAgbXRpbWU6IHN5c3RlbS5ib290dGltZSxcbiAgICAgICAgICAgIGF0aW1lOiBzeXN0ZW0uYm9vdHRpbWUsXG4gICAgICAgICAgICBsZW5ndGg6IDAsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gc3J2b3BlbihjOiBJQ2hhbm5lbCwgbW9kZTogbnVtYmVyKTogUHJvbWlzZTxJQ2hhbm5lbD57XG4gICAgICAgIGNvbnN0IHMgPSByb290LmZpbmQoeCA9PiB4Lm5hbWUgPT0gYy5uYW1lKTtcbiAgICAgICAgaWYocyl7XG4gICAgICAgICAgICByZXR1cm4gcy5jITtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgUEVycm9yKFN0YXR1cy5FTk9FTlQpXG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gc3J2d2FsayhkaXI6SUNoYW5uZWwsIGM6SUNoYW5uZWwsIG5hbWU6IHN0cmluZyl7XG4gICAgICAgIGZvciAoY29uc3Qgc3J2IG9mIHJvb3QpIHtcbiAgICAgICAgICAgIGlmIChzcnYubmFtZSA9PSBuYW1lKXtcbiAgICAgICAgICAgICAgICBjLnBhcmVudCA9IGRpcjtcbiAgICAgICAgICAgICAgICBjLm1hcCA9IHNydjtcbiAgICAgICAgICAgICAgICBjLm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgICAgIGMudHlwZSA9IFR5cGUuRklMRTtcbiAgICAgICAgICAgICAgICBjLm9wZXJhdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIG9wZW46IHNydm9wZW4sXG4gICAgICAgICAgICAgICAgICAgIGdldHN0YXQ6IHNydnN0YXRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBQRXJyb3IoU3RhdHVzLkVOT0VOVClcbiAgICB9XG5cbiAgICBzeXN0ZW0uZGV2LnJlZ2lzdGVyRGV2aWNlKHtcbiAgICAgICAgaWQ6IFwic1wiLFxuICAgICAgICBuYW1lOiBcInNydlwiLFxuICAgICAgICBvcGVyYXRpb25zOiB7XG4gICAgICAgICAgICBhdHRhY2g6IGFzeW5jIChvcHRpb25zLCBzeXN0ZW0xKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IHN5c3RlbS5jaGFubmVscy5ta2NoYW5uZWwoKTtcbiAgICAgICAgICAgICAgICBjLnNydiA9IFwic1wiO1xuICAgICAgICAgICAgICAgIGMubWFwID0gcm9vdDtcbiAgICAgICAgICAgICAgICBjLnR5cGUgPSBUeXBlLkRJUjtcbiAgICAgICAgICAgICAgICBjLm9wZXJhdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHJlYWQ6IHNydnJlYWQsXG4gICAgICAgICAgICAgICAgICAgIHdhbGs6IHNydndhbGssXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZTogc3J2Y3JlYXRlLFxuICAgICAgICAgICAgICAgICAgICBnZXRzdGF0OiBzcnZzdGF0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNsZWFudXAoKXtcblxufVxuXG5jb25zdCBtb2R1bGU6IElTeXN0ZW1Nb2R1bGUgPSB7XG4gICAgbmFtZTogXCJzcnZcIixcbiAgICBpbml0OiBpbml0LFxuICAgIGNsZWFudXA6IGNsZWFudXBcbn1cblxuZXhwb3J0IGRlZmF1bHQgbW9kdWxlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/sys/dev/srv.ts\n");

/***/ }),

/***/ "./src/sys/dirtab.ts":
/*!***************************!*\
  !*** ./src/sys/dirtab.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"mkdirtab\": () => (/* binding */ mkdirtab),\n/* harmony export */   \"mkdirtabA\": () => (/* binding */ mkdirtabA),\n/* harmony export */   \"read\": () => (/* binding */ read),\n/* harmony export */   \"getstat\": () => (/* binding */ getstat),\n/* harmony export */   \"walk\": () => (/* binding */ walk)\n/* harmony export */ });\n/* harmony import */ var _public_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../public/api */ \"./src/public/api.ts\");\n/* harmony import */ var _shared_struct__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/struct */ \"./src/shared/struct.ts\");\n\n\nfunction mkdirtab(dirtab, system) {\n    dirtab.atime = dirtab.atime || system.boottime;\n    dirtab.mtime = dirtab.mtime || system.boottime;\n    dirtab.mode = dirtab.mode || 0o644;\n    dirtab.muid = dirtab.muid || system.sysUser;\n    dirtab.uid = dirtab.uid || system.sysUser;\n    return dirtab;\n}\nfunction mkdirtabA(dirtab, system) {\n    let d;\n    if ({}.toString.call(dirtab) === '[object Function]') {\n        d = dirtab;\n    }\n    else {\n        d = dirtab.map(x => mkdirtab(x, system));\n    }\n    return mkdirtab({\n        dirtab: d,\n        id: 0,\n        l: 0,\n        mode: 0,\n        name: \"\",\n        type: _public_api__WEBPACK_IMPORTED_MODULE_0__.Type.DIR\n    }, system);\n}\nconst te = new TextEncoder();\nconst read = async (c, count, offset) => {\n    const dirtab = c.map;\n    if (c.type & _public_api__WEBPACK_IMPORTED_MODULE_0__.Type.DIR) {\n        if (dirtab.dirtab) {\n            let d;\n            if ({}.toString.call(dirtab.dirtab) === '[object Function]') {\n                d = dirtab.dirtab();\n            }\n            else {\n                d = dirtab.dirtab;\n            }\n            if ({}.toString.call(d) === '[object Function]') {\n                d = d();\n            }\n            return (0,_shared_struct__WEBPACK_IMPORTED_MODULE_1__.packA)(d.map(x => dirtab2stat(x, c)), _shared_struct__WEBPACK_IMPORTED_MODULE_1__.packStat);\n        }\n        else {\n            return te.encode(\"\");\n        }\n    }\n    else {\n        const read = dirtab.read;\n        if (read) {\n            return await read(c, count, offset);\n        }\n        throw new _public_api__WEBPACK_IMPORTED_MODULE_0__.PError(_public_api__WEBPACK_IMPORTED_MODULE_0__.Status.EPERM);\n    }\n};\nfunction dirtab2stat(dirtab, c) {\n    return {\n        atime: dirtab.atime || 0,\n        length: dirtab.l,\n        mode: dirtab.mode,\n        mtime: dirtab.atime || 0,\n        name: dirtab.name || \"\",\n        srv: c.srv,\n        subsrv: c.subsrv,\n        type: dirtab.type,\n        gid: dirtab.muid || dirtab.uid || \"\",\n        muid: dirtab.muid || dirtab.uid || \"\",\n        uid: dirtab.uid || \"\"\n    };\n}\nconst getstat = async (c) => {\n    const dirtab = c.map;\n    return dirtab2stat(dirtab, c);\n};\nconst walk = async (dir, c, name) => {\n    if (dir.map.dirtab) {\n        let dirtab = dir.map.dirtab;\n        if ({}.toString.call(dirtab) === '[object Function]') {\n            dirtab = dirtab();\n        }\n        for (const tab of dirtab) {\n            if (tab.name == name) {\n                c.map = tab;\n                c.type = tab.type;\n                c.name = name;\n                c.parent = dir;\n                if (tab.type == _public_api__WEBPACK_IMPORTED_MODULE_0__.Type.FILE) {\n                    c.operations = {\n                        read: read,\n                        write: tab.write,\n                        getstat: getstat\n                    };\n                }\n                else {\n                    c.operations = {\n                        walk: walk,\n                        read: read,\n                        getstat: getstat\n                    };\n                }\n                return c;\n            }\n        }\n        throw new _public_api__WEBPACK_IMPORTED_MODULE_0__.PError(_public_api__WEBPACK_IMPORTED_MODULE_0__.Status.ENOENT);\n    }\n    throw new _public_api__WEBPACK_IMPORTED_MODULE_0__.PError(_public_api__WEBPACK_IMPORTED_MODULE_0__.Status.EPERM);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzL2RpcnRhYi50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQ0E7QUFDQTtBQW1CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Bvc3NpbXBpYmxlLy4vc3JjL3N5cy9kaXJ0YWIudHM/MjQ4MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0lDaGFubmVsLCBJT3BlcmF0aW9uc30gZnJvbSBcIi4vdmZzL2NoYW5uZWxcIjtcbmltcG9ydCB7SVN0YXQsIFBFcnJvciwgU3RhdHVzLCBUeXBlfSBmcm9tIFwiLi4vcHVibGljL2FwaVwiO1xuaW1wb3J0IHtwYWNrQSwgcGFja1N0YXR9IGZyb20gXCIuLi9zaGFyZWQvc3RydWN0XCI7XG5pbXBvcnQge1N5c3RlbX0gZnJvbSBcIi4vc3lzdGVtXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURpcnRhYntcbiAgICBtdWlkPzogc3RyaW5nO1xuICAgIHVpZD86IHN0cmluZztcbiAgICBuYW1lPzogc3RyaW5nLFxuICAgIGlkOiBudW1iZXIsXG4gICAgdHlwZTogVHlwZSxcbiAgICBsOiBudW1iZXIsXG4gICAgbW9kZTogbnVtYmVyLFxuICAgIGF0aW1lPzogbnVtYmVyLFxuICAgIG10aW1lPzogbnVtYmVyLFxuICAgIHJlYWQ/OiBJT3BlcmF0aW9uc1tcInJlYWRcIl0sXG4gICAgd3JpdGU/OiBJT3BlcmF0aW9uc1tcIndyaXRlXCJdXG4gICAgcmVtb3ZlPzogSU9wZXJhdGlvbnNbXCJyZW1vdmVcIl1cbiAgICBkaXJ0YWI/OiBJRGlydGFiW10gfCAoKCkgPT4gSURpcnRhYltdKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWtkaXJ0YWIoZGlydGFiOiBJRGlydGFiLCBzeXN0ZW06IFN5c3RlbSk6IElEaXJ0YWJ7XG4gICAgZGlydGFiLmF0aW1lID0gZGlydGFiLmF0aW1lIHx8IHN5c3RlbS5ib290dGltZTtcbiAgICBkaXJ0YWIubXRpbWUgPSBkaXJ0YWIubXRpbWUgfHwgc3lzdGVtLmJvb3R0aW1lO1xuICAgIGRpcnRhYi5tb2RlID0gZGlydGFiLm1vZGUgfHwgMG82NDQ7XG4gICAgZGlydGFiLm11aWQgPSBkaXJ0YWIubXVpZCB8fCBzeXN0ZW0uc3lzVXNlcjtcbiAgICBkaXJ0YWIudWlkID0gZGlydGFiLnVpZCB8fCBzeXN0ZW0uc3lzVXNlcjtcbiAgICByZXR1cm4gZGlydGFiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWtkaXJ0YWJBKGRpcnRhYjogSURpcnRhYltdIHwgKCgpID0+IElEaXJ0YWJbXSksIHN5c3RlbTogU3lzdGVtKTogSURpcnRhYntcbiAgICBsZXQgZDtcbiAgICBpZih7fS50b1N0cmluZy5jYWxsKGRpcnRhYikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXScpe1xuICAgICAgICBkID0gZGlydGFiO1xuICAgIH1lbHNle1xuICAgICAgICBkID0gKGRpcnRhYiBhcyBJRGlydGFiW10pLm1hcCh4ID0+IG1rZGlydGFiKHgsIHN5c3RlbSkpO1xuICAgIH1cblxuICAgIHJldHVybiBta2RpcnRhYih7XG4gICAgICAgIGRpcnRhYjogZCxcbiAgICAgICAgaWQ6IDAsXG4gICAgICAgIGw6IDAsXG4gICAgICAgIG1vZGU6IDAsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFR5cGUuRElSXG4gICAgfSwgc3lzdGVtKTtcbn1cbmNvbnN0IHRlID0gbmV3IFRleHRFbmNvZGVyKClcbmV4cG9ydCBjb25zdCByZWFkID0gYXN5bmMgKGM6IElDaGFubmVsLCBjb3VudDogbnVtYmVyLCBvZmZzZXQ6IG51bWJlcik6IFByb21pc2U8VWludDhBcnJheT4gPT4ge1xuICAgIGNvbnN0IGRpcnRhYiA9IChjLm1hcCBhcyBJRGlydGFiKTtcbiAgICBpZihjLnR5cGUgJiBUeXBlLkRJUil7XG4gICAgICAgIGlmIChkaXJ0YWIuZGlydGFiKXtcbiAgICAgICAgICAgIGxldCBkOiBJRGlydGFiW107XG4gICAgICAgICAgICBpZih7fS50b1N0cmluZy5jYWxsKGRpcnRhYi5kaXJ0YWIpID09PSAnW29iamVjdCBGdW5jdGlvbl0nKXtcbiAgICAgICAgICAgICAgICBkID0gKGRpcnRhYi5kaXJ0YWIgYXMgYW55KSgpO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgZCA9IGRpcnRhYi5kaXJ0YWIgYXMgSURpcnRhYltdXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKHt9LnRvU3RyaW5nLmNhbGwoZCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXScpe1xuICAgICAgICAgICAgICAgIGQgPSAoZCBhcyBhbnkpKCkgYXMgSURpcnRhYltdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBhY2tBKGQubWFwKHggPT4gZGlydGFiMnN0YXQoeCwgYykpLCBwYWNrU3RhdCk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgcmV0dXJuIHRlLmVuY29kZShcIlwiKTtcbiAgICAgICAgfVxuICAgIH1lbHNle1xuICAgICAgICBjb25zdCByZWFkID0gZGlydGFiLnJlYWQ7XG4gICAgICAgIGlmKHJlYWQpe1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHJlYWQoYywgY291bnQsIG9mZnNldClcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgUEVycm9yKFN0YXR1cy5FUEVSTSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkaXJ0YWIyc3RhdChkaXJ0YWI6IElEaXJ0YWIsIGM6IElDaGFubmVsKTogSVN0YXQge1xuICAgIHJldHVybiB7XG4gICAgICAgIGF0aW1lOiBkaXJ0YWIuYXRpbWUgfHwgMCxcbiAgICAgICAgbGVuZ3RoOiBkaXJ0YWIubCxcbiAgICAgICAgbW9kZTogZGlydGFiLm1vZGUsXG4gICAgICAgIG10aW1lOiBkaXJ0YWIuYXRpbWUgfHwgMCxcbiAgICAgICAgbmFtZTogZGlydGFiLm5hbWUgfHwgXCJcIixcbiAgICAgICAgc3J2OiBjLnNydixcbiAgICAgICAgc3Vic3J2OiBjLnN1YnNydixcbiAgICAgICAgdHlwZTogZGlydGFiLnR5cGUsXG4gICAgICAgIGdpZDogZGlydGFiLm11aWQgfHwgZGlydGFiLnVpZCB8fCBcIlwiLFxuICAgICAgICBtdWlkOiBkaXJ0YWIubXVpZCB8fCBkaXJ0YWIudWlkIHx8IFwiXCIsXG4gICAgICAgIHVpZDogZGlydGFiLnVpZCB8fCBcIlwiXG5cbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBnZXRzdGF0ID0gYXN5bmMgKGM6IElDaGFubmVsKTogUHJvbWlzZTxJU3RhdD4gPT4ge1xuICAgIGNvbnN0IGRpcnRhYjogSURpcnRhYiA9IGMubWFwO1xuICAgIHJldHVybiBkaXJ0YWIyc3RhdChkaXJ0YWIsIGMpO1xufVxuXG5leHBvcnQgY29uc3Qgd2FsayA9IGFzeW5jIChkaXI6IElDaGFubmVsLCBjOiBJQ2hhbm5lbCwgbmFtZTogc3RyaW5nKTogUHJvbWlzZTxJQ2hhbm5lbD4gPT4ge1xuICAgIGlmKGRpci5tYXAuZGlydGFiKXtcbiAgICAgICAgbGV0IGRpcnRhYiA9IGRpci5tYXAuZGlydGFiO1xuICAgICAgICBpZih7fS50b1N0cmluZy5jYWxsKGRpcnRhYikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXScpe1xuICAgICAgICAgICAgZGlydGFiID0gZGlydGFiKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IHRhYiBvZiBkaXJ0YWIgYXMgSURpcnRhYltdKSB7XG4gICAgICAgICAgICBpZih0YWIubmFtZSA9PSBuYW1lKXtcbiAgICAgICAgICAgICAgICBjLm1hcCA9IHRhYjtcbiAgICAgICAgICAgICAgICBjLnR5cGUgPSB0YWIudHlwZTtcbiAgICAgICAgICAgICAgICBjLm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgICAgIGMucGFyZW50ID0gZGlyO1xuICAgICAgICAgICAgICAgIGlmKHRhYi50eXBlID09IFR5cGUuRklMRSl7XG4gICAgICAgICAgICAgICAgICAgIGMub3BlcmF0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWQ6IHJlYWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZTogdGFiLndyaXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0c3RhdDogZ2V0c3RhdFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGMub3BlcmF0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhbGs6IHdhbGssXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkOiByZWFkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0c3RhdDogZ2V0c3RhdFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBQRXJyb3IoU3RhdHVzLkVOT0VOVCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBQRXJyb3IoU3RhdHVzLkVQRVJNKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/sys/dirtab.ts\n");

/***/ }),

/***/ "./src/sys/log.ts":
/*!************************!*\
  !*** ./src/sys/log.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LogLevel\": () => (/* binding */ LogLevel),\n/* harmony export */   \"LogManager\": () => (/* binding */ LogManager)\n/* harmony export */ });\nvar LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"INFO\"] = 0] = \"INFO\";\n    LogLevel[LogLevel[\"WARNING\"] = 1] = \"WARNING\";\n    LogLevel[LogLevel[\"ERROR\"] = 2] = \"ERROR\";\n    LogLevel[LogLevel[\"DEBUG\"] = 3] = \"DEBUG\";\n})(LogLevel || (LogLevel = {}));\nclass LogManager {\n    system;\n    kmesg = \"\";\n    loglevel;\n    constructor(system) {\n        this.system = system;\n        this.loglevel = LogLevel.INFO;\n    }\n    log(s, l) {\n        this.kmesg += s;\n        if (l <= this.loglevel) {\n            this.system.printk(s);\n        }\n    }\n    setLogLevel(l) {\n        this.loglevel = l;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzL2xvZy50cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUVBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9zc2ltcGlibGUvLi9zcmMvc3lzL2xvZy50cz80MzQ5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U3lzdGVtfSBmcm9tIFwiLi9zeXN0ZW1cIjtcblxuZXhwb3J0IGVudW0gTG9nTGV2ZWx7XG5cbiAgICBJTkZPLFxuICAgIFdBUk5JTkcsXG4gICAgRVJST1IsXG4gICAgREVCVUdcbn1cblxuZXhwb3J0IGNsYXNzIExvZ01hbmFnZXJ7XG4gICAgcHJpdmF0ZSBzeXN0ZW06IFN5c3RlbTtcbiAgICBwcml2YXRlIGttZXNnID0gXCJcIjtcbiAgICBwcml2YXRlIGxvZ2xldmVsOiBMb2dMZXZlbDtcblxuICAgIGNvbnN0cnVjdG9yKHN5c3RlbTogU3lzdGVtKSB7XG4gICAgICAgIHRoaXMuc3lzdGVtID0gc3lzdGVtO1xuICAgICAgICB0aGlzLmxvZ2xldmVsID0gTG9nTGV2ZWwuSU5GTztcbiAgICB9XG5cbiAgICBsb2coczogc3RyaW5nLCBsOiBMb2dMZXZlbCl7XG4gICAgICAgIHRoaXMua21lc2cgKz0gcztcbiAgICAgICAgaWYobCA8PSB0aGlzLmxvZ2xldmVsKXtcbiAgICAgICAgICAgIHRoaXMuc3lzdGVtLnByaW50ayhzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldExvZ0xldmVsKGw6IExvZ0xldmVsKXtcbiAgICAgICAgdGhpcy5sb2dsZXZlbCA9IGw7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/sys/log.ts\n");

/***/ }),

/***/ "./src/sys/modules.ts":
/*!****************************!*\
  !*** ./src/sys/modules.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ModularityManager\": () => (/* binding */ ModularityManager)\n/* harmony export */ });\nclass ModularityManager {\n    modules = [];\n    system;\n    constructor(system) {\n        this.system = system;\n    }\n    async installModule(module) {\n        this.modules.push({\n            module: module\n        });\n        await module.init(this.system);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzL21vZHVsZXMudHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQWFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9zc2ltcGlibGUvLi9zcmMvc3lzL21vZHVsZXMudHM/NzEyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1N5c3RlbX0gZnJvbSBcIi4vc3lzdGVtXCI7XG5cblxuZXhwb3J0IGludGVyZmFjZSBJU3lzdGVtTW9kdWxle1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBpbml0OiAoa2VybmVsOiBTeXN0ZW0pID0+IHZvaWQ7XG4gICAgY2xlYW51cDogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQWN0aXZlTW9kdWxlcyB7XG4gICAgbW9kdWxlOiBJU3lzdGVtTW9kdWxlO1xufVxuXG5leHBvcnQgY2xhc3MgTW9kdWxhcml0eU1hbmFnZXJ7XG4gICAgbW9kdWxlczogSUFjdGl2ZU1vZHVsZXNbXSA9IFtdO1xuICAgIHN5c3RlbTogU3lzdGVtO1xuXG4gICAgY29uc3RydWN0b3Ioc3lzdGVtOiBTeXN0ZW0pIHtcbiAgICAgICAgdGhpcy5zeXN0ZW0gPSBzeXN0ZW07XG4gICAgfVxuXG4gICAgYXN5bmMgaW5zdGFsbE1vZHVsZShtb2R1bGU6IElTeXN0ZW1Nb2R1bGUpIHtcbiAgICAgICAgdGhpcy5tb2R1bGVzLnB1c2goe1xuICAgICAgICAgICAgbW9kdWxlOiBtb2R1bGVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXdhaXQgbW9kdWxlLmluaXQodGhpcy5zeXN0ZW0pO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/sys/modules.ts\n");

/***/ }),

/***/ "./src/sys/ns/ns.ts":
/*!**************************!*\
  !*** ./src/sys/ns/ns.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NamespaceManager\": () => (/* binding */ NamespaceManager)\n/* harmony export */ });\n/* harmony import */ var _public_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../public/api */ \"./src/public/api.ts\");\n\nclass NamespaceManager {\n    system;\n    constructor(system) {\n        this.system = system;\n    }\n    create(ns, flags) {\n        let mnt;\n        let pid;\n        if (ns) {\n            if (flags & _public_api__WEBPACK_IMPORTED_MODULE_0__.ForkMode2.NEW_NAMESPACE) {\n                if (flags & _public_api__WEBPACK_IMPORTED_MODULE_0__.ForkMode2.CLONE_MNT) {\n                    mnt = this.system.vfs.mounts.createNS(ns ? ns.mnt : null, true);\n                }\n                else {\n                    mnt = this.system.vfs.mounts.createNS(ns ? ns.mnt : null, false);\n                }\n                if (flags & _public_api__WEBPACK_IMPORTED_MODULE_0__.ForkMode2.CLONE_PID) {\n                    pid = this.system.proc.pids.createNS(ns ? ns.pid : null);\n                }\n                else {\n                    pid = ns.pid;\n                }\n            }\n            else {\n                pid = ns.pid;\n                mnt = ns.mnt;\n            }\n        }\n        else {\n            mnt = this.system.vfs.mounts.createNS(null, false);\n            pid = this.system.proc.pids.createNS(null);\n        }\n        const result = {\n            parent: ns,\n            mnt,\n            pid,\n            children: []\n        };\n        ns?.children.push(result);\n        return result;\n    }\n    async delete(ns) {\n        await this.system.vfs.mounts.deleteNS(ns.mnt);\n        if (ns.parent) {\n            const index = ns.parent.children.indexOf(ns);\n            if (index > -1) {\n                ns.parent.children.splice(index, 1);\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzL25zL25zLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBR0E7QUFTQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3NzaW1waWJsZS8uL3NyYy9zeXMvbnMvbnMudHM/Mzc1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1N5c3RlbX0gZnJvbSBcIi4uL3N5c3RlbVwiO1xuaW1wb3J0IHtJTW91bnROU30gZnJvbSBcIi4uL3Zmcy9tb3VudFwiO1xuaW1wb3J0IHtQaWROU30gZnJvbSBcIi4uL3Byb2MvcGlkXCI7XG5pbXBvcnQge0ZvcmtNb2RlMn0gZnJvbSBcIi4uLy4uL3B1YmxpYy9hcGlcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJTlNQcm94eSB7XG4gICAgcGFyZW50OiBJTlNQcm94eXxudWxsLFxuICAgIG1udDogSU1vdW50TlMsXG4gICAgcGlkOiBQaWROUyxcbiAgICBjaGlsZHJlbjogSU5TUHJveHlbXVxufVxuXG5leHBvcnQgY2xhc3MgTmFtZXNwYWNlTWFuYWdlcntcbiAgICBwcml2YXRlIHN5c3RlbTogU3lzdGVtO1xuXG4gICAgY29uc3RydWN0b3Ioc3lzdGVtOiBTeXN0ZW0pIHtcbiAgICAgICAgdGhpcy5zeXN0ZW0gPSBzeXN0ZW07XG4gICAgfVxuXG4gICAgY3JlYXRlKG5zOiBJTlNQcm94eXxudWxsLCBmbGFnczogRm9ya01vZGUyKTogSU5TUHJveHkge1xuICAgICAgICBsZXQgbW50O1xuICAgICAgICBsZXQgcGlkO1xuXG4gICAgICAgIGlmKG5zKSB7XG4gICAgICAgICAgICBpZiAoZmxhZ3MgJiBGb3JrTW9kZTIuTkVXX05BTUVTUEFDRSkge1xuICAgICAgICAgICAgICAgIGlmIChmbGFncyAmIEZvcmtNb2RlMi5DTE9ORV9NTlQpIHtcbiAgICAgICAgICAgICAgICAgICAgbW50ID0gdGhpcy5zeXN0ZW0udmZzLm1vdW50cy5jcmVhdGVOUyhucyA/IG5zLm1udCA6IG51bGwsIHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1udCA9IHRoaXMuc3lzdGVtLnZmcy5tb3VudHMuY3JlYXRlTlMobnMgPyBucy5tbnQgOiBudWxsLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChmbGFncyAmIEZvcmtNb2RlMi5DTE9ORV9QSUQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGlkID0gdGhpcy5zeXN0ZW0ucHJvYy5waWRzLmNyZWF0ZU5TKG5zID8gbnMucGlkIDogbnVsbCk7XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHBpZCA9IG5zLnBpZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBpZCA9IG5zLnBpZDtcbiAgICAgICAgICAgICAgICBtbnQgPSBucy5tbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgbW50ID0gdGhpcy5zeXN0ZW0udmZzLm1vdW50cy5jcmVhdGVOUyhudWxsLCBmYWxzZSk7XG4gICAgICAgICAgICBwaWQgPSB0aGlzLnN5c3RlbS5wcm9jLnBpZHMuY3JlYXRlTlMobnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXN1bHQ6IElOU1Byb3h5ID0ge1xuICAgICAgICAgICAgcGFyZW50OiBucyxcbiAgICAgICAgICAgIG1udCxcbiAgICAgICAgICAgIHBpZCxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXVxuICAgICAgICB9O1xuICAgICAgICBucz8uY2hpbGRyZW4ucHVzaChyZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGFzeW5jIGRlbGV0ZShuczogSU5TUHJveHkpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5zeXN0ZW0udmZzLm1vdW50cy5kZWxldGVOUyhucy5tbnQpO1xuICAgICAgICBpZihucy5wYXJlbnQpe1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBucy5wYXJlbnQuY2hpbGRyZW4uaW5kZXhPZihucyk7XG4gICAgICAgICAgICBpZihpbmRleCA+IC0xKXtcbiAgICAgICAgICAgICAgICBucy5wYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/sys/ns/ns.ts\n");

/***/ }),

/***/ "./src/sys/proc/pid.ts":
/*!*****************************!*\
  !*** ./src/sys/proc/pid.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PidNS\": () => (/* binding */ PidNS),\n/* harmony export */   \"PidManager\": () => (/* binding */ PidManager)\n/* harmony export */ });\nclass PidNS {\n    parent;\n    current;\n    pool;\n    pools;\n    children;\n    constructor(parent) {\n        this.parent = parent;\n        this.current = 1;\n        this.pool = new Map();\n        this.pools = new Map();\n        this.children = [];\n    }\n    getPid() {\n        return this.current++;\n    }\n    attach(task) {\n        task.pid = this.getPid();\n        this.pool.set(task.pid, task);\n        if (this.parent) {\n            this.parent.attachChild(task, [task.pid]);\n        }\n    }\n    dettach(task) {\n        this.pool.delete(task.pid);\n        if (this.parent) {\n            this.parent.deattachChild(task);\n        }\n    }\n    attachChild(task, pids) {\n        const pid = this.getPid();\n        this.pool.set(pid, task);\n        const npids = [pid].concat(Array.from(pids));\n        this.pools.set(task, npids);\n        if (this.parent) {\n            this.parent.attachChild(task, npids);\n        }\n    }\n    deattachChild(task) {\n        const p = this.pools.get(task);\n        this.pool.delete(p[0]);\n        this.pools.delete(task);\n        if (this.parent) {\n            this.parent.deattachChild(task);\n        }\n    }\n    get(pid) {\n        return this.pool.get(pid);\n    }\n}\nclass PidManager {\n    #system;\n    constructor(system) {\n        this.#system = system;\n    }\n    createNS(parent) {\n        const ns = new PidNS(parent);\n        if (parent) {\n            parent.children.push(ns);\n        }\n        return ns;\n    }\n    deleteNS(ns) {\n        if (ns.parent) {\n            const index = ns.children.indexOf(ns);\n            if (index > -1) {\n                ns.children.splice(index, 1);\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzL3Byb2MvcGlkLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Bvc3NpbXBpYmxlLy4vc3JjL3N5cy9wcm9jL3BpZC50cz8zZDE1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U3lzdGVtfSBmcm9tIFwiLi4vc3lzdGVtXCI7XG5pbXBvcnQge0lOU1Byb3h5fSBmcm9tIFwiLi4vbnMvbnNcIjtcbmltcG9ydCB7SVBhdGh9IGZyb20gXCIuLi92ZnMvcGF0aFwiO1xuaW1wb3J0IHtJUHJvdG9UYXNrLCBUYXNrLCBJVGFza1N0YXR1c30gZnJvbSBcIi4vdGFza1wiO1xuXG5leHBvcnQgdHlwZSBwaWQgPSBudW1iZXI7XG5cbmludGVyZmFjZSBJQ2hpbGRUYXNre1xuICAgIHBpZDogcGlkO1xuICAgIHRhc2s6IFRhc2tcbn1cblxuZXhwb3J0IGNsYXNzIFBpZE5TIHtcbiAgICBwYXJlbnQ6IFBpZE5TIHwgbnVsbDtcbiAgICBwcml2YXRlIGN1cnJlbnQ6IHBpZDtcbiAgICBwb29sOiBNYXA8cGlkLCBUYXNrPjtcbiAgICBwb29sczogTWFwPFRhc2ssIHBpZFtdPjtcbiAgICBjaGlsZHJlbjogUGlkTlNbXTtcblxuICAgIGNvbnN0cnVjdG9yKHBhcmVudDogUGlkTlN8bnVsbCkge1xuICAgICAgICB0aGlzLnBhcmVudCA9ICBwYXJlbnQ7XG4gICAgICAgIHRoaXMuY3VycmVudCA9ICAxO1xuICAgICAgICB0aGlzLnBvb2wgPSBuZXcgTWFwPHBpZCwgVGFzaz4oKTtcbiAgICAgICAgdGhpcy5wb29scyA9IG5ldyBNYXA8VGFzaywgcGlkW10+KCk7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSAgW107XG4gICAgfVxuXG4gICAgZ2V0UGlkKCl7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnQrKztcbiAgICB9XG5cbiAgICBhdHRhY2godGFzazogVGFzaykge1xuICAgICAgICB0YXNrLnBpZCA9IHRoaXMuZ2V0UGlkKCk7XG4gICAgICAgIHRoaXMucG9vbC5zZXQodGFzay5waWQsIHRhc2spO1xuICAgICAgICBpZih0aGlzLnBhcmVudCl7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5hdHRhY2hDaGlsZCh0YXNrLCBbdGFzay5waWRdKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRldHRhY2godGFzazogVGFzayl7XG4gICAgICAgIHRoaXMucG9vbC5kZWxldGUodGFzay5waWQpO1xuICAgICAgICBpZih0aGlzLnBhcmVudCl7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5kZWF0dGFjaENoaWxkKHRhc2spO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBhdHRhY2hDaGlsZCh0YXNrOiBUYXNrLCBwaWRzOiBwaWRbXSl7XG4gICAgICAgIGNvbnN0IHBpZCA9IHRoaXMuZ2V0UGlkKCk7XG4gICAgICAgIHRoaXMucG9vbC5zZXQocGlkLCB0YXNrKTtcbiAgICAgICAgY29uc3QgbnBpZHMgPSBbcGlkXS5jb25jYXQoQXJyYXkuZnJvbShwaWRzKSk7XG4gICAgICAgIHRoaXMucG9vbHMuc2V0KHRhc2ssIG5waWRzKTtcbiAgICAgICAgaWYodGhpcy5wYXJlbnQpe1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQuYXR0YWNoQ2hpbGQodGFzaywgbnBpZHMpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBkZWF0dGFjaENoaWxkKHRhc2s6IFRhc2spe1xuICAgICAgICBjb25zdCBwID0gdGhpcy5wb29scy5nZXQodGFzaykhO1xuICAgICAgICB0aGlzLnBvb2wuZGVsZXRlKHBbMF0pO1xuICAgICAgICB0aGlzLnBvb2xzLmRlbGV0ZSh0YXNrKTtcbiAgICAgICAgaWYodGhpcy5wYXJlbnQpe1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQuZGVhdHRhY2hDaGlsZCh0YXNrKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldChwaWQ6IHBpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wb29sLmdldChwaWQpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFBpZE1hbmFnZXJ7XG4gICAgI3N5c3RlbTogU3lzdGVtO1xuXG4gICAgY29uc3RydWN0b3Ioc3lzdGVtOiBTeXN0ZW0pIHtcbiAgICAgICAgdGhpcy4jc3lzdGVtID0gc3lzdGVtO1xuICAgIH1cblxuICAgIGNyZWF0ZU5TKHBhcmVudDogUGlkTlN8bnVsbCk6UGlkTlN7XG4gICAgICAgIGNvbnN0IG5zOlBpZE5TID0gbmV3IFBpZE5TKHBhcmVudCk7XG5cbiAgICAgICAgaWYocGFyZW50KXtcbiAgICAgICAgICAgIHBhcmVudC5jaGlsZHJlbi5wdXNoKG5zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBucztcbiAgICB9XG5cbiAgICBkZWxldGVOUyhuczogUGlkTlMpe1xuICAgICAgICBpZiAobnMucGFyZW50KXtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gbnMuY2hpbGRyZW4uaW5kZXhPZihucyk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgICAgIG5zLmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/sys/proc/pid.ts\n");

/***/ }),

/***/ "./src/sys/proc/proc.ts":
/*!******************************!*\
  !*** ./src/sys/proc/proc.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ProcessManager\": () => (/* binding */ ProcessManager)\n/* harmony export */ });\n/* harmony import */ var _vfs_namei__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vfs/namei */ \"./src/sys/vfs/namei.ts\");\n/* harmony import */ var _public_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../public/api */ \"./src/public/api.ts\");\n/* harmony import */ var _shared_proc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/proc */ \"./src/shared/proc.ts\");\n/* harmony import */ var _pid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pid */ \"./src/sys/proc/pid.ts\");\n/* harmony import */ var _task__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./task */ \"./src/sys/proc/task.ts\");\n/* harmony import */ var _shared_struct__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../shared/struct */ \"./src/shared/struct.ts\");\n\n\n\n\n\n\nclass ProcessManager {\n    system;\n    pids;\n    constructor(kernel) {\n        this.system = kernel;\n        this.pids = new _pid__WEBPACK_IMPORTED_MODULE_3__.PidManager(this.system);\n    }\n    async handleProcess(message, task) {\n        this.system.current = task;\n        const [type, id] = (0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.peak)(message);\n        try {\n            switch (type) {\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_2__.MessageType.WRITE: {\n                    let [id, fd, buf] = (0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MUWrite)(message);\n                    const file = task.files.fileDescriptors[fd];\n                    if (file) {\n                        const channel = file.channel;\n                        if (channel.operations.write) {\n                            await channel.operations.write(channel, buf, file.position);\n                            await task.send((0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MPWriteRes)(id, 0));\n                        }\n                        else {\n                            throw new _public_api__WEBPACK_IMPORTED_MODULE_1__.PError(_public_api__WEBPACK_IMPORTED_MODULE_1__.Status.EPERM);\n                        }\n                    }\n                    else {\n                        throw new _public_api__WEBPACK_IMPORTED_MODULE_1__.PError(_public_api__WEBPACK_IMPORTED_MODULE_1__.Status.EBADFD);\n                    }\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_2__.MessageType.READ: {\n                    let [id, fd, count] = (0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MURead)(message);\n                    const file = task.files.fileDescriptors[fd];\n                    if (file) {\n                        if (file.channel.type == _public_api__WEBPACK_IMPORTED_MODULE_1__.Type.DIR) {\n                            const stats = await this.system.vfs.dirread(file.channel, task);\n                            await task.send((0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MPReadRes)(id, (0,_shared_struct__WEBPACK_IMPORTED_MODULE_5__.packA)(stats, _shared_struct__WEBPACK_IMPORTED_MODULE_5__.packStat)));\n                        }\n                        else {\n                            let buf;\n                            const channel = file.channel;\n                            if (channel.operations.read) {\n                                buf = await channel.operations.read(channel, count, file.position);\n                            }\n                            else {\n                                throw new _public_api__WEBPACK_IMPORTED_MODULE_1__.PError(_public_api__WEBPACK_IMPORTED_MODULE_1__.Status.EINVAL);\n                            }\n                            await task.send((0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MPReadRes)(id, buf));\n                        }\n                    }\n                    else {\n                        throw new _public_api__WEBPACK_IMPORTED_MODULE_1__.PError(_public_api__WEBPACK_IMPORTED_MODULE_1__.Status.EBADFD);\n                    }\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_2__.MessageType.STAT: {\n                    let [id, fd] = (0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MUStat)(message);\n                    const file = task.files.fileDescriptors[fd];\n                    if (file) {\n                        if (file.channel.operations.getstat) {\n                            const stat = await file.channel.operations.getstat(file.channel);\n                            await task.send((0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MPStatRes)(id, stat));\n                        }\n                        else\n                            throw new _public_api__WEBPACK_IMPORTED_MODULE_1__.PError(_public_api__WEBPACK_IMPORTED_MODULE_1__.Status.EPERM);\n                    }\n                    else\n                        throw new _public_api__WEBPACK_IMPORTED_MODULE_1__.PError(_public_api__WEBPACK_IMPORTED_MODULE_1__.Status.EBADFD);\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_2__.MessageType.GETCWD: {\n                    let [id] = (0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MUGetCwd)(message);\n                    await task.send((0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MPGetCwdRes)(id, this.system.vfs.path(task.pwd, task)));\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_2__.MessageType.OPEN: {\n                    let [id, path, mode] = (0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MUOpen)(message);\n                    let cwd = task.pwd;\n                    let entry = await this.system.vfs.lookup(path, task);\n                    let file = await this.system.vfs.open(entry, mode);\n                    let fd = task.files.fileDescriptors.push(file) - 1;\n                    await task.send((0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MPOpenRes)(id, fd));\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_2__.MessageType.CREATE: {\n                    let [id, path, mode] = (0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MUCreate)(message);\n                    let file;\n                    const nd = await this.system.vfs.namei.pathLookup(path, _vfs_namei__WEBPACK_IMPORTED_MODULE_0__.Lookup.PARENT, task);\n                    file = await this.system.vfs.create(nd.path, nd.last, mode);\n                    let fd = task.files.fileDescriptors.push(file) - 1;\n                    await task.send((0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MPCreateRes)(id, fd));\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_2__.MessageType.CLOSE: {\n                    let [id, fd] = (0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MUClose)(message);\n                    if (!task.files.fileDescriptors) {\n                        throw new _public_api__WEBPACK_IMPORTED_MODULE_1__.PError(_public_api__WEBPACK_IMPORTED_MODULE_1__.Status.EBADFD);\n                    }\n                    await this.closeFile(task, fd);\n                    await task.send((0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MPCloseRes)(id));\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_2__.MessageType.BIND: {\n                    let [id, name, old, flags] = (0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MUBind)(message);\n                    let cwd = task.pwd;\n                    const mountpoint = await this.system.vfs.lookup(old, task);\n                    let dev;\n                    if (name[0] == \"#\") {\n                        dev = await this.system.dev.getDevice(name.substring(1)).operations.attach(\"\", this.system);\n                    }\n                    else {\n                        const path = await this.system.vfs.lookup(name, task);\n                        dev = path.channel;\n                    }\n                    await this.system.vfs.cmount(dev, mountpoint.channel, flags, mountpoint.mount, this.system.current.ns.mnt);\n                    await task.send((0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MPBindRes)(id));\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_2__.MessageType.MOUNT: {\n                    let [id, fd, afd, old, aname, flags] = (0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MUMount)(message);\n                    const mountpoint = await this.system.vfs.lookup(old, task);\n                    const file = task.files.fileDescriptors[fd];\n                    const afile = task.files.fileDescriptors[afd];\n                    const dev = await this.system.dev.getDevice(\"M\").operations.attach({\n                        fd: file?.channel,\n                        afd: afile?.channel,\n                        aname: aname\n                    }, this.system);\n                    await this.system.vfs.cmount(dev, mountpoint.channel, flags, mountpoint.mount, this.system.current.ns.mnt);\n                    await task.send((0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MPMountRes)(id));\n                    break;\n                }\n                // case MessageType.UNMOUNT: {\n                //     let unmount = message as IProcUnmount;\n                //     let cwd = process.task.pwd;\n                //     const mountpoint = this.system.vfs.lookup(unmount.path, process.task)!;\n                //     await this.system.vfs.unmount(mountpoint.mount!, mountpoint.entry);\n                //\n                //     const res: IProcUnmountRes = {\n                //         type: MessageType.UNMOUNT_RES,\n                //         id: message.id,\n                //     }\n                //     container.operations.send(container, res)\n                //     break;\n                // }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_2__.MessageType.EXEC: {\n                    let [id, path, argv] = (0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MUExec)(message);\n                    await this.exec(path, argv, task);\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_2__.MessageType.FORK: {\n                    const [id, entrypoint, args] = (0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MUFork)(message);\n                    const t = await this.fork(entrypoint, args, 0, task);\n                    await task.send((0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MPForkRes)(id, t.pid));\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_2__.MessageType.CHCWD: {\n                    let [id, path] = (0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MUChCwd)(message);\n                    const p = await this.system.vfs.lookup(path, task);\n                    task.chcwd(p);\n                    await task.send((0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MPChCwdRes)(id));\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_2__.MessageType.DIE: {\n                    await task.kill();\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_2__.MessageType.REMOVE: {\n                    let [id, path] = (0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MURemove)(message);\n                    let entry = await this.system.vfs.lookup(path, task);\n                    if (entry.channel.operations.remove) {\n                        await entry.channel.operations.remove(entry.channel);\n                    }\n                    else {\n                        throw new _public_api__WEBPACK_IMPORTED_MODULE_1__.PError(_public_api__WEBPACK_IMPORTED_MODULE_1__.Status.EPERM);\n                    }\n                    await task.send((0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MPRemoveRes)(id));\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_2__.MessageType.PIPE: {\n                    let [id] = (0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MUPipe)(message);\n                    const dev = await this.system.dev.getDevice(\"|\").operations.attach?.(\"\", this.system);\n                    const data = await this.system.vfs.lookup(\"/data\", task, dev);\n                    const data1 = await this.system.vfs.lookup(\"/data1\", task, dev);\n                    const file = await this.system.vfs.open(data, _public_api__WEBPACK_IMPORTED_MODULE_1__.OpenMode.READ);\n                    const file1 = await this.system.vfs.open(data1, _public_api__WEBPACK_IMPORTED_MODULE_1__.OpenMode.WRITE);\n                    const pipefd = [this.openFile(task, file), this.openFile(task, file1)];\n                    await task.send((0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MPPipeRes)(id, pipefd));\n                    break;\n                }\n            }\n        }\n        catch (e) {\n            if (e instanceof _public_api__WEBPACK_IMPORTED_MODULE_1__.PError) {\n                let [_, id] = (0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.peak)(message);\n                await task.send((0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MPSignal)(id, _shared_proc__WEBPACK_IMPORTED_MODULE_2__.Signal.ERROR, e.code));\n            }\n        }\n    }\n    openFile(task, file, pos) {\n        if (pos) {\n            task.files.fileDescriptors[pos] = file;\n            return pos;\n        }\n        for (let i = 0; i < task.files.fileDescriptors.length; i++) {\n            if (!task.files.fileDescriptors[i]) {\n                task.files.fileDescriptors[i] = file;\n                return i;\n            }\n        }\n        return task.files.fileDescriptors.push(file) - 1;\n    }\n    closeFile(task, fd) {\n        if (task.files.fileDescriptors[fd]) {\n            this.system.vfs.close(task.files.fileDescriptors[fd]);\n            task.files.fileDescriptors[fd] = null;\n        }\n        throw new _public_api__WEBPACK_IMPORTED_MODULE_1__.PError(_public_api__WEBPACK_IMPORTED_MODULE_1__.Status.EBADFD);\n    }\n    async fetchDependencyChannel(deps, task) {\n        // TODO: this is wrong, it requires a dependency tree, or else you're loading twice dependencies\n        let result = [];\n        for (const dep of deps) {\n            let entry = await this.system.vfs.lookup(`/lib/${dep}.dyna`, task);\n            let file = await this.system.vfs.open(entry, _public_api__WEBPACK_IMPORTED_MODULE_1__.OpenMode.EXEC | _public_api__WEBPACK_IMPORTED_MODULE_1__.OpenMode.READ);\n            let content;\n            if (file.channel.operations.read) {\n                content = this.system.decoder.decode(await file.channel.operations.read(file.channel, -1, 0));\n            }\n            else {\n                throw new _public_api__WEBPACK_IMPORTED_MODULE_1__.PError(_public_api__WEBPACK_IMPORTED_MODULE_1__.Status.EINVAL);\n            }\n            if (!content.startsWith(\"dynalib:\")) {\n                throw new _public_api__WEBPACK_IMPORTED_MODULE_1__.PError(_public_api__WEBPACK_IMPORTED_MODULE_1__.Status.ENOEXEC);\n            }\n            let dynalibstruct = JSON.parse(content.substring(8));\n            result.concat(await this.fetchDependencyChannel(dynalibstruct.dependencies, task));\n            result.push([dep, dynalibstruct, file.channel]);\n        }\n        return result;\n    }\n    async getCPUChannel(path, parent) {\n        let cpup = await this.system.vfs.lookup(path + \"/ctrl\", parent);\n        let cpuctrl = await this.system.vfs.open(cpup, _public_api__WEBPACK_IMPORTED_MODULE_1__.OpenMode.READ);\n        const id = await cpuctrl.channel.operations.read(cpuctrl.channel, -1, 0);\n        let container = await this.system.vfs.lookup(path + \"/\" + this.system.decoder.decode(id), parent);\n        let cpu = await this.system.vfs.open(container, _public_api__WEBPACK_IMPORTED_MODULE_1__.OpenMode.RDWR);\n        return cpu.channel;\n    }\n    async fetchBin(channel, parent) {\n        let content;\n        if (channel.operations.read) {\n            content = this.system.decoder.decode(await channel.operations.read(channel, -1, 0));\n        }\n        else {\n            throw new _public_api__WEBPACK_IMPORTED_MODULE_1__.PError(_public_api__WEBPACK_IMPORTED_MODULE_1__.Status.EINVAL);\n        }\n        if (!content.startsWith(\"PEXF:\")) {\n            throw new _public_api__WEBPACK_IMPORTED_MODULE_1__.PError(_public_api__WEBPACK_IMPORTED_MODULE_1__.Status.ENOEXEC);\n        }\n        let pexfstruct = JSON.parse(content.substring(5));\n        return pexfstruct;\n    }\n    async loadDependencies(pexfstruct, task, parent) {\n        for (const dep of await this.fetchDependencyChannel(pexfstruct.dependencies, parent)) {\n            await task.send((0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MPDependency)(\"\", dep[0], dep[1].code));\n        }\n    }\n    async fork(path, args, fork, parent) {\n        const cpupath = parent.env.get(\"CPUPATH\");\n        if (cpupath) {\n            const cpu = await this.getCPUChannel(cpupath, parent);\n            let ns;\n            if (fork & _public_api__WEBPACK_IMPORTED_MODULE_1__.ForkMode2.NEW_NAMESPACE) {\n                ns = this.system.ns.create(parent.ns, fork);\n            }\n            else {\n                ns = parent.ns;\n            }\n            let entry = await this.system.vfs.lookup(path, parent);\n            let file = await this.system.vfs.open(entry, _public_api__WEBPACK_IMPORTED_MODULE_1__.OpenMode.EXEC | _public_api__WEBPACK_IMPORTED_MODULE_1__.OpenMode.READ);\n            const bin = await this.fetchBin(file.channel, parent);\n            let fds;\n            if (fork & _public_api__WEBPACK_IMPORTED_MODULE_1__.ForkMode2.COPY_FD) {\n                fds = { fileDescriptors: Array.from(parent.files.fileDescriptors) };\n            }\n            else if (fork & _public_api__WEBPACK_IMPORTED_MODULE_1__.ForkMode2.EMPTY_FD) {\n                fds = { fileDescriptors: [] };\n            }\n            else {\n                fds = { fileDescriptors: parent.files };\n            }\n            let env;\n            if (fork & _public_api__WEBPACK_IMPORTED_MODULE_1__.ForkMode2.COPY_ENV) {\n                env = new Map(parent.env);\n            }\n            else if (fork & _public_api__WEBPACK_IMPORTED_MODULE_1__.ForkMode2.EMPTY_ENV) {\n                env = new Map();\n            }\n            else {\n                env = parent.env;\n            }\n            const task = new _task__WEBPACK_IMPORTED_MODULE_4__.Task(entry, args, this.system.sysUser, this.system.sysUser, parent.pwd, parent.root, ns, parent.pid, cpu, fds, env, this.handleProcess.bind(this));\n            await this.loadDependencies(bin, task, parent);\n            await task.send((0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MPStart)(\"\", bin.code, [path].concat(args)));\n            setTimeout(async () => await task.run(), 0);\n            return task;\n        }\n        throw new _public_api__WEBPACK_IMPORTED_MODULE_1__.PError(_public_api__WEBPACK_IMPORTED_MODULE_1__.Status.ENOENT);\n    }\n    async exec(path, argv, task) {\n        const cpupath = task.env.get(\"CPUPATH\");\n        if (cpupath) {\n            const cpu = await this.getCPUChannel(cpupath, task);\n            await task.switchCPU(cpu);\n            let entry = await this.system.vfs.lookup(path, task);\n            let file = await this.system.vfs.open(entry, _public_api__WEBPACK_IMPORTED_MODULE_1__.OpenMode.EXEC | _public_api__WEBPACK_IMPORTED_MODULE_1__.OpenMode.READ);\n            const bin = await this.fetchBin(file.channel, task);\n            await this.loadDependencies(bin, task, task);\n            await task.send((0,_shared_proc__WEBPACK_IMPORTED_MODULE_2__.MPStart)(\"\", bin.code, [path].concat(argv)));\n            setTimeout(async () => await task.run(), 0);\n            task.path = entry;\n            task.argv = argv;\n            return task;\n        }\n        throw new _public_api__WEBPACK_IMPORTED_MODULE_1__.PError(_public_api__WEBPACK_IMPORTED_MODULE_1__.Status.ENOENT);\n    }\n    wait(pid, task) {\n        return new Promise((resolve, reject) => {\n            task.ns.pid.get(pid).waits.push(resolve);\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/sys/proc/proc.ts\n");

/***/ }),

/***/ "./src/sys/proc/task.ts":
/*!******************************!*\
  !*** ./src/sys/proc/task.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ITaskStatus\": () => (/* binding */ ITaskStatus),\n/* harmony export */   \"Task\": () => (/* binding */ Task)\n/* harmony export */ });\nvar ITaskStatus;\n(function (ITaskStatus) {\n    ITaskStatus[ITaskStatus[\"PENDING\"] = 0] = \"PENDING\";\n    ITaskStatus[ITaskStatus[\"RUNNGING\"] = 1] = \"RUNNGING\";\n    ITaskStatus[ITaskStatus[\"STOP\"] = 2] = \"STOP\";\n})(ITaskStatus || (ITaskStatus = {}));\nfunction mkfile(c) {\n    return { position: 0, channel: c };\n}\nclass Task {\n    status = ITaskStatus.RUNNGING;\n    pid;\n    uid;\n    gid;\n    sys;\n    ns;\n    pwd;\n    root;\n    waits;\n    path;\n    argv;\n    files;\n    parent;\n    cpu;\n    handler;\n    env;\n    constructor(path, argv, uid, gid, pwd, root, ns, parentPid, cpu, files, env, handler) {\n        this.sys = true;\n        this.pid = 0;\n        ns.pid.attach(this);\n        this.ns = ns;\n        this.uid = uid;\n        this.gid = gid;\n        this.waits = [];\n        this.path = path;\n        this.argv = argv;\n        this.root = root;\n        this.pwd = pwd;\n        this.files = { fileDescriptors: [] };\n        this.parent = parentPid;\n        this.cpu = cpu;\n        this.env = env;\n        this.handler = handler;\n    }\n    async send(array) {\n        await this.cpu.operations.write(this.cpu, array, 0);\n    }\n    async run() {\n        const id = this.cpu.name;\n        while (this.status == ITaskStatus.RUNNGING &&\n            id == this.cpu.name) {\n            const message = await this.cpu.operations.read(this.cpu, -1, 0);\n            this.handler(message, this);\n        }\n    }\n    async switchCPU(cpu) {\n        await this.cpu.operations.remove?.(this.cpu);\n        this.cpu = cpu;\n    }\n    chroot(path) {\n        this.root = {\n            channel: path.channel,\n            mount: path.mount\n        };\n    }\n    chcwd(path) {\n        this.pwd = {\n            channel: path.channel,\n            mount: path.mount\n        };\n    }\n    async kill() {\n        await this.cpu.operations.remove?.(this.cpu);\n        this.status = ITaskStatus.STOP;\n        this.ns.pid.dettach(this);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzL3Byb2MvdGFzay50cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUtBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQW1CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9zc2ltcGlibGUvLi9zcmMvc3lzL3Byb2MvdGFzay50cz9iODBhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SUNoYW5uZWx9IGZyb20gXCIuLi92ZnMvY2hhbm5lbFwiO1xuaW1wb3J0IHtJTlNQcm94eX0gZnJvbSBcIi4uL25zL25zXCI7XG5pbXBvcnQge0lQYXRofSBmcm9tIFwiLi4vdmZzL3BhdGhcIjtcbmltcG9ydCB7cGlkfSBmcm9tIFwiLi9waWRcIjtcblxuZXhwb3J0IGVudW0gSVRhc2tTdGF0dXMge1xuICAgIFBFTkRJTkcsXG4gICAgUlVOTkdJTkcsXG4gICAgU1RPUFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElGaWxlIHtcbiAgICBwb3NpdGlvbjogbnVtYmVyO1xuICAgIGNoYW5uZWw6IElDaGFubmVsO1xufVxuXG5mdW5jdGlvbiBta2ZpbGUoYzogSUNoYW5uZWwpOiBJRmlsZSB7XG4gICAgcmV0dXJuIHtwb3NpdGlvbjogMCwgY2hhbm5lbDogY307XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVRhc2tGaWxlcyB7XG4gICAgZmlsZURlc2NyaXB0b3JzOiAoSUZpbGV8bnVsbClbXVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQcm90b1Rhc2sge1xuICAgIHBpZDogbnVtYmVyLFxuICAgIHVpZDogc3RyaW5nLFxuICAgIGdpZDogc3RyaW5nLFxuICAgIG5zOiBJTlNQcm94eTtcbiAgICByb290OiBJUGF0aDtcbiAgICBwd2Q6IElQYXRoO1xuICAgIGVudjogRW52aXJvbWVudCxcbiAgICBmaWxlczogSVRhc2tGaWxlcyxcbn1cblxuZXhwb3J0IHR5cGUgRW52aXJvbWVudCA9IE1hcDxzdHJpbmcsc3RyaW5nPjtcblxuZXhwb3J0IGNsYXNzIFRhc2sgaW1wbGVtZW50cyBJUHJvdG9UYXNrIHtcbiAgICBzdGF0dXMgPSBJVGFza1N0YXR1cy5SVU5OR0lOR1xuICAgIHBpZDogbnVtYmVyO1xuICAgIHVpZDogc3RyaW5nO1xuICAgIGdpZDogc3RyaW5nO1xuICAgIHN5czogYW55O1xuICAgIG5zOiBJTlNQcm94eTtcbiAgICBwd2Q6IElQYXRoO1xuICAgIHJvb3Q6IElQYXRoO1xuICAgIHdhaXRzOiAoKHZhbHVlOiAoc3RyaW5nIHwgUHJvbWlzZUxpa2U8c3RyaW5nPikpID0+IHZvaWQpW107XG4gICAgcGF0aDogSVBhdGg7XG4gICAgYXJndjogc3RyaW5nW107XG4gICAgZmlsZXM6IElUYXNrRmlsZXM7XG4gICAgcGFyZW50PzogcGlkO1xuICAgIGNwdTogSUNoYW5uZWw7XG4gICAgaGFuZGxlcjogKGFycjogVWludDhBcnJheSwgdGFzazogVGFzaykgPT4gdm9pZDtcbiAgICBlbnY6IEVudmlyb21lbnQ7XG5cbiAgICAgY29uc3RydWN0b3IocGF0aDogSVBhdGgsIGFyZ3Y6IHN0cmluZ1tdLCB1aWQ6IHN0cmluZywgZ2lkOiBzdHJpbmcsIHB3ZDogSVBhdGgsXG4gICAgICAgICAgICAgICAgIHJvb3Q6IElQYXRoLCBuczogSU5TUHJveHksIHBhcmVudFBpZDogbnVtYmVyLCBjcHU6IElDaGFubmVsLCBmaWxlczogSVRhc2tGaWxlcyxcbiAgICAgICAgICAgICAgICAgZW52OiBFbnZpcm9tZW50LCBoYW5kbGVyOiAoYXJyOiBVaW50OEFycmF5LCB0YXNrOiBUYXNrKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuc3lzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5waWQgPSAwO1xuICAgICAgICBucy5waWQuYXR0YWNoKHRoaXMpO1xuICAgICAgICB0aGlzLm5zID0gbnM7XG4gICAgICAgIHRoaXMudWlkID0gdWlkO1xuICAgICAgICB0aGlzLmdpZCA9IGdpZDtcbiAgICAgICAgdGhpcy53YWl0cyA9IFtdO1xuICAgICAgICB0aGlzLnBhdGggPSBwYXRoO1xuICAgICAgICB0aGlzLmFyZ3YgPSBhcmd2O1xuICAgICAgICB0aGlzLnJvb3QgPSByb290O1xuICAgICAgICB0aGlzLnB3ZCA9IHB3ZDtcbiAgICAgICAgdGhpcy5maWxlcyA9IHtmaWxlRGVzY3JpcHRvcnM6IFtdfTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnRQaWQ7XG4gICAgICAgIHRoaXMuY3B1ID0gY3B1O1xuICAgICAgICB0aGlzLmVudiA9IGVudjtcbiAgICAgICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcbiAgICB9XG5cbiAgICBhc3luYyBzZW5kKGFycmF5OiBVaW50OEFycmF5KXtcbiAgICAgICAgYXdhaXQgdGhpcy5jcHUub3BlcmF0aW9ucy53cml0ZSEodGhpcy5jcHUsIGFycmF5LCAwKTtcbiAgICB9XG5cbiAgICBhc3luYyBydW4oKSB7XG4gICAgICAgICBjb25zdCBpZCA9IHRoaXMuY3B1Lm5hbWU7XG4gICAgICAgICB3aGlsZSAodGhpcy5zdGF0dXMgPT0gSVRhc2tTdGF0dXMuUlVOTkdJTkcgJiZcbiAgICAgICAgICAgICBpZCA9PSB0aGlzLmNwdS5uYW1lKSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYXdhaXQgdGhpcy5jcHUub3BlcmF0aW9ucy5yZWFkISh0aGlzLmNwdSwgLTEsIDApO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVyKG1lc3NhZ2UsIHRoaXMpO1xuICAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIHN3aXRjaENQVShjcHU6IElDaGFubmVsKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuY3B1Lm9wZXJhdGlvbnMucmVtb3ZlPy4odGhpcy5jcHUpO1xuICAgICAgICB0aGlzLmNwdSA9IGNwdTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2hyb290KHBhdGg6IElQYXRoKXtcbiAgICAgICAgdGhpcy5yb290ID0ge1xuICAgICAgICAgICAgY2hhbm5lbDogcGF0aC5jaGFubmVsLFxuICAgICAgICAgICAgbW91bnQ6IHBhdGgubW91bnRcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBjaGN3ZChwYXRoOiBJUGF0aCl7XG4gICAgICAgIHRoaXMucHdkID0ge1xuICAgICAgICAgICAgY2hhbm5lbDogcGF0aC5jaGFubmVsLFxuICAgICAgICAgICAgbW91bnQ6IHBhdGgubW91bnRcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGtpbGwoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuY3B1Lm9wZXJhdGlvbnMucmVtb3ZlPy4odGhpcy5jcHUpO1xuICAgICAgICB0aGlzLnN0YXR1cyA9IElUYXNrU3RhdHVzLlNUT1BcbiAgICAgICAgdGhpcy5ucy5waWQuZGV0dGFjaCh0aGlzKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/sys/proc/task.ts\n");

/***/ }),

/***/ "./src/sys/system.ts":
/*!***************************!*\
  !*** ./src/sys/system.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"System\": () => (/* binding */ System)\n/* harmony export */ });\n/* harmony import */ var _dev_dev__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dev/dev */ \"./src/sys/dev/dev.ts\");\n/* harmony import */ var _vfs_vfs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vfs/vfs */ \"./src/sys/vfs/vfs.ts\");\n/* harmony import */ var _proc_proc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./proc/proc */ \"./src/sys/proc/proc.ts\");\n/* harmony import */ var _modules__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules */ \"./src/sys/modules.ts\");\n/* harmony import */ var _ns_ns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ns/ns */ \"./src/sys/ns/ns.ts\");\n/* harmony import */ var _vfs_channel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./vfs/channel */ \"./src/sys/vfs/channel.ts\");\n/* harmony import */ var _dev_root__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dev/root */ \"./src/sys/dev/root.ts\");\n/* harmony import */ var _dev_cons__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dev/cons */ \"./src/sys/dev/cons.ts\");\n/* harmony import */ var _dev_kbd__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dev/kbd */ \"./src/sys/dev/kbd.ts\");\n/* harmony import */ var _dev_serial__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./dev/serial */ \"./src/sys/dev/serial.ts\");\n/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./log */ \"./src/sys/log.ts\");\n/* harmony import */ var _colors__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./colors */ \"./src/sys/colors.ts\");\n/* harmony import */ var _dev_srv__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./dev/srv */ \"./src/sys/dev/srv.ts\");\n/* harmony import */ var _dev_bootimg__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./dev/bootimg */ \"./src/sys/dev/bootimg.ts\");\n/* harmony import */ var _dev_pipe__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./dev/pipe */ \"./src/sys/dev/pipe.ts\");\n/* harmony import */ var _dev_mount__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./dev/mount */ \"./src/sys/dev/mount.ts\");\n/* harmony import */ var _dev_cpu__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./dev/cpu */ \"./src/sys/dev/cpu.ts\");\n/* harmony import */ var _public_api__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../public/api */ \"./src/public/api.ts\");\n/* harmony import */ var _dev_env__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./dev/env */ \"./src/sys/dev/env.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * This class is the kernel of the of Possimpable. It retains the links for all the subsystems, and is passed,\n * and used by the subsystems to access each other.\n */\nclass System {\n    vfs;\n    options;\n    descriptions;\n    dev;\n    mod;\n    ns;\n    proc;\n    channels;\n    sysUser = \"root\";\n    encoder = new TextEncoder();\n    decoder = new TextDecoder();\n    current;\n    console;\n    log;\n    boottime = new Date().getTime() / 1000;\n    ktask;\n    constructor(options) {\n        this.options = options;\n        this.channels = new _vfs_channel__WEBPACK_IMPORTED_MODULE_5__.ChannelManager(this);\n        this.vfs = new _vfs_vfs__WEBPACK_IMPORTED_MODULE_1__.VirtualFileSystem(this);\n        this.dev = new _dev_dev__WEBPACK_IMPORTED_MODULE_0__.DeviceManager(this);\n        this.proc = new _proc_proc__WEBPACK_IMPORTED_MODULE_2__.ProcessManager(this);\n        this.mod = new _modules__WEBPACK_IMPORTED_MODULE_3__.ModularityManager(this);\n        this.ns = new _ns_ns__WEBPACK_IMPORTED_MODULE_4__.NamespaceManager(this);\n        this.log = new _log__WEBPACK_IMPORTED_MODULE_10__.LogManager(this);\n    }\n    async setupSystemTask() {\n        const ns = this.ns.create(null, 0);\n        const root = await this.vfs.attach(\"/\", \"\");\n        let mount = await this.vfs.cmount(root, this.channels.mkchannel(), 0, null, ns.mnt);\n        this.ktask = {\n            gid: this.sysUser, uid: this.sysUser,\n            pid: 0,\n            root: { channel: root, mount: mount },\n            pwd: { channel: root, mount: mount },\n            ns: ns,\n            files: { fileDescriptors: [] },\n            env: new Map()\n        };\n        const cpu = await this.vfs.attach(\"C\", \"\");\n        this.ktask.env.set(\"CPUPATH\", \"/dev/cpu\");\n        const dev = await this.vfs.lookup(\"/dev\", this.ktask);\n        await this.vfs.cmount(cpu, dev.channel, 0, dev.mount, ns.mnt);\n        this.current = this.ktask;\n    }\n    async boot(devices) {\n        await this.mod.installModule(_dev_root__WEBPACK_IMPORTED_MODULE_6__[\"default\"]);\n        await this.mod.installModule(_dev_cons__WEBPACK_IMPORTED_MODULE_7__[\"default\"]);\n        await this.mod.installModule(_dev_kbd__WEBPACK_IMPORTED_MODULE_8__[\"default\"]);\n        await this.mod.installModule(_dev_srv__WEBPACK_IMPORTED_MODULE_12__[\"default\"]);\n        await this.mod.installModule(_dev_serial__WEBPACK_IMPORTED_MODULE_9__[\"default\"]);\n        await this.mod.installModule(_dev_bootimg__WEBPACK_IMPORTED_MODULE_13__[\"default\"]);\n        await this.mod.installModule(_dev_pipe__WEBPACK_IMPORTED_MODULE_14__[\"default\"]);\n        await this.mod.installModule(_dev_mount__WEBPACK_IMPORTED_MODULE_15__[\"default\"]);\n        await this.mod.installModule(_dev_cpu__WEBPACK_IMPORTED_MODULE_16__[\"default\"]);\n        await this.mod.installModule(_dev_env__WEBPACK_IMPORTED_MODULE_18__[\"default\"]);\n        this.descriptions = devices;\n        await this.dev.init();\n        await this.setupSystemTask();\n        const args = Object.keys(this.options).map(x => {\n            return `${x}=${this.options[x]}`;\n        });\n        const task = await this.proc.fork(\"/boot/boot\", args, _public_api__WEBPACK_IMPORTED_MODULE_17__.ForkMode2.NEW_NAMESPACE | _public_api__WEBPACK_IMPORTED_MODULE_17__.ForkMode2.EMPTY_FD | _public_api__WEBPACK_IMPORTED_MODULE_17__.ForkMode2.CLONE_MNT | _public_api__WEBPACK_IMPORTED_MODULE_17__.ForkMode2.COPY_ENV, this.current);\n        await this.proc.wait(1, task);\n    }\n    printk(data) {\n        this.console?.channel.operations.write(this.console?.channel, this.encoder.encode(data.replace(\"\\n\", \"\\n\\r\")), -1);\n    }\n    panic(data) {\n        this.printk((0,_colors__WEBPACK_IMPORTED_MODULE_11__.red)(\"PANIC\") + \" : \" + data);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzL3N5c3RlbS50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBS0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3NzaW1waWJsZS8uL3NyYy9zeXMvc3lzdGVtLnRzP2U1OGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJRGV2aWNlRGVzY3JpcHRpb259IGZyb20gXCIuLi92bS9kZXZpY2V0cmVlXCI7XG5pbXBvcnQge0RldmljZU1hbmFnZXJ9IGZyb20gXCIuL2Rldi9kZXZcIjtcbmltcG9ydCB7VmlydHVhbEZpbGVTeXN0ZW19IGZyb20gXCIuL3Zmcy92ZnNcIjtcbmltcG9ydCB7UHJvY2Vzc01hbmFnZXJ9IGZyb20gXCIuL3Byb2MvcHJvY1wiO1xuaW1wb3J0IHtNb2R1bGFyaXR5TWFuYWdlcn0gZnJvbSBcIi4vbW9kdWxlc1wiO1xuaW1wb3J0IHtOYW1lc3BhY2VNYW5hZ2VyfSBmcm9tIFwiLi9ucy9uc1wiO1xuaW1wb3J0IHtDaGFubmVsTWFuYWdlcn0gZnJvbSBcIi4vdmZzL2NoYW5uZWxcIjtcblxuaW1wb3J0IHJvb3QgZnJvbSBcIi4vZGV2L3Jvb3RcIjtcbmltcG9ydCBjb25zIGZyb20gXCIuL2Rldi9jb25zXCI7XG5pbXBvcnQga2JkIGZyb20gXCIuL2Rldi9rYmRcIjtcbmltcG9ydCBzZXJpYWwgZnJvbSBcIi4vZGV2L3NlcmlhbFwiO1xuaW1wb3J0IHtMb2dNYW5hZ2VyfSBmcm9tIFwiLi9sb2dcIjtcbmltcG9ydCB7cmVkfSBmcm9tIFwiLi9jb2xvcnNcIjtcbmltcG9ydCBzcnYgZnJvbSBcIi4vZGV2L3NydlwiO1xuaW1wb3J0IGJvb3RpbWcgZnJvbSBcIi4vZGV2L2Jvb3RpbWdcIjtcbmltcG9ydCBwaXBlIGZyb20gXCIuL2Rldi9waXBlXCI7XG5pbXBvcnQgbW91bnQgZnJvbSBcIi4vZGV2L21vdW50XCI7XG5pbXBvcnQge0lGaWxlLCBJUHJvdG9UYXNrfSBmcm9tIFwiLi9wcm9jL3Rhc2tcIjtcbmltcG9ydCBjcHUgZnJvbSBcIi4vZGV2L2NwdVwiO1xuaW1wb3J0IHtGb3JrTW9kZTJ9IGZyb20gXCIuLi9wdWJsaWMvYXBpXCI7XG5pbXBvcnQgZW52IGZyb20gXCIuL2Rldi9lbnZcIjtcblxuXG5leHBvcnQgdHlwZSBJU3lzdGVtT3B0aW9ucyA9IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG5cbi8qKlxuICogVGhpcyBjbGFzcyBpcyB0aGUga2VybmVsIG9mIHRoZSBvZiBQb3NzaW1wYWJsZS4gSXQgcmV0YWlucyB0aGUgbGlua3MgZm9yIGFsbCB0aGUgc3Vic3lzdGVtcywgYW5kIGlzIHBhc3NlZCxcbiAqIGFuZCB1c2VkIGJ5IHRoZSBzdWJzeXN0ZW1zIHRvIGFjY2VzcyBlYWNoIG90aGVyLlxuICovXG5leHBvcnQgY2xhc3MgU3lzdGVte1xuICAgIHB1YmxpYyB2ZnM6IFZpcnR1YWxGaWxlU3lzdGVtO1xuICAgIHByaXZhdGUgb3B0aW9uczogUGFydGlhbDxJU3lzdGVtT3B0aW9ucz47XG4gICAgcHVibGljIGRlc2NyaXB0aW9ucz86IElEZXZpY2VEZXNjcmlwdGlvbltdO1xuXG4gICAgcHVibGljIGRldjogRGV2aWNlTWFuYWdlcjtcbiAgICBwdWJsaWMgbW9kOiBNb2R1bGFyaXR5TWFuYWdlcjtcbiAgICBwdWJsaWMgbnM6IE5hbWVzcGFjZU1hbmFnZXI7XG4gICAgcHVibGljIHByb2M6IFByb2Nlc3NNYW5hZ2VyO1xuICAgIHB1YmxpYyBjaGFubmVsczogQ2hhbm5lbE1hbmFnZXI7XG4gICAgcHVibGljIHN5c1VzZXIgPSBcInJvb3RcIjtcbiAgICBwdWJsaWMgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICAgIHB1YmxpYyBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7XG5cbiAgICBwdWJsaWMgY3VycmVudD86IElQcm90b1Rhc2s7XG4gICAgcHJpdmF0ZSBjb25zb2xlPzogSUZpbGU7XG4gICAgcHJpdmF0ZSBsb2c6IExvZ01hbmFnZXI7XG4gICAgYm9vdHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDA7XG4gICAga3Rhc2s/OiBJUHJvdG9UYXNrO1xuXG5cblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IFBhcnRpYWw8SVN5c3RlbU9wdGlvbnM+KXtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jaGFubmVscyA9IG5ldyBDaGFubmVsTWFuYWdlcih0aGlzKTtcbiAgICAgICAgdGhpcy52ZnMgPSBuZXcgVmlydHVhbEZpbGVTeXN0ZW0odGhpcyk7XG4gICAgICAgIHRoaXMuZGV2ID0gbmV3IERldmljZU1hbmFnZXIodGhpcyk7XG4gICAgICAgIHRoaXMucHJvYyA9IG5ldyBQcm9jZXNzTWFuYWdlcih0aGlzKTtcbiAgICAgICAgdGhpcy5tb2QgPSBuZXcgTW9kdWxhcml0eU1hbmFnZXIodGhpcyk7XG4gICAgICAgIHRoaXMubnMgPSBuZXcgTmFtZXNwYWNlTWFuYWdlcih0aGlzKTtcbiAgICAgICAgdGhpcy5sb2cgPSBuZXcgTG9nTWFuYWdlcih0aGlzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHNldHVwU3lzdGVtVGFzaygpIHtcbiAgICAgICAgY29uc3QgbnMgPSB0aGlzLm5zLmNyZWF0ZShudWxsLCAwKTtcblxuICAgICAgICBjb25zdCByb290ID0gYXdhaXQgdGhpcy52ZnMuYXR0YWNoKFwiL1wiLCBcIlwiKTtcbiAgICAgICAgbGV0IG1vdW50ID0gYXdhaXQgdGhpcy52ZnMuY21vdW50KHJvb3QsIHRoaXMuY2hhbm5lbHMubWtjaGFubmVsKCksIDAsIG51bGwsIG5zLm1udCk7XG5cbiAgICAgICAgdGhpcy5rdGFzayA9IHtcbiAgICAgICAgICAgIGdpZDogdGhpcy5zeXNVc2VyLCB1aWQ6IHRoaXMuc3lzVXNlcixcbiAgICAgICAgICAgIHBpZDogMCxcbiAgICAgICAgICAgIHJvb3Q6IHtjaGFubmVsOiByb290LCBtb3VudDogbW91bnR9LFxuICAgICAgICAgICAgcHdkOiB7Y2hhbm5lbDogcm9vdCwgbW91bnQ6IG1vdW50fSxcbiAgICAgICAgICAgIG5zOiBucyxcbiAgICAgICAgICAgIGZpbGVzOiB7ZmlsZURlc2NyaXB0b3JzOiBbXX0sXG4gICAgICAgICAgICBlbnY6IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KClcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBjcHUgPSBhd2FpdCB0aGlzLnZmcy5hdHRhY2goXCJDXCIsIFwiXCIpO1xuICAgICAgICB0aGlzLmt0YXNrLmVudi5zZXQoXCJDUFVQQVRIXCIsIFwiL2Rldi9jcHVcIik7XG4gICAgICAgIGNvbnN0IGRldiA9IGF3YWl0IHRoaXMudmZzLmxvb2t1cChcIi9kZXZcIiwgdGhpcy5rdGFzayk7XG4gICAgICAgIGF3YWl0IHRoaXMudmZzLmNtb3VudChjcHUsIGRldi5jaGFubmVsLCAwLCBkZXYubW91bnQsIG5zLm1udCk7XG5cbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5rdGFzaztcbiAgICB9XG5cbiAgICBhc3luYyBib290KGRldmljZXM6SURldmljZURlc2NyaXB0aW9uW10pe1xuICAgICAgICBhd2FpdCB0aGlzLm1vZC5pbnN0YWxsTW9kdWxlKHJvb3QpO1xuICAgICAgICBhd2FpdCB0aGlzLm1vZC5pbnN0YWxsTW9kdWxlKGNvbnMpO1xuICAgICAgICBhd2FpdCB0aGlzLm1vZC5pbnN0YWxsTW9kdWxlKGtiZCk7XG4gICAgICAgIGF3YWl0IHRoaXMubW9kLmluc3RhbGxNb2R1bGUoc3J2KTtcbiAgICAgICAgYXdhaXQgdGhpcy5tb2QuaW5zdGFsbE1vZHVsZShzZXJpYWwpO1xuICAgICAgICBhd2FpdCB0aGlzLm1vZC5pbnN0YWxsTW9kdWxlKGJvb3RpbWcpO1xuICAgICAgICBhd2FpdCB0aGlzLm1vZC5pbnN0YWxsTW9kdWxlKHBpcGUpO1xuICAgICAgICBhd2FpdCB0aGlzLm1vZC5pbnN0YWxsTW9kdWxlKG1vdW50KTtcbiAgICAgICAgYXdhaXQgdGhpcy5tb2QuaW5zdGFsbE1vZHVsZShjcHUpO1xuICAgICAgICBhd2FpdCB0aGlzLm1vZC5pbnN0YWxsTW9kdWxlKGVudik7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb25zID0gZGV2aWNlcztcbiAgICAgICAgYXdhaXQgdGhpcy5kZXYuaW5pdCgpXG4gICAgICAgIGF3YWl0IHRoaXMuc2V0dXBTeXN0ZW1UYXNrKCk7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSBPYmplY3Qua2V5cyh0aGlzLm9wdGlvbnMpLm1hcCh4ID0+IHtcbiAgICAgICAgICAgIHJldHVybiBgJHt4fT0ke3RoaXMub3B0aW9uc1t4XX1gXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHRhc2sgPSBhd2FpdCB0aGlzLnByb2MuZm9yayhcIi9ib290L2Jvb3RcIiwgYXJncywgRm9ya01vZGUyLk5FV19OQU1FU1BBQ0UgfCBGb3JrTW9kZTIuRU1QVFlfRkQgfCBGb3JrTW9kZTIuQ0xPTkVfTU5UIHwgRm9ya01vZGUyLkNPUFlfRU5WLCB0aGlzLmN1cnJlbnQhKVxuXG4gICAgICAgIGF3YWl0IHRoaXMucHJvYy53YWl0KDEsIHRhc2spO1xuICAgIH1cblxuICAgIHByaW50ayhkYXRhOiBzdHJpbmcpe1xuICAgICAgICB0aGlzLmNvbnNvbGU/LmNoYW5uZWwub3BlcmF0aW9ucy53cml0ZSEodGhpcy5jb25zb2xlPy5jaGFubmVsLCB0aGlzLmVuY29kZXIuZW5jb2RlKGRhdGEucmVwbGFjZShcIlxcblwiLCBcIlxcblxcclwiKSksIC0xKTtcbiAgICB9XG5cbiAgICBwYW5pYyhkYXRhOiBzdHJpbmcpe1xuICAgICAgICB0aGlzLnByaW50ayggcmVkKFwiUEFOSUNcIikgKyBcIiA6IFwiICsgZGF0YSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/sys/system.ts\n");

/***/ }),

/***/ "./src/sys/vfs/channel.ts":
/*!********************************!*\
  !*** ./src/sys/vfs/channel.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ChannelManager\": () => (/* binding */ ChannelManager),\n/* harmony export */   \"channel_get_cache\": () => (/* binding */ channel_get_cache),\n/* harmony export */   \"channel_set_cache\": () => (/* binding */ channel_set_cache),\n/* harmony export */   \"channelmounts\": () => (/* binding */ channelmounts)\n/* harmony export */ });\n/* harmony import */ var _public_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../public/api */ \"./src/public/api.ts\");\n\nclass ChannelManager {\n    system;\n    constructor(system) {\n        this.system = system;\n    }\n    mkchannel() {\n        return {\n            srv: \"\",\n            subsrv: 0,\n            parent: null,\n            name: \"\",\n            map: null,\n            type: _public_api__WEBPACK_IMPORTED_MODULE_0__.Type.FILE,\n            operations: {},\n            children: [],\n            mounted: 0,\n        };\n    }\n    clone(c) {\n        const nc = this.mkchannel();\n        nc.srv = c.srv;\n        nc.subsrv = c.subsrv;\n        nc.parent = c.parent;\n        nc.name = c.name;\n        nc.map = c.map;\n        nc.type = c.type;\n        nc.mounted = nc.mounted;\n        nc.operations = c.operations;\n        nc.children = [];\n        nc.mounted = c.mounted;\n        return nc;\n    }\n}\nfunction channel_get_cache(parent, name) {\n    return parent.children.find(x => x.name == name) || null;\n}\nfunction channel_set_cache(parent, c) {\n    parent.children.push(c);\n}\nfunction* channelmounts(c, ns) {\n    for (const mount of ns.mounts) {\n        if (mount.mount.mountpoint == c) {\n            yield mount.mount;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzL3Zmcy9jaGFubmVsLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBSUE7QUErQkE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3NzaW1waWJsZS8uL3NyYy9zeXMvdmZzL2NoYW5uZWwudHM/ZmExZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0lEaXJlY3RvcnlFbnRyeX0gZnJvbSBcIi4vb3BlcmF0aW9uc1wiO1xuaW1wb3J0IHtJTW91bnQsIElNb3VudE5TfSBmcm9tIFwiLi9tb3VudFwiO1xuaW1wb3J0IHtDaGFubmVsfSBmcm9tIFwiZGlhZ25vc3RpY3NfY2hhbm5lbFwiO1xuaW1wb3J0IHtTeXN0ZW19IGZyb20gXCIuLi9zeXN0ZW1cIjtcbmltcG9ydCB7Q3JlYXRlTW9kZSwgSVN0YXQsIE9wZW5Nb2RlLCBUeXBlfSBmcm9tIFwiLi4vLi4vcHVibGljL2FwaVwiO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNoYW5uZWwge1xuICAgIHNydjogc3RyaW5nO1xuICAgIHN1YnNydjogbnVtYmVyO1xuICAgIHBhcmVudDogSUNoYW5uZWwgfCBudWxsO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBtYXA6IGFueTtcbiAgICB0eXBlOiBUeXBlLFxuICAgIG9wZXJhdGlvbnM6IFBhcnRpYWw8SU9wZXJhdGlvbnM+O1xuICAgIGNoaWxkcmVuOiBJQ2hhbm5lbFtdO1xuICAgIG1vdW50ZWQ6IDAsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9wZXJhdGlvbnMge1xuICAgIGF0dGFjaDogKG9wdGlvbnM6YW55LCBzeXN0ZW06IFN5c3RlbSkgPT4gUHJvbWlzZTxJQ2hhbm5lbD47XG4gICAgZGV0dGFjaDogKGM6IElDaGFubmVsKSA9PiB2b2lkO1xuICAgIG9wZW46IChjOiBJQ2hhbm5lbCwgbW9kZTogT3Blbk1vZGUpID0+IFByb21pc2U8SUNoYW5uZWw+O1xuICAgIGNsb3NlOiAoYzogSUNoYW5uZWwpID0+IHZvaWQ7XG4gICAgY3JlYXRlOiAoZGlyOiBJQ2hhbm5lbCwgYzpJQ2hhbm5lbCwgbmFtZTogc3RyaW5nLCBtb2RlOiBDcmVhdGVNb2RlKSA9PiB2b2lkO1xuICAgIHJlbW92ZTogKGM6IElDaGFubmVsKSA9PiB2b2lkO1xuICAgIHNldHN0YXQ6IChjOiBJQ2hhbm5lbCwgc3RhdDogSVN0YXQpID0+IHZvaWQ7XG4gICAgZ2V0c3RhdDogKGM6IElDaGFubmVsKSA9PiBQcm9taXNlPElTdGF0PjtcbiAgICBzZXRhdHRyOiAoYzogSUNoYW5uZWwsIG5hbWU6IHN0cmluZywgYXR0cjogc3RyaW5nKSA9PiB2b2lkO1xuICAgIGdldGF0dHI6IChjOiBJQ2hhbm5lbCwgbmFtZTogc3RyaW5nKSA9PiBQcm9taXNlPHN0cmluZz5cbiAgICByZWFkOiAoYzogSUNoYW5uZWwsIGNvdW50OiBudW1iZXIsIG9mZnNldDogbnVtYmVyKSA9PiBQcm9taXNlPFVpbnQ4QXJyYXk+O1xuICAgIHdyaXRlOiAoYzogSUNoYW5uZWwsIGJ1ZjogVWludDhBcnJheSwgb2Zmc2V0OiBudW1iZXIpID0+IHZvaWQ7XG4gICAgd2FsazogKGRpcjogSUNoYW5uZWwsIGM6IElDaGFubmVsLCBuYW1lOiBzdHJpbmcpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBDaGFubmVsTWFuYWdlcntcbiAgICBwcml2YXRlIHN5c3RlbTogU3lzdGVtO1xuXG4gICAgY29uc3RydWN0b3Ioc3lzdGVtOiBTeXN0ZW0pIHtcbiAgICAgICAgdGhpcy5zeXN0ZW0gPSBzeXN0ZW07XG4gICAgfVxuXG4gICAgbWtjaGFubmVsKCk6IElDaGFubmVse1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3J2OiBcIlwiLFxuICAgICAgICAgICAgc3Vic3J2OiAwLFxuICAgICAgICAgICAgcGFyZW50OiBudWxsLFxuICAgICAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgICAgIG1hcDogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6IFR5cGUuRklMRSxcbiAgICAgICAgICAgIG9wZXJhdGlvbnM6IHt9LFxuICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICAgICAgbW91bnRlZDogMCxcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsb25lKGM6IElDaGFubmVsKXtcbiAgICAgICAgY29uc3QgbmMgPSB0aGlzLm1rY2hhbm5lbCgpO1xuICAgICAgICBuYy5zcnYgPSBjLnNydlxuICAgICAgICBuYy5zdWJzcnYgPSBjLnN1YnNydlxuICAgICAgICBuYy5wYXJlbnQgPSBjLnBhcmVudFxuICAgICAgICBuYy5uYW1lID0gYy5uYW1lXG4gICAgICAgIG5jLm1hcCA9IGMubWFwXG4gICAgICAgIG5jLnR5cGUgPSBjLnR5cGVcbiAgICAgICAgbmMubW91bnRlZCA9IG5jLm1vdW50ZWQ7XG4gICAgICAgIG5jLm9wZXJhdGlvbnMgPSBjLm9wZXJhdGlvbnNcbiAgICAgICAgbmMuY2hpbGRyZW4gPSBbXVxuICAgICAgICBuYy5tb3VudGVkID0gYy5tb3VudGVkXG4gICAgICAgIHJldHVybiBuYztcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGFubmVsX2dldF9jYWNoZShwYXJlbnQ6IElDaGFubmVsLCBuYW1lOiBzdHJpbmcpOiBJQ2hhbm5lbHxudWxse1xuICAgIHJldHVybiBwYXJlbnQuY2hpbGRyZW4uZmluZCh4ID0+IHgubmFtZSA9PSBuYW1lICkgfHwgbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5uZWxfc2V0X2NhY2hlKHBhcmVudDogSUNoYW5uZWwsIGM6IElDaGFubmVsKXtcbiAgICBwYXJlbnQuY2hpbGRyZW4ucHVzaChjKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uKiBjaGFubmVsbW91bnRzKGM6IElDaGFubmVsLCBuczogSU1vdW50TlMpOiBHZW5lcmF0b3I8SU1vdW50PntcbiAgICBmb3IgKGNvbnN0IG1vdW50IG9mIG5zLm1vdW50cykge1xuICAgICAgICBpZihtb3VudC5tb3VudC5tb3VudHBvaW50ID09IGMpe1xuICAgICAgICAgICAgeWllbGQgbW91bnQubW91bnQ7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/sys/vfs/channel.ts\n");

/***/ }),

/***/ "./src/sys/vfs/mount.ts":
/*!******************************!*\
  !*** ./src/sys/vfs/mount.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MountManager\": () => (/* binding */ MountManager)\n/* harmony export */ });\n/* harmony import */ var _public_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../public/api */ \"./src/public/api.ts\");\n\nclass MountManager {\n    namespaces = [];\n    #system;\n    constructor(kernel) {\n        this.#system = kernel;\n    }\n    createNS(parent, clone) {\n        let m = {\n            parent: parent,\n            mounts: [],\n            children: []\n        };\n        this.namespaces.push(m);\n        if (parent) {\n            if (clone) {\n                for (const mount of parent.mounts) {\n                    mount.ns++;\n                    m.mounts.push(mount);\n                }\n                parent.children.push(m);\n            }\n        }\n        return m;\n    }\n    async deleteNS(ns) {\n        for (const mount of ns.mounts) {\n            if (--mount.ns == 0) {\n                await this.#system.vfs.unmount(mount.mount, ns, mount.mount.root);\n            }\n        }\n        if (ns.parent) {\n            const index = ns.parent.children.indexOf(ns, 0);\n            if (index > -1) {\n                ns.parent.mounts.splice(index, 1);\n            }\n        }\n        const index = this.namespaces.indexOf(ns, 0);\n        if (index > -1) {\n            this.namespaces.splice(index, 1);\n        }\n    }\n    create(mountpoint, root, parent, flags, ns) {\n        let parentMount = ns.mounts.find(x => x.mount == parent) || null;\n        const vfsmount = {\n            ns: 1,\n            parent: parentMount,\n            mount: {\n                parent: parent,\n                root: root,\n                mountpoint,\n            },\n            children: [],\n        };\n        switch (flags) {\n            case _public_api__WEBPACK_IMPORTED_MODULE_0__.MountType.REPL:\n            case _public_api__WEBPACK_IMPORTED_MODULE_0__.MountType.BEFORE:\n                ns.mounts.unshift(vfsmount);\n                break;\n            case _public_api__WEBPACK_IMPORTED_MODULE_0__.MountType.AFTER:\n                ns.mounts.push(vfsmount);\n                break;\n        }\n        if (parent) {\n            parentMount.children.push(vfsmount);\n        }\n        mountpoint.mounted++;\n        return vfsmount.mount;\n    }\n    delete(mountpoint, root, ns) {\n        for (let i of ns.mounts) {\n            if (i.mount.root == root && i.mount.mountpoint == mountpoint) {\n                const a = i.parent?.children;\n                let index = a.indexOf(i);\n                if (index > -1) {\n                    a.splice(index, 1);\n                }\n                index = ns.mounts.indexOf(i);\n                if (index > -1) {\n                    ns.mounts.splice(index, 1);\n                }\n                i.mount.mountpoint.mounted--;\n                return i.mount.root;\n            }\n        }\n        throw \"ERROR\";\n    }\n    lookupMountpoint(mount) {\n        return {\n            channel: mount.mountpoint,\n            mount: mount.parent?.parent\n        };\n    }\n    lookup(path, ns) {\n        for (let pathElement of ns.mounts) {\n            if (pathElement.mount.mountpoint == path.channel && pathElement.parent?.mount == path.mount) {\n                return {\n                    channel: pathElement.mount.root,\n                    mount: pathElement.mount\n                };\n            }\n        }\n        return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3lzL3Zmcy9tb3VudC50cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUdBO0FBcUJBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3NzaW1waWJsZS8uL3NyYy9zeXMvdmZzL21vdW50LnRzPzVhMWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJQ2hhbm5lbH0gZnJvbSBcIi4vY2hhbm5lbFwiO1xuaW1wb3J0IHtJUGF0aH0gZnJvbSBcIi4vcGF0aFwiO1xuaW1wb3J0IHtTeXN0ZW19IGZyb20gXCIuLi9zeXN0ZW1cIjtcbmltcG9ydCB7TW91bnRUeXBlfSBmcm9tIFwiLi4vLi4vcHVibGljL2FwaVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElNb3VudCB7XG4gICAgcm9vdDogSUNoYW5uZWw7XG4gICAgcGFyZW50OiBJTW91bnR8bnVsbDtcbiAgICBtb3VudHBvaW50OiBJQ2hhbm5lbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTW91bnRFbnRyeXtcbiAgICBuczogbnVtYmVyO1xuICAgIHBhcmVudDogSU1vdW50RW50cnl8bnVsbDtcbiAgICBtb3VudDogSU1vdW50O1xuICAgIGNoaWxkcmVuOiBJTW91bnRFbnRyeVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElNb3VudE5Te1xuICAgIHBhcmVudDpJTW91bnROU3xudWxsO1xuICAgIG1vdW50czpJTW91bnRFbnRyeVtdXG4gICAgY2hpbGRyZW46SU1vdW50TlNbXVxufVxuXG5leHBvcnQgY2xhc3MgTW91bnRNYW5hZ2Vye1xuICAgIG5hbWVzcGFjZXM6SU1vdW50TlNbXSA9IFtdO1xuICAgICNzeXN0ZW06IFN5c3RlbTtcblxuICAgIGNvbnN0cnVjdG9yKGtlcm5lbDogU3lzdGVtKSB7XG4gICAgICAgIHRoaXMuI3N5c3RlbSA9IGtlcm5lbFxuICAgIH1cblxuICAgIGNyZWF0ZU5TKHBhcmVudDogSU1vdW50TlN8bnVsbCwgY2xvbmU6Ym9vbGVhbik6IElNb3VudE5Te1xuICAgICAgICBsZXQgbTpJTW91bnROUyA9IHtcbiAgICAgICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICAgICAgbW91bnRzOiBbXSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXVxuICAgICAgICB9XG4gICAgICAgIHRoaXMubmFtZXNwYWNlcy5wdXNoKG0pO1xuICAgICAgICBpZihwYXJlbnQpe1xuICAgICAgICAgICAgaWYoY2xvbmUpe1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbW91bnQgb2YgcGFyZW50Lm1vdW50cykge1xuICAgICAgICAgICAgICAgICAgICBtb3VudC5ucysrO1xuICAgICAgICAgICAgICAgICAgICBtLm1vdW50cy5wdXNoKG1vdW50KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwYXJlbnQuY2hpbGRyZW4ucHVzaChtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWxldGVOUyhuczogSU1vdW50TlMpIHtcbiAgICAgICAgZm9yIChjb25zdCBtb3VudCBvZiBucy5tb3VudHMpIHtcbiAgICAgICAgICAgIGlmICgtLW1vdW50Lm5zID09IDApIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLiNzeXN0ZW0udmZzLnVubW91bnQobW91bnQubW91bnQsIG5zLCBtb3VudC5tb3VudC5yb290KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobnMucGFyZW50KSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IG5zLnBhcmVudC5jaGlsZHJlbi5pbmRleE9mKG5zLCAwKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgbnMucGFyZW50Lm1vdW50cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5uYW1lc3BhY2VzLmluZGV4T2YobnMsIDApO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgdGhpcy5uYW1lc3BhY2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGUobW91bnRwb2ludDogSUNoYW5uZWwsIHJvb3Q6IElDaGFubmVsLCBwYXJlbnQ6IElNb3VudHxudWxsLCBmbGFnczpNb3VudFR5cGUsIG5zOklNb3VudE5TKTogSU1vdW50e1xuICAgICAgICBsZXQgcGFyZW50TW91bnQ6IElNb3VudEVudHJ5fG51bGwgPSBucy5tb3VudHMuZmluZCh4ID0+IHgubW91bnQgPT0gcGFyZW50KSB8fCBudWxsO1xuXG4gICAgICAgIGNvbnN0IHZmc21vdW50OklNb3VudEVudHJ5ID0ge1xuICAgICAgICAgICAgbnM6IDEsXG4gICAgICAgICAgICBwYXJlbnQ6IHBhcmVudE1vdW50LFxuICAgICAgICAgICAgbW91bnQ6IHtcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgICAgICAgICByb290OiByb290LFxuICAgICAgICAgICAgICAgIG1vdW50cG9pbnQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoZmxhZ3MpIHtcbiAgICAgICAgICAgIGNhc2UgTW91bnRUeXBlLlJFUEw6XG4gICAgICAgICAgICBjYXNlIE1vdW50VHlwZS5CRUZPUkU6XG4gICAgICAgICAgICAgICAgbnMubW91bnRzLnVuc2hpZnQodmZzbW91bnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBNb3VudFR5cGUuQUZURVI6XG4gICAgICAgICAgICAgICAgbnMubW91bnRzLnB1c2godmZzbW91bnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYocGFyZW50KXtcbiAgICAgICAgICAgIHBhcmVudE1vdW50IS5jaGlsZHJlbi5wdXNoKHZmc21vdW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1vdW50cG9pbnQubW91bnRlZCsrO1xuICAgICAgICByZXR1cm4gdmZzbW91bnQubW91bnQ7XG4gICAgfVxuXG4gICAgZGVsZXRlKG1vdW50cG9pbnQ6IElDaGFubmVsLCByb290OiBJQ2hhbm5lbCwgbnM6SU1vdW50TlMpe1xuICAgICAgICBmb3IgKGxldCBpIG9mIG5zLm1vdW50cyl7XG4gICAgICAgICAgICBpZihpLm1vdW50LnJvb3QgPT0gcm9vdCAmJiBpLm1vdW50Lm1vdW50cG9pbnQgPT0gbW91bnRwb2ludCl7XG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IGkucGFyZW50Py5jaGlsZHJlbiE7XG4gICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gYS5pbmRleE9mKGkpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpbmRleCA9IG5zLm1vdW50cy5pbmRleE9mKGkpXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgbnMubW91bnRzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaS5tb3VudC5tb3VudHBvaW50Lm1vdW50ZWQtLTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBpLm1vdW50LnJvb3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgXCJFUlJPUlwiO1xuICAgIH1cblxuICAgIGxvb2t1cE1vdW50cG9pbnQobW91bnQ6IElNb3VudCk6IElQYXRofHVuZGVmaW5lZHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNoYW5uZWw6IG1vdW50Lm1vdW50cG9pbnQsXG4gICAgICAgICAgICBtb3VudDogbW91bnQucGFyZW50Py5wYXJlbnQhXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsb29rdXAocGF0aDogSVBhdGgsIG5zOiBJTW91bnROUyk6IElQYXRofG51bGwge1xuICAgICAgICBmb3IgKGxldCBwYXRoRWxlbWVudCBvZiBucy5tb3VudHMpIHtcbiAgICAgICAgICAgIGlmKHBhdGhFbGVtZW50Lm1vdW50Lm1vdW50cG9pbnQgPT0gcGF0aC5jaGFubmVsICYmIHBhdGhFbGVtZW50LnBhcmVudD8ubW91bnQgPT0gcGF0aC5tb3VudCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbDogcGF0aEVsZW1lbnQubW91bnQucm9vdCxcbiAgICAgICAgICAgICAgICAgICAgbW91bnQ6IHBhdGhFbGVtZW50Lm1vdW50XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbn1cblxuXG5cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/sys/vfs/mount.ts\n");

/***/ }),

/***/ "./src/sys/vfs/namei.ts":
/*!******************************!*\
  !*** ./src/sys/vfs/namei.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Last\": () => (/* binding */ Last),\n/* harmony export */   \"Lookup\": () => (/* binding */ Lookup),\n/* harmony export */   \"NameI\": () => (/* binding */ NameI)\n/* harmony export */ });\n/* harmony import */ var _sys_vfs_channel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../sys/vfs/channel */ \"./src/sys/vfs/channel.ts\");\n/* harmony import */ var _public_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../public/api */ \"./src/public/api.ts\");\n\n\nvar Last;\n(function (Last) {\n    Last[Last[\"NORM\"] = 0] = \"NORM\";\n    Last[Last[\"ROOT\"] = 1] = \"ROOT\";\n    Last[Last[\"DOT\"] = 2] = \"DOT\";\n    Last[Last[\"DOTDOT\"] = 3] = \"DOTDOT\";\n    Last[Last[\"BIND\"] = 4] = \"BIND\";\n})(Last || (Last = {}));\nvar Lookup;\n(function (Lookup) {\n    // If the last component is a symbolic link, interpret (follow) it\n    Lookup[Lookup[\"FOLLOW\"] = 1] = \"FOLLOW\";\n    // The last component must be a directory\n    Lookup[Lookup[\"DIRECTORY\"] = 2] = \"DIRECTORY\";\n    // There are still filenames to be examined in the pathname\n    Lookup[Lookup[\"CONTINUE\"] = 4] = \"CONTINUE\";\n    // There are still filenames to be examined in the pathname\n    Lookup[Lookup[\"PARENT\"] = 16] = \"PARENT\";\n    // Do not consider the emulated root directory (useless in the 80 x 86 architecture)\n    Lookup[Lookup[\"NOALT\"] = 64] = \"NOALT\";\n    Lookup[Lookup[\"REVAL\"] = 64] = \"REVAL\";\n    // Intent is to open a file\n    Lookup[Lookup[\"OPEN\"] = 256] = \"OPEN\";\n    // Intent is to create a file (if it doesn’t exist)\n    Lookup[Lookup[\"CREATE\"] = 512] = \"CREATE\";\n    // Intent is to check user’s permission for a file\n    Lookup[Lookup[\"ACCESS\"] = 1024] = \"ACCESS\";\n    Lookup[Lookup[\"RENAME_TARGET\"] = 2048] = \"RENAME_TARGET\";\n    Lookup[Lookup[\"JUMPED\"] = 4096] = \"JUMPED\";\n    Lookup[Lookup[\"ROOT\"] = 8192] = \"ROOT\";\n    Lookup[Lookup[\"EMPTY\"] = 16384] = \"EMPTY\";\n})(Lookup || (Lookup = {}));\nclass NameI {\n    system;\n    constructor(system) {\n        this.system = system;\n    }\n    async pathInit(name, flags, task, root) {\n        const nd = {\n            last: \"\",\n            ns: task.ns.mnt,\n            lastType: Last.ROOT,\n            flags: flags | Lookup.JUMPED,\n            depth: 0,\n            root: {\n                channel: task.root.channel,\n                mount: task.root.mount\n            },\n            path: {\n                channel: task.pwd.channel,\n                mount: task.pwd.mount\n            }\n        };\n        if (flags & Lookup.ROOT) {\n            let inode = nd.root.channel;\n            if (name.length) {\n                if (!inode?.operations.walk) {\n                    throw new _public_api__WEBPACK_IMPORTED_MODULE_1__.PError(_public_api__WEBPACK_IMPORTED_MODULE_1__.Status.ENOTDIR);\n                }\n                nd.path.channel = task.root.channel;\n                nd.path.mount = task.root.mount;\n            }\n        }\n        switch (name[0]) {\n            case '/':\n                nd.path.channel = task.root.channel;\n                nd.path.mount = task.root.mount;\n                break;\n            default:\n                nd.path.channel = task.pwd.channel;\n                nd.path.mount = task.pwd.mount;\n        }\n        if (root) {\n            nd.path.channel = root;\n            nd.path.mount = null;\n        }\n        nd.channel = nd.path.channel;\n        return nd;\n    }\n    async lookupLast(nd) {\n        if (nd.lastType == Last.NORM && nd.last[nd.lastLen])\n            nd.flags |= Lookup.FOLLOW | Lookup.DIRECTORY;\n        nd.flags &= ~Lookup.PARENT;\n        await this.walk_component(nd, nd.last, nd.lastType, nd.flags);\n    }\n    async pathLookup(name, flags, task, root) {\n        let nd = await this.pathInit(name, flags, task, root);\n        await this.linkPathLookup(name, nd);\n        if (!(flags & Lookup.PARENT)) {\n            await this.lookupLast(nd);\n        }\n        return nd;\n    }\n    async linkPathLookup(name, nd) {\n        let pos = 0;\n        let lookup_flags = nd.flags;\n        while (name[pos] == \"/\")\n            pos++;\n        if (pos == name.length) {\n            return;\n        }\n        let s = pos;\n        while (true) {\n            let type;\n            let this_name;\n            nd.flags |= Lookup.CONTINUE;\n            // TODO: check permissions\n            let start = pos;\n            do {\n                pos++;\n            } while (name[pos] != \"/\" && pos < name.length);\n            this_name = name.substring(start, pos);\n            type = Last.NORM;\n            if (this_name[0] == \".\")\n                switch (this_name.length) {\n                    case 2:\n                        if (this_name[1] == \".\") {\n                            type = Last.DOTDOT;\n                            nd.flags |= Lookup.JUMPED;\n                        }\n                        break;\n                    case 1:\n                        type = Last.DOT;\n                }\n            if (type == Last.NORM) {\n                let parent = nd.path.channel;\n                nd.flags &= ~Lookup.JUMPED;\n            }\n            if (pos == name.length) {\n                nd.flags &= lookup_flags | ~Lookup.CONTINUE;\n                nd.last = this_name;\n                nd.lastLen = pos;\n                nd.lastType = type;\n                return;\n            }\n            while (name[pos] == \"/\" && pos < name.length)\n                pos++;\n            if (pos == name.length) {\n                nd.flags &= lookup_flags | ~Lookup.CONTINUE;\n                nd.last = this_name;\n                nd.lastLen = pos;\n                nd.lastType = type;\n                return;\n            }\n            await this.walk_component(nd, this_name, type, Lookup.FOLLOW);\n            // TODO: check symlink\n            if (!nd.channel.operations.walk) {\n                throw new _public_api__WEBPACK_IMPORTED_MODULE_1__.PError(_public_api__WEBPACK_IMPORTED_MODULE_1__.Status.ENOTDIR);\n            }\n        }\n    }\n    follow_up(path) {\n        let parent;\n        parent = path.mount.parent;\n        if (!parent) {\n            return 0;\n        }\n        let parentpath = this.system.vfs.mounts.lookupMountpoint(path.mount);\n        path.channel = parentpath?.channel;\n        path.mount = parentpath?.mount;\n        return 1;\n    }\n    follow_dotdot(nd) {\n        while (1) {\n            let od = nd.path.channel;\n            if (nd.path.channel == nd.root.channel &&\n                nd.path.mount == nd.root.mount) {\n                break;\n            }\n            if (nd.path.channel != nd.path.mount?.root) {\n                nd.path.channel = nd.path.channel.parent;\n                break;\n            }\n            debugger;\n            if (!this.follow_up(nd.path)) {\n                break;\n            }\n        }\n        this.followMount(nd);\n        nd.channel = nd.path.channel;\n    }\n    handle_dots(nd, type) {\n        if (type == Last.DOTDOT) {\n            this.follow_dotdot(nd);\n        }\n        return;\n    }\n    async walk_component(nd, name, type, flags) {\n        if (type != Last.NORM) {\n            return this.handle_dots(nd, type);\n        }\n        await this.do_lookup(nd, name);\n    }\n    async do_lookup(nd, component) {\n        if (component[0] == \"#\") {\n            nd.path.channel = await this.system.dev.getDevice(component.substring(1)).operations.attach(\"\", this.system);\n            nd.path.mount = null;\n            return;\n        }\n        let c = (0,_sys_vfs_channel__WEBPACK_IMPORTED_MODULE_0__.channel_get_cache)(nd.path.channel, component);\n        if (!c) {\n            if (!nd.path.channel.parent) {\n                if (nd.path.mount) {\n                    let m = this.system.vfs.mounts.lookupMountpoint(nd.path.mount);\n                    c = null;\n                    for (const mount of (0,_sys_vfs_channel__WEBPACK_IMPORTED_MODULE_0__.channelmounts)(m?.channel, nd.ns)) {\n                        try {\n                            let ch = (0,_sys_vfs_channel__WEBPACK_IMPORTED_MODULE_0__.channel_get_cache)(mount.root, component);\n                            if (!ch) {\n                                ch = this.system.channels.clone(mount.root);\n                                await mount.root.operations.walk?.(mount.root, ch, component);\n                                (0,_sys_vfs_channel__WEBPACK_IMPORTED_MODULE_0__.channel_set_cache)(mount.root, ch);\n                            }\n                            c = ch;\n                            break;\n                        }\n                        catch (e) {\n                            continue;\n                        }\n                    }\n                    if (c == null) {\n                        throw new _public_api__WEBPACK_IMPORTED_MODULE_1__.PError(_public_api__WEBPACK_IMPORTED_MODULE_1__.Status.ENOENT);\n                    }\n                }\n                else {\n                    c = this.system.channels.clone(nd.path.channel);\n                    await nd.path.channel.operations.walk?.(nd.path.channel, c, component);\n                    (0,_sys_vfs_channel__WEBPACK_IMPORTED_MODULE_0__.channel_set_cache)(nd.path.channel, c);\n                }\n            }\n            else {\n                c = this.system.channels.clone(nd.path.channel);\n                await nd.path.channel.operations.walk?.(nd.path.channel, c, component);\n                (0,_sys_vfs_channel__WEBPACK_IMPORTED_MODULE_0__.channel_set_cache)(nd.path.channel, c);\n            }\n        }\n        nd.path.channel = c;\n        this.followMount(nd);\n    }\n    followMount(nd) {\n        if (nd.path.channel.mounted) {\n            const l = this.system.vfs.mounts.lookup(nd.path, nd.ns);\n            if (l) {\n                nd.path.channel = l.channel;\n                nd.path.mount = l.mount;\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/sys/vfs/namei.ts\n");

/***/ }),

/***/ "./src/sys/vfs/vfs.ts":
/*!****************************!*\
  !*** ./src/sys/vfs/vfs.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"VirtualFileSystem\": () => (/* binding */ VirtualFileSystem)\n/* harmony export */ });\n/* harmony import */ var _mount__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mount */ \"./src/sys/vfs/mount.ts\");\n/* harmony import */ var _channel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./channel */ \"./src/sys/vfs/channel.ts\");\n/* harmony import */ var _namei__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./namei */ \"./src/sys/vfs/namei.ts\");\n/* harmony import */ var _public_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../public/api */ \"./src/public/api.ts\");\n/* harmony import */ var _shared_struct__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../shared/struct */ \"./src/shared/struct.ts\");\n\n\n\n\n\nconst DIV = \"/\";\nclass VirtualFileSystem {\n    system;\n    mounts;\n    namei;\n    constructor(kernel) {\n        this.system = kernel;\n        this.mounts = new _mount__WEBPACK_IMPORTED_MODULE_0__.MountManager(this.system);\n        this.namei = new _namei__WEBPACK_IMPORTED_MODULE_2__.NameI(this.system);\n    }\n    async attach(id, options) {\n        if (this.system.dev.getDevice(id).operations.attach) {\n            return await this.system.dev.getDevice(id).operations.attach(options, this.system);\n        }\n        throw new _public_api__WEBPACK_IMPORTED_MODULE_3__.PError(_public_api__WEBPACK_IMPORTED_MODULE_3__.Status.EPERM);\n    }\n    async cmount(newc, oldc, flags, parent, ns) {\n        if (!oldc.parent && parent) {\n            // might be a root of a mounted point\n            let p = this.system.vfs.mounts.lookupMountpoint(parent);\n            oldc = p?.channel;\n            parent = p?.mount;\n        }\n        let vfsmnt = this.mounts.create(oldc, newc, parent, flags, ns);\n        return vfsmnt;\n    }\n    async unmount(mount, ns, oldc) {\n        if (oldc) {\n            this.mounts.delete(oldc, mount.root, ns);\n        }\n        else {\n            for (const m of (0,_channel__WEBPACK_IMPORTED_MODULE_1__.channelmounts)(mount.root, ns)) {\n                this.mounts.delete(mount.mountpoint, mount.root, ns);\n            }\n        }\n        return;\n    }\n    async lookup(path, task, root) {\n        const nd = await this.namei.pathLookup(path, 0, task, root);\n        return nd.path;\n    }\n    async open(path, mode) {\n        if (path.channel) {\n            if (path.channel.operations.open) {\n                path.channel = await path.channel.operations.open(path.channel, mode);\n            }\n            return {\n                position: 0,\n                channel: path.channel\n            };\n        }\n        throw new _public_api__WEBPACK_IMPORTED_MODULE_3__.PError(_public_api__WEBPACK_IMPORTED_MODULE_3__.Status.ENOENT);\n    }\n    path(path, task) {\n        let buf = \"\";\n        let p = path;\n        while (p) {\n            let entry = p.channel;\n            let mount = p.mount;\n            while (entry.parent != null && entry != task.root.channel) {\n                buf = \"/\" + entry.name + buf;\n                entry = entry.parent;\n            }\n            if (entry != task.root.channel) {\n                p = this.system.vfs.mounts.lookupMountpoint(mount);\n            }\n            else {\n                return buf.length ? buf : \"/\";\n            }\n        }\n        return buf.length ? buf : \"/\";\n    }\n    findRoot(path) {\n        let p = path;\n        let entry = p.channel;\n        let mount = p.mount;\n        while (p) {\n            entry = p.channel;\n            mount = p.mount;\n            while (entry.parent != null) {\n                entry = entry.parent;\n            }\n            p = this.system.vfs.mounts.lookupMountpoint(mount);\n        }\n        return { mount: mount, channel: entry };\n    }\n    async create(path, name, mode) {\n        if (path.channel) {\n            if (path.channel.operations.create) {\n                const c = this.system.channels.clone(path.channel);\n                path.channel.operations.create(path.channel, c, name, mode);\n                return {\n                    position: 0,\n                    channel: c\n                };\n            }\n            else {\n                throw new _public_api__WEBPACK_IMPORTED_MODULE_3__.PError(_public_api__WEBPACK_IMPORTED_MODULE_3__.Status.EPERM);\n            }\n        }\n        else {\n            throw new _public_api__WEBPACK_IMPORTED_MODULE_3__.PError(_public_api__WEBPACK_IMPORTED_MODULE_3__.Status.ENOENT);\n        }\n    }\n    async close(f) {\n        if (f.channel.operations.close) {\n            await f.channel.operations.close(f.channel);\n        }\n    }\n    async dirread(channel, task) {\n        let a = [];\n        let m = task.ns.mnt.mounts.find(x => x.mount.root == channel);\n        if (m) {\n            for (const mount of (0,_channel__WEBPACK_IMPORTED_MODULE_1__.channelmounts)(m.mount.mountpoint, task.ns.mnt)) {\n                if (mount.root.operations.read) {\n                    const buf = await mount.root.operations.read(mount.root, -1, 0);\n                    a.push(...(0,_shared_struct__WEBPACK_IMPORTED_MODULE_4__.unpackA)(_shared_struct__WEBPACK_IMPORTED_MODULE_4__.unpackStat)(buf, 0)[0]);\n                }\n                else {\n                    debugger;\n                    throw new _public_api__WEBPACK_IMPORTED_MODULE_3__.PError(_public_api__WEBPACK_IMPORTED_MODULE_3__.Status.EPERM);\n                }\n            }\n        }\n        else {\n            const buf = await channel.operations.read(channel, -1, 0);\n            a = (0,_shared_struct__WEBPACK_IMPORTED_MODULE_4__.unpackA)(_shared_struct__WEBPACK_IMPORTED_MODULE_4__.unpackStat)(buf, 0)[0];\n        }\n        a.sort((a, b) => {\n            if (a.name > b.name) {\n                return -1;\n            }\n            if (b.name > a.name) {\n                return 1;\n            }\n            return 0;\n        });\n        if (channel.operations.getstat) {\n            a.unshift(await channel.operations.getstat(channel));\n        }\n        else\n            throw new _public_api__WEBPACK_IMPORTED_MODULE_3__.PError(_public_api__WEBPACK_IMPORTED_MODULE_3__.Status.EPERM);\n        const parent = channel.parent ? channel.parent : channel;\n        if (parent.operations.getstat) {\n            a.unshift(await parent.operations.getstat(parent));\n        }\n        else\n            throw new _public_api__WEBPACK_IMPORTED_MODULE_3__.PError(_public_api__WEBPACK_IMPORTED_MODULE_3__.Status.EPERM);\n        return a;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/sys/vfs/vfs.ts\n");

/***/ }),

/***/ "./src/vm/devicetree.ts":
/*!******************************!*\
  !*** ./src/vm/devicetree.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DeviceDetail\": () => (/* binding */ DeviceDetail),\n/* harmony export */   \"discover\": () => (/* binding */ discover)\n/* harmony export */ });\nfunction DeviceDetail(id, properties) {\n    return {\n        id,\n        properties,\n    };\n}\nfunction discover(attach) {\n    return attach;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdm0vZGV2aWNldHJlZS50cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Bvc3NpbXBpYmxlLy4vc3JjL3ZtL2RldmljZXRyZWUudHM/ZTBjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIElEZXZpY2VQcm9wZXJ0aWVze1xuICAgIGNvbXBhdGliaWxpdHk6IHN0cmluZ1tdXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURldmljZURlc2NyaXB0aW9ue1xuICAgIGlkOiBzdHJpbmcsXG4gICAgcHJvcGVydGllczogSURldmljZVByb3BlcnRpZXNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIERldmljZURldGFpbDxUIGV4dGVuZHMgSURldmljZVByb3BlcnRpZXM+KGlkOiBzdHJpbmcsIHByb3BlcnRpZXM6IFQpOiBJRGV2aWNlRGVzY3JpcHRpb257XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaWQsXG4gICAgICAgIHByb3BlcnRpZXMsXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlzY292ZXIoYXR0YWNoOiBJRGV2aWNlRGVzY3JpcHRpb25bXSk6IElEZXZpY2VEZXNjcmlwdGlvbltde1xuICAgIHJldHVybiBhdHRhY2g7XG59XG5cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/vm/devicetree.ts\n");

/***/ }),

/***/ "./src/vm/vm.ts":
/*!**********************!*\
  !*** ./src/vm/vm.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"VirtualMachine\": () => (/* binding */ VirtualMachine)\n/* harmony export */ });\nclass VirtualMachine {\n    devices;\n    constructor(ds) {\n        this.devices = ds;\n    }\n    async boot(kernel) {\n        return await kernel.boot(this.devices);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdm0vdm0udHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Bvc3NpbXBpYmxlLy4vc3JjL3ZtL3ZtLnRzPzg0MjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJRGV2aWNlRGVzY3JpcHRpb259IGZyb20gXCIuL2RldmljZXRyZWVcIjtcbmltcG9ydCB7U3lzdGVtfSBmcm9tIFwiLi4vc3lzL3N5c3RlbVwiO1xuXG5leHBvcnQgY2xhc3MgVmlydHVhbE1hY2hpbmV7XG4gICAgcHJpdmF0ZSBkZXZpY2VzOiBJRGV2aWNlRGVzY3JpcHRpb25bXTtcblxuICAgIGNvbnN0cnVjdG9yKGRzOiBJRGV2aWNlRGVzY3JpcHRpb25bXSkge1xuICAgICAgICB0aGlzLmRldmljZXMgPSBkcztcbiAgICB9XG5cbiAgICBhc3luYyBib290KGtlcm5lbDogU3lzdGVtKXtcbiAgICAgICAgcmV0dXJuIGF3YWl0IGtlcm5lbC5ib290KHRoaXMuZGV2aWNlcyk7XG4gICAgfVxufVxuXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/vm/vm.ts\n");

/***/ }),

/***/ "./dist/bin/boot.img":
/*!***************************!*\
  !*** ./dist/bin/boot.img ***!
  \***************************/
/***/ ((module) => {

module.exports = "data:application/octet-stream;base64,";

/***/ }),

/***/ "./dist/bin/memfs.img":
/*!****************************!*\
  !*** ./dist/bin/memfs.img ***!
  \****************************/
/***/ ((module) => {

module.exports = "data:application/octet-stream;base64,";

/***/ }),

/***/ "./dist/initrd.img":
/*!*************************!*\
  !*** ./dist/initrd.img ***!
  \*************************/
/***/ ((module) => {

module.exports = "data:application/octet-stream;base64,";

/***/ }),

/***/ "./dist/worker.img":
/*!*************************!*\
  !*** ./dist/worker.img ***!
  \*************************/
/***/ ((module) => {

module.exports = "data:application/octet-stream;base64,";

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"vm": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkpossimpible"] = self["webpackChunkpossimpible"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["chunk-vendors"], () => (__webpack_require__("./src/main.ts")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;