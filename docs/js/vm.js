/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/kernel/devices/console.ts":
/*!***************************************!*\
  !*** ./src/kernel/devices/console.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction init(kernel) {\n    kernel.devices.registerDriver({\n        probe: (x, match) => {\n            kernel.devices.registerCharDevice(\"console\", {\n                write: async (file, buf) => {\n                    return x.properties.write(buf);\n                },\n            });\n        },\n        remove: (x) => {\n        },\n        driver: {\n            name: \"console\",\n            matchTable: [{ compatible: [\"display:console\"], data: null }]\n        }\n    });\n}\nfunction cleanup() {\n}\nconst module = {\n    name: \"console\",\n    init: init,\n    cleanup: cleanup\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (module);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMva2VybmVsL2RldmljZXMvY29uc29sZS50cy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3NzaW1waWJsZS8uL3NyYy9rZXJuZWwvZGV2aWNlcy9jb25zb2xlLnRzP2FkYjYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJS2VybmVsTW9kdWxlfSBmcm9tIFwiLi4vc3lzL21vZHVsZXNcIjtcbmltcG9ydCB7S2VybmVsfSBmcm9tIFwiLi4va2VybmVsXCI7XG5cbmZ1bmN0aW9uIGluaXQoa2VybmVsOiBLZXJuZWwpe1xuICAgIGtlcm5lbC5kZXZpY2VzLnJlZ2lzdGVyRHJpdmVyKHtcbiAgICAgICAgcHJvYmU6ICh4LCBtYXRjaCkgPT4ge1xuICAgICAgICAgICAga2VybmVsLmRldmljZXMucmVnaXN0ZXJDaGFyRGV2aWNlKFwiY29uc29sZVwiLCB7XG4gICAgICAgICAgICAgICAgd3JpdGU6IGFzeW5jIChmaWxlLCBidWYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh4IGFzIGFueSkucHJvcGVydGllcy53cml0ZShidWYpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlOiAoeCkgPT4ge1xuICAgICAgICB9LFxuICAgICAgICBkcml2ZXI6e1xuICAgICAgICAgICAgbmFtZTogXCJjb25zb2xlXCIsXG4gICAgICAgICAgICBtYXRjaFRhYmxlOiBbe2NvbXBhdGlibGU6IFtcImRpc3BsYXk6Y29uc29sZVwiXSwgZGF0YTogbnVsbH1dXG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5mdW5jdGlvbiBjbGVhbnVwKCl7XG5cbn1cblxuY29uc3QgbW9kdWxlOiBJS2VybmVsTW9kdWxlID0ge1xuICAgIG5hbWU6IFwiY29uc29sZVwiLFxuICAgIGluaXQ6IGluaXQsXG4gICAgY2xlYW51cDogY2xlYW51cFxufVxuXG5leHBvcnQgZGVmYXVsdCBtb2R1bGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/kernel/devices/console.ts\n");

/***/ }),

/***/ "./src/kernel/devices/drivers.ts":
/*!***************************************!*\
  !*** ./src/kernel/devices/drivers.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DeviceManager\": () => (/* binding */ DeviceManager)\n/* harmony export */ });\n/* harmony import */ var _fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fs */ \"./src/kernel/devices/fs.ts\");\n/* harmony import */ var _public_status__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../public/status */ \"./src/public/status.ts\");\n\n\nclass DeviceManager {\n    kernel;\n    matchTable = new Map();\n    deviceDrivers = [];\n    devices = new Map();\n    constructor(kernel) {\n        this.kernel = kernel;\n        this.kernel.vfs.registerFS(_fs__WEBPACK_IMPORTED_MODULE_0__.devfs);\n        this.registerCharDevice(\"null\", {\n            write: async (file, buf) => {\n            },\n            read: async (file, count) => {\n                return \"\";\n            }\n        });\n    }\n    registerDriver(driver) {\n        this.deviceDrivers.push(driver);\n        for (const match of driver.driver.matchTable) {\n            for (const string of match.compatible) {\n                this.matchTable.set(string, (x) => {\n                    driver.probe(x, match);\n                });\n            }\n        }\n    }\n    init() {\n        for (const dd of this.kernel.descriptions) {\n            for (const s of dd.properties.compatibility) {\n                if (this.matchTable.has(s)) {\n                    this.matchTable.get(s)(dd);\n                }\n            }\n        }\n    }\n    registerCharDevice(name, ops) {\n        let x = this.devices.get(name);\n        if (!x) {\n            this.devices.set(name, ops);\n        }\n        else {\n            throw new _public_status__WEBPACK_IMPORTED_MODULE_1__.PError(_public_status__WEBPACK_IMPORTED_MODULE_1__.Status.EINVAL);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMva2VybmVsL2RldmljZXMvZHJpdmVycy50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQTtBQUdBO0FBZ0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Bvc3NpbXBpYmxlLy4vc3JjL2tlcm5lbC9kZXZpY2VzL2RyaXZlcnMudHM/ODg2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0tlcm5lbH0gZnJvbSBcIi4uL2tlcm5lbFwiO1xuaW1wb3J0IHtkZXZmc30gZnJvbSBcIi4vZnNcIjtcbmltcG9ydCB7SURldmljZURlc2NyaXB0aW9ufSBmcm9tIFwiLi4vLi4vdm0vZGV2aWNldHJlZVwiO1xuaW1wb3J0IHtJRmlsZU9wZXJhdGlvbnN9IGZyb20gXCIuLi9mcy92ZnNcIjtcbmltcG9ydCB7UEVycm9yLCBTdGF0dXN9IGZyb20gXCIuLi8uLi9wdWJsaWMvc3RhdHVzXCI7XG5cbmludGVyZmFjZSBEcml2ZXJNYXRjaHtcbiAgICBjb21wYXRpYmxlOiBzdHJpbmdbXSxcbiAgICBkYXRhOiBhbnlcbn1cblxuaW50ZXJmYWNlIERyaXZlciB7XG4gICAgcHJvYmU6ICh4OiBJRGV2aWNlRGVzY3JpcHRpb24sIG1hdGNoOkRyaXZlck1hdGNoKSA9PiB2b2lkXG4gICAgcmVtb3ZlOiAoeDogSURldmljZURlc2NyaXB0aW9uICApID0+IHZvaWRcbiAgICBkcml2ZXI6IHtcbiAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICBtYXRjaFRhYmxlOiBEcml2ZXJNYXRjaFtdXG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGV2aWNlTWFuYWdlcntcbiAgICBwcml2YXRlIGtlcm5lbDogS2VybmVsO1xuICAgIHByaXZhdGUgbWF0Y2hUYWJsZSA9IG5ldyBNYXA8c3RyaW5nLCAoeDpJRGV2aWNlRGVzY3JpcHRpb24pID0+IHZvaWQ+KCk7XG4gICAgcHJpdmF0ZSBkZXZpY2VEcml2ZXJzOiBEcml2ZXJbXSA9IFtdO1xuICAgIHB1YmxpYyBkZXZpY2VzID0gbmV3IE1hcDxzdHJpbmcsIElGaWxlT3BlcmF0aW9ucz4oKTtcblxuICAgIGNvbnN0cnVjdG9yKGtlcm5lbDogS2VybmVsKSB7XG4gICAgICAgIHRoaXMua2VybmVsID0ga2VybmVsO1xuICAgICAgICB0aGlzLmtlcm5lbC52ZnMucmVnaXN0ZXJGUyhkZXZmcyk7XG5cbiAgICAgICAgdGhpcy5yZWdpc3RlckNoYXJEZXZpY2UoXCJudWxsXCIsIHtcbiAgICAgICAgICAgIHdyaXRlOiBhc3luYyAoZmlsZSwgYnVmKSA9PiB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVhZDogYXN5bmMgKGZpbGUsIGNvdW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyRHJpdmVyKGRyaXZlcjogRHJpdmVyKXtcbiAgICAgICAgdGhpcy5kZXZpY2VEcml2ZXJzLnB1c2goZHJpdmVyKTtcbiAgICAgICAgZm9yIChjb25zdCBtYXRjaCBvZiBkcml2ZXIuZHJpdmVyLm1hdGNoVGFibGUpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc3RyaW5nIG9mIG1hdGNoLmNvbXBhdGlibGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hdGNoVGFibGUuc2V0KHN0cmluZywgKHg6SURldmljZURlc2NyaXB0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRyaXZlci5wcm9iZSh4LCBtYXRjaCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbml0KCl7XG4gICAgICAgIGZvciAoY29uc3QgZGQgb2YgdGhpcy5rZXJuZWwuZGVzY3JpcHRpb25zISkge1xuICAgICAgICAgICAgZm9yKGNvbnN0IHMgb2YgZGQucHJvcGVydGllcy5jb21wYXRpYmlsaXR5KXtcbiAgICAgICAgICAgICAgICBpZih0aGlzLm1hdGNoVGFibGUuaGFzKHMpKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRjaFRhYmxlLmdldChzKSEoZGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlZ2lzdGVyQ2hhckRldmljZShuYW1lOiBzdHJpbmcsIG9wczogSUZpbGVPcGVyYXRpb25zKXtcbiAgICAgICAgbGV0IHggPSB0aGlzLmRldmljZXMuZ2V0KG5hbWUpO1xuICAgICAgICBpZigheCl7XG4gICAgICAgICAgICB0aGlzLmRldmljZXMuc2V0KG5hbWUsIG9wcyk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBFcnJvcihTdGF0dXMuRUlOVkFMKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/kernel/devices/drivers.ts\n");

/***/ }),

/***/ "./src/kernel/devices/fs.ts":
/*!**********************************!*\
  !*** ./src/kernel/devices/fs.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"devfs\": () => (/* binding */ devfs)\n/* harmony export */ });\n/* harmony import */ var _fs_inode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../fs/inode */ \"./src/kernel/fs/inode.ts\");\n/* harmony import */ var _fs_vfs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../fs/vfs */ \"./src/kernel/fs/vfs.ts\");\n\n\nconst inodeOperators = {\n    lookup: (node, entry) => {\n        const x = node.map.devices.get(entry.name);\n        if (x) {\n            entry.inode = (0,_fs_inode__WEBPACK_IMPORTED_MODULE_0__.inode_new)(node.superblock);\n            entry.inode.map = x;\n            entry.inode.fileOperations = x;\n        }\n        else {\n            // TODO: Does not exist here;\n        }\n        return entry;\n    },\n    getattr: async (vfsmount, dentry) => {\n        return \"\";\n    }\n};\nconst fileOperations = {\n    iterate: async (file) => {\n        const map = file.dentry.inode.map.devices;\n        const result = [];\n        (0,_fs_vfs__WEBPACK_IMPORTED_MODULE_1__.dir_add_dots)(result);\n        const devices = Array.from(map.keys()).map(x => {\n            return { name: x };\n        });\n        return result.concat(devices);\n    }\n};\nconst superblockOperations = {\n    alloc_inode(sb) {\n        return {\n            mode: true,\n            user: true,\n            map: null,\n            isLink: false,\n            superblock: sb,\n            operations: inodeOperators,\n            fileOperations: fileOperations\n        };\n    },\n    destroy_inode(inode) {\n    },\n    dirty_inode(inode) {\n    },\n    put_inode(inode) {\n    },\n    put_super(sb) {\n    },\n    sync_fs(sb) {\n    },\n    write_inode(inode) {\n    },\n    write_super(sb) {\n    }\n};\nasync function mount(device, options, kernel) {\n    let entry = kernel.vfs.dcache.alloc(null, \"\");\n    const sb = {\n        device: \"dev\",\n        superblockOperations: superblockOperations,\n        fileSystemType: devfs,\n        root: entry\n    };\n    entry.inode = (0,_fs_inode__WEBPACK_IMPORTED_MODULE_0__.inode_new)(sb);\n    entry.inode.map = kernel.devices;\n    return sb;\n}\nconst devfs = {\n    name: \"dev\",\n    mount: mount,\n    unmount: sb => { }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMva2VybmVsL2RldmljZXMvZnMudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Bvc3NpbXBpYmxlLy4vc3JjL2tlcm5lbC9kZXZpY2VzL2ZzLnRzP2M5ZDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJSU5vZGUsIElJTm9kZU9wZXJhdGlvbnMsIGlub2RlX25ld30gZnJvbSBcIi4uL2ZzL2lub2RlXCI7XG5pbXBvcnQge1xuICAgIGRpcl9hZGRfZG90cyxcbiAgICBJRmlsZSxcbiAgICBJRmlsZU9wZXJhdGlvbnMsIElGaWxlU3lzdGVtVHlwZSxcbiAgICBJU3VwZXJCbG9jayxcbiAgICBJU3VwZXJCbG9ja09wZXJhdGlvbnMsXG59IGZyb20gXCIuLi9mcy92ZnNcIjtcbmltcG9ydCB7SURpcmVjdG9yeUVudHJ5fSBmcm9tIFwiLi4vLi4vcHVibGljL2FwaVwiO1xuaW1wb3J0IHtLZXJuZWx9IGZyb20gXCIuLi9rZXJuZWxcIjtcbmltcG9ydCB7RGV2aWNlTWFuYWdlcn0gZnJvbSBcIi4vZHJpdmVyc1wiO1xuXG5jb25zdCBpbm9kZU9wZXJhdG9yczogSUlOb2RlT3BlcmF0aW9ucyA9IHtcbiAgICBsb29rdXA6IChub2RlLGVudHJ5KSA9PiB7XG4gICAgICAgIGNvbnN0IHggPSAobm9kZS5tYXAgYXMgRGV2aWNlTWFuYWdlcikuZGV2aWNlcy5nZXQoZW50cnkubmFtZSk7XG4gICAgICAgIGlmKHgpe1xuICAgICAgICAgICAgZW50cnkuaW5vZGUgPSBpbm9kZV9uZXcobm9kZS5zdXBlcmJsb2NrKTtcbiAgICAgICAgICAgIGVudHJ5Lmlub2RlLm1hcCA9IHg7XG4gICAgICAgICAgICBlbnRyeS5pbm9kZS5maWxlT3BlcmF0aW9ucyA9IHghO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIC8vIFRPRE86IERvZXMgbm90IGV4aXN0IGhlcmU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgfSxcbiAgICBnZXRhdHRyOiBhc3luYyAodmZzbW91bnQsIGRlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gXCJcIlxuICAgIH1cbn1cblxuY29uc3QgZmlsZU9wZXJhdGlvbnM6IElGaWxlT3BlcmF0aW9ucyA9IHtcbiAgICBpdGVyYXRlOiBhc3luYyAoZmlsZSk6IFByb21pc2U8SURpcmVjdG9yeUVudHJ5W10+ID0+IHtcbiAgICAgICAgY29uc3QgbWFwID0gZmlsZS5kZW50cnkuaW5vZGUhLm1hcC5kZXZpY2VzIGFzIE1hcDxzdHJpbmcsIElGaWxlT3BlcmF0aW9ucz47XG4gICAgICAgIGNvbnN0IHJlc3VsdDogSURpcmVjdG9yeUVudHJ5W10gPSBbXTtcbiAgICAgICAgZGlyX2FkZF9kb3RzKHJlc3VsdCk7XG4gICAgICAgIGNvbnN0IGRldmljZXMgPSBBcnJheS5mcm9tKG1hcC5rZXlzKCkpLm1hcCh4ID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7bmFtZTogeH07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0LmNvbmNhdChkZXZpY2VzKTtcbiAgICB9XG59XG5cbmNvbnN0IHN1cGVyYmxvY2tPcGVyYXRpb25zOiBJU3VwZXJCbG9ja09wZXJhdGlvbnMgPXtcbiAgICBhbGxvY19pbm9kZShzYjogSVN1cGVyQmxvY2spOiBJSU5vZGUge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbW9kZTogdHJ1ZSxcbiAgICAgICAgICAgIHVzZXI6IHRydWUsXG4gICAgICAgICAgICBtYXA6IG51bGwsXG4gICAgICAgICAgICBpc0xpbms6IGZhbHNlLFxuICAgICAgICAgICAgc3VwZXJibG9jazogc2IsXG4gICAgICAgICAgICBvcGVyYXRpb25zOiBpbm9kZU9wZXJhdG9ycyxcbiAgICAgICAgICAgIGZpbGVPcGVyYXRpb25zOiBmaWxlT3BlcmF0aW9uc1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgZGVzdHJveV9pbm9kZShpbm9kZTogSUlOb2RlKTogdm9pZCB7XG4gICAgfSxcbiAgICBkaXJ0eV9pbm9kZShpbm9kZTogSUlOb2RlKTogdm9pZCB7XG4gICAgfSxcbiAgICBwdXRfaW5vZGUoaW5vZGU6IElJTm9kZSk6IHZvaWQge1xuICAgIH0sXG4gICAgcHV0X3N1cGVyKHNiOiBJU3VwZXJCbG9jayk6IHZvaWQge1xuICAgIH0sXG4gICAgc3luY19mcyhzYjogSVN1cGVyQmxvY2spOiB2b2lkIHtcbiAgICB9LFxuICAgIHdyaXRlX2lub2RlKGlub2RlOiBJSU5vZGUpOiB2b2lkIHtcbiAgICB9LFxuICAgIHdyaXRlX3N1cGVyKHNiOiBJU3VwZXJCbG9jayk6IHZvaWQge1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gbW91bnQoZGV2aWNlOiBzdHJpbmcsIG9wdGlvbnM6IHN0cmluZywga2VybmVsOiBLZXJuZWwpOiBQcm9taXNlPElTdXBlckJsb2NrPntcbiAgICBsZXQgZW50cnkgPSBrZXJuZWwudmZzLmRjYWNoZS5hbGxvYyhudWxsLCBcIlwiKTtcbiAgICBjb25zdCBzYiA9IHtcbiAgICAgICAgZGV2aWNlOiBcImRldlwiLFxuICAgICAgICBzdXBlcmJsb2NrT3BlcmF0aW9uczogc3VwZXJibG9ja09wZXJhdGlvbnMsXG4gICAgICAgIGZpbGVTeXN0ZW1UeXBlOiBkZXZmcyxcbiAgICAgICAgcm9vdDogZW50cnlcbiAgICB9O1xuXG4gICAgZW50cnkuaW5vZGUgPSBpbm9kZV9uZXcoc2IpO1xuICAgIGVudHJ5Lmlub2RlLm1hcCA9IGtlcm5lbC5kZXZpY2VzXG5cbiAgICByZXR1cm4gc2I7XG59XG5cbmV4cG9ydCBjb25zdCBkZXZmczogSUZpbGVTeXN0ZW1UeXBlID0ge1xuICAgIG5hbWU6XCJkZXZcIixcbiAgICBtb3VudDogbW91bnQsXG4gICAgdW5tb3VudDogc2IgPT4ge31cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/kernel/devices/fs.ts\n");

/***/ }),

/***/ "./src/kernel/devices/image.ts":
/*!*************************************!*\
  !*** ./src/kernel/devices/image.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction init(kernel) {\n    kernel.devices.registerDriver({\n        probe: (x, match) => {\n            kernel.devices.registerCharDevice(x.id, {\n                read: async (file, count) => {\n                    return x.properties.image;\n                }\n            });\n        },\n        remove: (x) => { },\n        driver: {\n            name: \"image\",\n            matchTable: [{ compatible: [\"storage:image\"], data: null }]\n        }\n    });\n}\nfunction cleanup() {\n}\nconst module = {\n    name: \"image\",\n    init: init,\n    cleanup: cleanup\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (module);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMva2VybmVsL2RldmljZXMvaW1hZ2UudHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Bvc3NpbXBpYmxlLy4vc3JjL2tlcm5lbC9kZXZpY2VzL2ltYWdlLnRzP2M4OTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJS2VybmVsTW9kdWxlfSBmcm9tIFwiLi4vc3lzL21vZHVsZXNcIjtcbmltcG9ydCB7S2VybmVsfSBmcm9tIFwiLi4va2VybmVsXCI7XG5cbmZ1bmN0aW9uIGluaXQoa2VybmVsOiBLZXJuZWwpe1xuICAgIGtlcm5lbC5kZXZpY2VzLnJlZ2lzdGVyRHJpdmVyKHtcbiAgICAgICAgcHJvYmU6ICh4LCBtYXRjaCkgPT4ge1xuICAgICAgICAgICAga2VybmVsLmRldmljZXMucmVnaXN0ZXJDaGFyRGV2aWNlKHguaWQsIHtcbiAgICAgICAgICAgICAgICByZWFkOiBhc3luYyAoZmlsZSwgY291bnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh4IGFzIGFueSkucHJvcGVydGllcy5pbWFnZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlOiAoeCkgPT4ge30sXG4gICAgICAgIGRyaXZlcjp7XG4gICAgICAgICAgICBuYW1lOiBcImltYWdlXCIsXG4gICAgICAgICAgICBtYXRjaFRhYmxlOiBbe2NvbXBhdGlibGU6IFtcInN0b3JhZ2U6aW1hZ2VcIl0sIGRhdGE6IG51bGx9XVxuICAgICAgICB9XG4gICAgfSlcbn1cblxuZnVuY3Rpb24gY2xlYW51cCgpe1xuXG59XG5cbmNvbnN0IG1vZHVsZTogSUtlcm5lbE1vZHVsZSA9IHtcbiAgICBuYW1lOiBcImltYWdlXCIsXG4gICAgaW5pdDogaW5pdCxcbiAgICBjbGVhbnVwOiBjbGVhbnVwXG59XG5cbmV4cG9ydCBkZWZhdWx0IG1vZHVsZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/kernel/devices/image.ts\n");

/***/ }),

/***/ "./src/kernel/devices/serial.ts":
/*!**************************************!*\
  !*** ./src/kernel/devices/serial.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction init(kernel) {\n    kernel.devices.registerDriver({\n        probe: (x, match) => {\n            kernel.devices.registerCharDevice(\"tty0\", {\n                write: async (file, buf) => {\n                    return x.properties.write(buf);\n                },\n                read: async (file, count) => {\n                    return x.properties.read(count);\n                }\n            });\n        },\n        remove: (x) => { },\n        driver: {\n            name: \"serial\",\n            matchTable: [{ compatible: [\"serial:terminal\"], data: null }]\n        }\n    });\n}\nfunction cleanup() {\n}\nconst module = {\n    name: \"serial\",\n    init: init,\n    cleanup: cleanup\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (module);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMva2VybmVsL2RldmljZXMvc2VyaWFsLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3NzaW1waWJsZS8uL3NyYy9rZXJuZWwvZGV2aWNlcy9zZXJpYWwudHM/NWNkYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0lLZXJuZWxNb2R1bGV9IGZyb20gXCIuLi9zeXMvbW9kdWxlc1wiO1xuaW1wb3J0IHtLZXJuZWx9IGZyb20gXCIuLi9rZXJuZWxcIjtcblxuZnVuY3Rpb24gaW5pdChrZXJuZWw6IEtlcm5lbCl7XG4gICAga2VybmVsLmRldmljZXMucmVnaXN0ZXJEcml2ZXIoe1xuICAgICAgICBwcm9iZTogKHgsIG1hdGNoKSA9PiB7XG4gICAgICAgICAgICBrZXJuZWwuZGV2aWNlcy5yZWdpc3RlckNoYXJEZXZpY2UoXCJ0dHkwXCIsIHtcbiAgICAgICAgICAgICAgICB3cml0ZTogYXN5bmMgKGZpbGUsIGJ1ZikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHggYXMgYW55KS5wcm9wZXJ0aWVzLndyaXRlKGJ1Zik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZWFkOiBhc3luYyAoZmlsZSwgY291bnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh4IGFzIGFueSkucHJvcGVydGllcy5yZWFkKGNvdW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlOiAoeCkgPT4ge30sXG4gICAgICAgIGRyaXZlcjp7XG4gICAgICAgICAgICBuYW1lOiBcInNlcmlhbFwiLFxuICAgICAgICAgICAgbWF0Y2hUYWJsZTogW3tjb21wYXRpYmxlOiBbXCJzZXJpYWw6dGVybWluYWxcIl0sIGRhdGE6IG51bGx9XVxuICAgICAgICB9XG4gICAgfSlcbn1cblxuZnVuY3Rpb24gY2xlYW51cCgpe1xuXG59XG5cbmNvbnN0IG1vZHVsZTogSUtlcm5lbE1vZHVsZSA9IHtcbiAgICBuYW1lOiBcInNlcmlhbFwiLFxuICAgIGluaXQ6IGluaXQsXG4gICAgY2xlYW51cDogY2xlYW51cFxufVxuXG5leHBvcnQgZGVmYXVsdCBtb2R1bGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/kernel/devices/serial.ts\n");

/***/ }),

/***/ "./src/kernel/fs/blobfs/module.ts":
/*!****************************************!*\
  !*** ./src/kernel/fs/blobfs/module.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _vfs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vfs */ \"./src/kernel/fs/vfs.ts\");\n/* harmony import */ var _structs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./structs */ \"./src/kernel/fs/blobfs/structs.ts\");\n/* harmony import */ var _inode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../inode */ \"./src/kernel/fs/inode.ts\");\n/* harmony import */ var _public_status__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../public/status */ \"./src/public/status.ts\");\n\n\n\n\nconst inodeOperators = {\n    create: (dir, dentry, create) => {\n        const dirbn = dir.map;\n        const sb = dir.superblock.device;\n        const nbn = (0,_structs__WEBPACK_IMPORTED_MODULE_1__.blob_inode_alloc)(_structs__WEBPACK_IMPORTED_MODULE_1__.BlobINodeType.REGULAR, sb, (0,_structs__WEBPACK_IMPORTED_MODULE_1__.blob_data_alloc)(\"\", sb));\n        const de = (0,_structs__WEBPACK_IMPORTED_MODULE_1__.blob_dirent_alloc)(dentry.name, nbn, sb);\n        (0,_structs__WEBPACK_IMPORTED_MODULE_1__.blob_add_to_parent)(dirbn, de, sb);\n        let newiNode = (0,_inode__WEBPACK_IMPORTED_MODULE_2__.inode_new)(dir.superblock);\n        (0,_inode__WEBPACK_IMPORTED_MODULE_2__.inode_set_ptr)(newiNode, nbn);\n        dentry.inode = newiNode;\n    },\n    lookup: (dir, entry) => {\n        const bn = dir.map;\n        const sb = dir.superblock.device;\n        if (bn.type == _structs__WEBPACK_IMPORTED_MODULE_1__.BlobINodeType.DIRECTORY) {\n            const direntpos = (0,_structs__WEBPACK_IMPORTED_MODULE_1__.blob_inode_find_child)(bn, entry.name, sb);\n            if (direntpos != undefined) {\n                const foundnode = sb.nodes[sb.dirents[direntpos].node];\n                const inode = (0,_inode__WEBPACK_IMPORTED_MODULE_2__.inode_new)(dir.superblock);\n                if (foundnode.type == _structs__WEBPACK_IMPORTED_MODULE_1__.BlobINodeType.LINK) {\n                    inode.isLink = true;\n                }\n                (0,_inode__WEBPACK_IMPORTED_MODULE_2__.inode_set_ptr)(inode, foundnode);\n                entry.inode = inode;\n                entry.superblock = inode.superblock;\n                return entry;\n            }\n            else {\n                entry.inode = null;\n                entry.superblock = null;\n                return entry;\n            }\n        }\n        else {\n            throw new _public_status__WEBPACK_IMPORTED_MODULE_3__.PError(_public_status__WEBPACK_IMPORTED_MODULE_3__.Status.ENOTDIR);\n        }\n        return null;\n    },\n    mkdir: (dir, dentry) => {\n        const dirbn = dir.map;\n        const sb = dir.superblock.device;\n        const nbn = (0,_structs__WEBPACK_IMPORTED_MODULE_1__.blob_inode_alloc)(_structs__WEBPACK_IMPORTED_MODULE_1__.BlobINodeType.DIRECTORY, sb, []);\n        const de = (0,_structs__WEBPACK_IMPORTED_MODULE_1__.blob_dirent_alloc)(dentry.name, nbn, sb);\n        (0,_structs__WEBPACK_IMPORTED_MODULE_1__.blob_add_to_parent)(dirbn, de, sb);\n        let newiNode = (0,_inode__WEBPACK_IMPORTED_MODULE_2__.inode_new)(dir.superblock);\n        (0,_inode__WEBPACK_IMPORTED_MODULE_2__.inode_set_ptr)(newiNode, nbn);\n        dentry.inode = newiNode;\n    },\n    rmdir: (dir, dentry) => {\n        const bn = dir.map;\n        const sb = dir.superblock.device;\n        const direntpos = (0,_structs__WEBPACK_IMPORTED_MODULE_1__.blob_inode_find_child)(bn, dentry.name, sb);\n        if (direntpos) {\n            const dirent = sb.dirents[direntpos];\n            sb.dirents[direntpos] = null;\n            sb.nodes[dirent.node] = null;\n            (0,_structs__WEBPACK_IMPORTED_MODULE_1__.blob_remove_from_parent)(bn, direntpos, sb);\n            // TODO: should erase all recursivelly\n        }\n    },\n    link: (olddentry, dir, dentry) => {\n        const dirbn = (0,_inode__WEBPACK_IMPORTED_MODULE_2__.inode_get_ptr)(dir);\n        const sb = dir.superblock.device;\n        const bnold = (0,_inode__WEBPACK_IMPORTED_MODULE_2__.inode_get_ptr)(olddentry.inode);\n        const de = (0,_structs__WEBPACK_IMPORTED_MODULE_1__.blob_dirent_alloc)(olddentry.name, bnold, sb);\n        (0,_structs__WEBPACK_IMPORTED_MODULE_1__.blob_add_to_parent)(dirbn, de, sb);\n    },\n    unlink: (dir, dentry) => {\n        const dirbn = dir.map;\n        const sb = dir.superblock.device;\n        for (let i = 0; i < dirbn.map.length; i++) {\n            let x = dirbn.map[i];\n            if (sb.dirents[x].name == dentry.name) {\n                sb.dirents[x] = null;\n            }\n        }\n    },\n    symlink: (dir, dentry, name) => {\n        const dirbn = dir.map;\n        const sb = dir.superblock.device;\n        const nbn = (0,_structs__WEBPACK_IMPORTED_MODULE_1__.blob_inode_alloc)(_structs__WEBPACK_IMPORTED_MODULE_1__.BlobINodeType.LINK, sb, (0,_structs__WEBPACK_IMPORTED_MODULE_1__.blob_data_alloc)(name, sb));\n        const de = (0,_structs__WEBPACK_IMPORTED_MODULE_1__.blob_dirent_alloc)(dentry.name, nbn, sb);\n        (0,_structs__WEBPACK_IMPORTED_MODULE_1__.blob_add_to_parent)(dirbn, de, sb);\n        let newiNode = (0,_inode__WEBPACK_IMPORTED_MODULE_2__.inode_new)(dir.superblock);\n        (0,_inode__WEBPACK_IMPORTED_MODULE_2__.inode_set_ptr)(newiNode, nbn);\n        dentry.inode = newiNode;\n    },\n    async getattr(vfsmount, dentry) {\n        return \"\";\n    }\n};\nconst fileOperations = {\n    llseek: async (file, offset, origin) => {\n        switch (origin) {\n            case _vfs__WEBPACK_IMPORTED_MODULE_0__.LLSeekWhence.SEEK_SET:\n                file.position = offset;\n                break;\n            case _vfs__WEBPACK_IMPORTED_MODULE_0__.LLSeekWhence.SEEK_END:\n                // TODO: file no longer has size:\n                file.position = 100 - offset;\n                break;\n            case _vfs__WEBPACK_IMPORTED_MODULE_0__.LLSeekWhence.SEEK_CUR:\n                file.position = file.position + offset;\n                break;\n        }\n        return file.position;\n    },\n    read: async (file, count) => {\n        let content = (0,_structs__WEBPACK_IMPORTED_MODULE_1__.blob_get_data)(file.dentry.inode.map, file.dentry.superblock?.device);\n        if (count && count > 0) {\n            file.position += count;\n            return content.substring(file.position, count);\n        }\n        else {\n            return content.substring(file.position);\n        }\n    },\n    write: async (file, buf) => {\n        const content = (0,_structs__WEBPACK_IMPORTED_MODULE_1__.blob_get_data)(file.dentry.inode.map, file.dentry.superblock?.device);\n        file.position += buf.length;\n        (0,_structs__WEBPACK_IMPORTED_MODULE_1__.blob_set_data)(file.dentry.inode.map, content.substring(0, file.position) + buf + content.substring(file.position + buf.length), file.dentry.superblock?.device);\n    },\n    iterate: async (file) => {\n        const dirbn = file.dentry.inode.map;\n        const sb = file.dentry.inode.superblock.device;\n        return new Promise(resolve => {\n            const bn = (0,_inode__WEBPACK_IMPORTED_MODULE_2__.inode_get_ptr)(file.dentry.inode);\n            let result = [];\n            (0,_vfs__WEBPACK_IMPORTED_MODULE_0__.dir_add_dots)(result);\n            if (bn.map.length) {\n                const list = bn.map.map(x => {\n                    return { name: sb.dirents[x]?.name };\n                });\n                result = result.concat(list);\n                resolve(result);\n            }\n            else {\n                resolve([]);\n            }\n        });\n    },\n};\nconst superBlockOperations = {\n    alloc_inode(sb) {\n        return {\n            mode: true,\n            user: true,\n            map: null,\n            isLink: false,\n            superblock: sb,\n            operations: inodeOperators,\n            fileOperations: fileOperations\n        };\n    },\n    destroy_inode(inode) {\n        return;\n    },\n    write_inode(inode) {\n    },\n    dirty_inode(inode) {\n        return;\n    },\n    put_inode(inode) {\n        return;\n    },\n    put_super(inode) {\n        return;\n    },\n    write_super(inode) {\n        return;\n    },\n    sync_fs(inode) {\n        return;\n    }\n};\nasync function mount(device, options) {\n    const path = KERNEL.vfs.lookup(device, KERNEL.current);\n    const file = await KERNEL.vfs.open(path);\n    const img = await file.operations.read(file, 0);\n    let txt = await (await (await fetch(img)).blob()).text();\n    let content = JSON.parse(txt);\n    const entry = KERNEL.vfs.dcache.alloc(null, \"\");\n    const sb = {\n        root: entry,\n        device: content,\n        fileSystemType: fs,\n        superblockOperations: superBlockOperations,\n    };\n    entry.inode = (0,_inode__WEBPACK_IMPORTED_MODULE_2__.inode_new)(sb);\n    (0,_inode__WEBPACK_IMPORTED_MODULE_2__.inode_set_ptr)(entry.inode, content.nodes[0]);\n    return sb;\n}\nconst fs = {\n    name: \"blob\",\n    mount: mount,\n    unmount: (sb) => { }\n};\nasync function mountramfs(device) {\n    const bsb = (0,_structs__WEBPACK_IMPORTED_MODULE_1__.blob_alloc_superblock)();\n    const inode = (0,_structs__WEBPACK_IMPORTED_MODULE_1__.blob_inode_alloc)(_structs__WEBPACK_IMPORTED_MODULE_1__.BlobINodeType.DIRECTORY, bsb, []);\n    bsb.nodes.push(inode);\n    const entry = KERNEL.vfs.dcache.alloc(null, \"\");\n    const sb = {\n        root: entry,\n        device: bsb,\n        fileSystemType: tmpfs,\n        superblockOperations: superBlockOperations,\n    };\n    entry.inode = (0,_inode__WEBPACK_IMPORTED_MODULE_2__.inode_new)(sb);\n    (0,_inode__WEBPACK_IMPORTED_MODULE_2__.inode_set_ptr)(entry.inode, bsb.nodes[0]);\n    return sb;\n}\nconst tmpfs = {\n    name: \"tmpfs\",\n    mount: mountramfs,\n    unmount: (sb) => { }\n};\nlet KERNEL;\nfunction init(kernel) {\n    KERNEL = kernel;\n    kernel.vfs.registerFS(fs);\n    kernel.vfs.registerFS(tmpfs);\n}\nfunction cleanup() {\n}\nconst m = {\n    name: \"blobfs\",\n    init: init,\n    cleanup: cleanup\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (m);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/kernel/fs/blobfs/module.ts\n");

/***/ }),

/***/ "./src/kernel/fs/blobfs/structs.ts":
/*!*****************************************!*\
  !*** ./src/kernel/fs/blobfs/structs.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BlobINodeType\": () => (/* binding */ BlobINodeType),\n/* harmony export */   \"blob_alloc_superblock\": () => (/* binding */ blob_alloc_superblock),\n/* harmony export */   \"blob_dirent_alloc\": () => (/* binding */ blob_dirent_alloc),\n/* harmony export */   \"blob_inode_alloc\": () => (/* binding */ blob_inode_alloc),\n/* harmony export */   \"blob_add_to_parent\": () => (/* binding */ blob_add_to_parent),\n/* harmony export */   \"blob_remove_from_parent\": () => (/* binding */ blob_remove_from_parent),\n/* harmony export */   \"blob_inode_find_child\": () => (/* binding */ blob_inode_find_child),\n/* harmony export */   \"blob_data_alloc\": () => (/* binding */ blob_data_alloc),\n/* harmony export */   \"blob_get_data\": () => (/* binding */ blob_get_data),\n/* harmony export */   \"blob_set_data\": () => (/* binding */ blob_set_data)\n/* harmony export */ });\nvar BlobINodeType;\n(function (BlobINodeType) {\n    BlobINodeType[BlobINodeType[\"REGULAR\"] = 0] = \"REGULAR\";\n    BlobINodeType[BlobINodeType[\"DIRECTORY\"] = 1] = \"DIRECTORY\";\n    BlobINodeType[BlobINodeType[\"LINK\"] = 2] = \"LINK\";\n})(BlobINodeType || (BlobINodeType = {}));\nfunction blob_alloc_superblock() {\n    return {\n        nodes: [],\n        data: [],\n        dirents: [],\n    };\n}\nfunction blob_dirent_alloc(name, inode, sb) {\n    const dirent = {\n        name: name,\n        node: inode.pos,\n    };\n    return sb.dirents.push(dirent) - 1;\n}\nfunction blob_inode_alloc(type, sb, content) {\n    const node = {\n        type: type,\n        pos: sb.nodes.length,\n        map: content\n    };\n    sb.nodes.push(node);\n    return node;\n}\nfunction blob_add_to_parent(parent, dirent, sb) {\n    parent.map.push(dirent);\n}\nfunction blob_remove_from_parent(parent, dirent, sb) {\n    const map = parent.map;\n    const index = map.indexOf(dirent);\n    if (index > -1) {\n        map.splice(index, 1);\n    }\n}\nfunction blob_inode_find_child(node, name, sb) {\n    return node.map.find(x => sb.dirents[x].name == name);\n}\nfunction blob_data_alloc(content, sb) {\n    return sb.data.push(content) - 1;\n}\nfunction blob_get_data(node, sb) {\n    return sb.data[node.map];\n}\nfunction blob_set_data(node, content, sb) {\n    return sb.data[node.map] = content;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMva2VybmVsL2ZzL2Jsb2Jmcy9zdHJ1Y3RzLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFNQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3NzaW1waWJsZS8uL3NyYy9rZXJuZWwvZnMvYmxvYmZzL3N0cnVjdHMudHM/ZWE2NSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIElCbG9iU3VwZXJOb2Rle1xuICAgIG5vZGVzOiAoSUJsb2JJTm9kZXxudWxsKVtdLFxuICAgIGRpcmVudHM6IChJQmxvYkRpckVudHxudWxsKVtdLFxuICAgIGRhdGE6IChzdHJpbmd8bnVsbClbXSxcbn1cblxuZXhwb3J0IGVudW0gQmxvYklOb2RlVHlwZSB7XG4gICAgUkVHVUxBUixcbiAgICBESVJFQ1RPUlksXG4gICAgTElOS1xufVxuZXhwb3J0IHR5cGUgQmxvYkRpckVudF9wdHIgPSBudW1iZXI7XG5leHBvcnQgdHlwZSBCbG9iSU5vZGVfcHRyID0gbnVtYmVyO1xuZXhwb3J0IHR5cGUgQmxvYkRhdGFfcHRyID0gbnVtYmVyO1xuXG5leHBvcnQgaW50ZXJmYWNlIElCbG9iRGlyRW50IHtcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgbm9kZTogQmxvYklOb2RlX3B0cixcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJsb2JfYWxsb2Nfc3VwZXJibG9jaygpOiBJQmxvYlN1cGVyTm9kZXtcbiAgICByZXR1cm4ge1xuICAgICAgICBub2RlczogW10sXG4gICAgICAgIGRhdGE6IFtdLFxuICAgICAgICBkaXJlbnRzOiBbXSxcbiAgICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElCbG9iSU5vZGV7XG4gICAgdHlwZTogQmxvYklOb2RlVHlwZSxcbiAgICBwb3M6IEJsb2JJTm9kZV9wdHIsXG4gICAgbWFwOiBCbG9iRGF0YV9wdHJ8QmxvYkRpckVudF9wdHJbXVxufVxuXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGJsb2JfZGlyZW50X2FsbG9jKG5hbWU6IHN0cmluZywgaW5vZGU6IElCbG9iSU5vZGUsIHNiOiBJQmxvYlN1cGVyTm9kZSk6IEJsb2JEaXJFbnRfcHRye1xuICAgIGNvbnN0IGRpcmVudDogSUJsb2JEaXJFbnQgPSB7XG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIG5vZGU6IGlub2RlLnBvcyxcbiAgICB9XG5cbiAgICByZXR1cm4gc2IuZGlyZW50cyEucHVzaChkaXJlbnQpIC0gMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJsb2JfaW5vZGVfYWxsb2ModHlwZTogQmxvYklOb2RlVHlwZSwgc2I6IElCbG9iU3VwZXJOb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA6QmxvYkRhdGFfcHRyfEJsb2JEaXJFbnRfcHRyW10pOiBJQmxvYklOb2Rle1xuICAgIGNvbnN0IG5vZGU6IElCbG9iSU5vZGUgPSB7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIHBvczogc2Iubm9kZXMubGVuZ3RoLFxuICAgICAgICBtYXA6IGNvbnRlbnRcbiAgICB9XG5cbiAgICBzYi5ub2Rlcy5wdXNoKG5vZGUpXG5cbiAgICByZXR1cm4gbm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJsb2JfYWRkX3RvX3BhcmVudChwYXJlbnQ6IElCbG9iSU5vZGUsIGRpcmVudDogQmxvYkRpckVudF9wdHIsIHNiOiBJQmxvYlN1cGVyTm9kZSl7XG4gICAgKHBhcmVudC5tYXAgYXMgQmxvYkRpckVudF9wdHJbXSkucHVzaChkaXJlbnQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBibG9iX3JlbW92ZV9mcm9tX3BhcmVudChwYXJlbnQ6IElCbG9iSU5vZGUsIGRpcmVudDogQmxvYkRpckVudF9wdHIsIHNiOiBJQmxvYlN1cGVyTm9kZSl7XG4gICAgY29uc3QgbWFwID0gKHBhcmVudC5tYXAgYXMgQmxvYkRpckVudF9wdHJbXSk7XG4gICAgY29uc3QgaW5kZXggPSBtYXAuaW5kZXhPZihkaXJlbnQpO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgIG1hcC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJsb2JfaW5vZGVfZmluZF9jaGlsZChub2RlOiBJQmxvYklOb2RlLCBuYW1lOiBzdHJpbmcsIHNiOiBJQmxvYlN1cGVyTm9kZSk6IEJsb2JEaXJFbnRfcHRyfHVuZGVmaW5lZHtcbiAgICByZXR1cm4gKG5vZGUubWFwIGFzIEJsb2JEaXJFbnRfcHRyW10pLmZpbmQoeCA9PiBzYi5kaXJlbnRzW3hdIS5uYW1lID09ICBuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJsb2JfZGF0YV9hbGxvYyhjb250ZW50OiBzdHJpbmcsIHNiOiBJQmxvYlN1cGVyTm9kZSk6IEJsb2JEYXRhX3B0cntcbiAgICByZXR1cm4gc2IuZGF0YS5wdXNoKGNvbnRlbnQpIC0gMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJsb2JfZ2V0X2RhdGEobm9kZTogSUJsb2JJTm9kZSwgc2I6IElCbG9iU3VwZXJOb2RlKXtcbiAgICByZXR1cm4gc2IuZGF0YVtub2RlLm1hcCBhcyBudW1iZXJdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmxvYl9zZXRfZGF0YShub2RlOiBJQmxvYklOb2RlLCBjb250ZW50OiBzdHJpbmcsIHNiOiBJQmxvYlN1cGVyTm9kZSk6IHN0cmluZ3tcbiAgICByZXR1cm4gc2IuZGF0YVtub2RlLm1hcCBhcyBudW1iZXJdID0gY29udGVudDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/kernel/fs/blobfs/structs.ts\n");

/***/ }),

/***/ "./src/kernel/fs/dcache.ts":
/*!*********************************!*\
  !*** ./src/kernel/fs/dcache.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DirectoryCache\": () => (/* binding */ DirectoryCache)\n/* harmony export */ });\nclass DirectoryCache {\n    kernel;\n    dentries = [];\n    constructor(kernel) {\n        this.kernel = kernel;\n    }\n    allocAnon(sb, name) {\n        let dentry = {\n            mounted: 0,\n            name: name,\n            inode: null,\n            superblock: sb,\n            operations: {},\n            subentry: []\n        };\n        this.dentries.push(dentry);\n        return dentry;\n    }\n    alloc(parent, name) {\n        if (parent) {\n            const cache = this.lookup(parent, name);\n            if (cache) {\n                return cache;\n            }\n            let dentry = this.allocAnon(parent.superblock, name);\n            dentry.parent = parent;\n            parent.subentry.push(dentry);\n            return dentry;\n        }\n        else {\n            return this.allocAnon(null, name);\n        }\n    }\n    invalidate(dentry) {\n        let array = dentry.parent?.subentry;\n        const index = array.indexOf(dentry);\n        if (index > -1) {\n            array.splice(index, 1);\n        }\n    }\n    lookup(parent, name) {\n        return parent.subentry.find(x => x.name == name);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMva2VybmVsL2ZzL2RjYWNoZS50cy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBbUJBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3NzaW1waWJsZS8uL3NyYy9rZXJuZWwvZnMvZGNhY2hlLnRzPzllNDAiXSwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQge0lQYXRoLCBJU3VwZXJCbG9ja30gZnJvbSBcIi4vdmZzXCI7XG5pbXBvcnQge0tlcm5lbH0gZnJvbSBcIi4uL2tlcm5lbFwiO1xuaW1wb3J0IHtJSU5vZGV9IGZyb20gXCIuL2lub2RlXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURFbnRyeU9wZXJhdGlvbnMge1xuICAgIHJldmFsaWRhdGU/OiAoZGVudHJ5OiBJREVudHJ5KSA9PiBib29sZWFuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURFbnRyeSB7XG4gICAgbW91bnRlZDogbnVtYmVyO1xuICAgIHBhcmVudD86IElERW50cnk7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGlub2RlOiBJSU5vZGUgfCBudWxsO1xuICAgIHN1cGVyYmxvY2s6IElTdXBlckJsb2NrfG51bGwsXG4gICAgb3BlcmF0aW9uczogSURFbnRyeU9wZXJhdGlvbnN8bnVsbDtcbiAgICBzdWJlbnRyeTogSURFbnRyeVtdXG59XG5cbmV4cG9ydCBjbGFzcyBEaXJlY3RvcnlDYWNoZXtcbiAgICBwcml2YXRlIGtlcm5lbDogS2VybmVsO1xuICAgIHByaXZhdGUgZGVudHJpZXMgOiBJREVudHJ5W10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKGtlcm5lbDogS2VybmVsKSB7XG4gICAgICAgIHRoaXMua2VybmVsID0ga2VybmVsO1xuICAgIH1cblxuICAgIGFsbG9jQW5vbihzYjogSVN1cGVyQmxvY2t8bnVsbCwgbmFtZTogc3RyaW5nKTogSURFbnRyeXtcbiAgICAgICAgbGV0IGRlbnRyeTpJREVudHJ5ID0ge1xuICAgICAgICAgICAgbW91bnRlZDogMCxcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBpbm9kZTogbnVsbCxcbiAgICAgICAgICAgIHN1cGVyYmxvY2s6IHNiLFxuICAgICAgICAgICAgb3BlcmF0aW9uczoge30sXG4gICAgICAgICAgICBzdWJlbnRyeTogW11cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlbnRyaWVzLnB1c2goZGVudHJ5KTtcbiAgICAgICAgcmV0dXJuIGRlbnRyeTtcbiAgICB9XG5cbiAgICBhbGxvYyhwYXJlbnQ6IElERW50cnl8bnVsbCwgbmFtZTogc3RyaW5nKTogSURFbnRyeXtcbiAgICAgICAgaWYocGFyZW50KXtcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5sb29rdXAocGFyZW50LCBuYW1lKTtcbiAgICAgICAgICAgIGlmKGNhY2hlKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZGVudHJ5ID0gdGhpcy5hbGxvY0Fub24ocGFyZW50LnN1cGVyYmxvY2shLCBuYW1lKTtcblxuICAgICAgICAgICAgZGVudHJ5LnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgICAgIHBhcmVudC5zdWJlbnRyeS5wdXNoKGRlbnRyeSk7XG4gICAgICAgICAgICByZXR1cm4gZGVudHJ5O1xuICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hbGxvY0Fub24obnVsbCwgbmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZhbGlkYXRlKGRlbnRyeTogSURFbnRyeSl7XG4gICAgICAgIGxldCBhcnJheSA9IGRlbnRyeS5wYXJlbnQ/LnN1YmVudHJ5IVxuICAgICAgICBjb25zdCBpbmRleCA9IGFycmF5LmluZGV4T2YoZGVudHJ5KTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsb29rdXAocGFyZW50OiBJREVudHJ5LCBuYW1lOiBzdHJpbmcpe1xuICAgICAgICByZXR1cm4gcGFyZW50LnN1YmVudHJ5LmZpbmQoeCA9PiB4Lm5hbWUgPT0gbmFtZSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/kernel/fs/dcache.ts\n");

/***/ }),

/***/ "./src/kernel/fs/inode.ts":
/*!********************************!*\
  !*** ./src/kernel/fs/inode.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"inode_new\": () => (/* binding */ inode_new),\n/* harmony export */   \"inode_set_ptr\": () => (/* binding */ inode_set_ptr),\n/* harmony export */   \"inode_get_ptr\": () => (/* binding */ inode_get_ptr)\n/* harmony export */ });\nfunction inode_new(sb) {\n    const inode = sb.superblockOperations.alloc_inode(sb);\n    inode.superblock = sb;\n    return inode;\n}\nfunction inode_set_ptr(inode, ptr) {\n    inode.map = ptr;\n}\nfunction inode_get_ptr(inode) {\n    return inode.map;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/kernel/fs/inode.ts\n");

/***/ }),

/***/ "./src/kernel/fs/mount.ts":
/*!********************************!*\
  !*** ./src/kernel/fs/mount.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MountManager\": () => (/* binding */ MountManager)\n/* harmony export */ });\n/* harmony import */ var _procfs_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./procfs/module */ \"./src/kernel/fs/procfs/module.ts\");\n\nclass MountManager {\n    mounts = [];\n    namespaces = [];\n    procdir;\n    constructor(kernel) {\n        this.procdir = (0,_procfs_module__WEBPACK_IMPORTED_MODULE_0__.procCreate)(\"mounts\", null, {\n            read: (file, count) => {\n                return new Promise((resolve, reject) => {\n                    resolve(this.mounts.map(x => {\n                        return `${x.mount.superblock.fileSystemType.name} ${kernel.vfs.path({ entry: x.mount.root, mount: x.mount }, kernel.current)}`;\n                    }).reduce((x, y) => x + \"\\n\" + y) + \"\\n\");\n                });\n            },\n            write: (file, string) => { }\n        });\n    }\n    createNS(parent, clone) {\n        let m = {\n            parent: parent,\n            mounts: [],\n            children: []\n        };\n        this.namespaces.push(m);\n        if (parent) {\n            if (clone) {\n                for (const mount of parent.mounts) {\n                    mount.ns++;\n                    m.mounts.push(mount);\n                }\n                parent.children.push(m);\n            }\n        }\n        return m;\n    }\n    deleteNS(ns) {\n    }\n    create(parent, mountpoint, superblock) {\n        let parentMount = null;\n        if (parent) {\n            for (const mount of this.mounts) {\n                if (mount.mount == parent) {\n                    parentMount = mount;\n                    break;\n                }\n            }\n            if (!parentMount) {\n                throw \"TODO\";\n            }\n        }\n        const vfsmount = {\n            parent: parentMount,\n            mountpoint,\n            mount: {\n                root: superblock.root,\n                superblock\n            },\n            children: [],\n        };\n        this.mounts.push(vfsmount);\n        if (parent) {\n            parentMount.children.push(vfsmount);\n        }\n        mountpoint.mounted++;\n        return vfsmount.mount;\n    }\n    lookupChild(parent, dentry) {\n        for (const mount of this.mounts) {\n            if (mount.parent && mount.parent.mount == parent && mount.mountpoint == dentry) {\n                return mount.mount;\n            }\n        }\n    }\n    lookupMountpoint(mount) {\n        for (const m of this.mounts) {\n            if (m.mount == mount) {\n                if (m.parent) {\n                    return {\n                        entry: m.mountpoint,\n                        mount: m.parent.mount\n                    };\n                }\n            }\n        }\n    }\n    delete(parent, dentry) {\n        for (let i of this.mounts) {\n            if (i.mount.root == dentry) {\n                const a = i.parent?.children;\n                let index = a.indexOf(i);\n                if (index > -1) {\n                    a.splice(index, 1);\n                }\n                index = this.mounts.indexOf(i);\n                if (index > -1) {\n                    this.mounts.splice(index, 1);\n                }\n                i.mountpoint.mounted--;\n                i.mountpoint.superblock = null;\n                return i.mount.superblock;\n            }\n        }\n        throw \"ERROR\";\n    }\n    lookup(path) {\n        for (let pathElement of this.mounts) {\n            if (pathElement.mountpoint == path.entry && pathElement.parent?.mount == path.mount) {\n                return {\n                    entry: pathElement.mount.root,\n                    mount: pathElement.mount\n                };\n            }\n        }\n        return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMva2VybmVsL2ZzL21vdW50LnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBRUE7QUF5QkE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3NzaW1waWJsZS8uL3NyYy9rZXJuZWwvZnMvbW91bnQudHM/MWE3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0lERW50cnl9IGZyb20gXCIuL2RjYWNoZVwiO1xuaW1wb3J0IHtJUGF0aCwgSVN1cGVyQmxvY2t9IGZyb20gXCIuL3Zmc1wiO1xuaW1wb3J0IHtJUHJvY0ZTRW50cnksIHByb2NDcmVhdGUsIHByb2NNa2Rpcn0gZnJvbSBcIi4vcHJvY2ZzL21vZHVsZVwiO1xuaW1wb3J0IHtLZXJuZWx9IGZyb20gXCIuLi9rZXJuZWxcIjtcbmltcG9ydCB7bmFtZWlkYXRhfSBmcm9tIFwiLi9uYW1laVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElWRlNNb3VudHtcbiAgICByb290OiBJREVudHJ5O1xuICAgIHN1cGVyYmxvY2s6IElTdXBlckJsb2NrO1xuICAgIHBhcmVudDogSVZGU01vdW50fG51bGw7XG4gICAgbW91bnRwb2ludDogSURFbnRyeTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTW91bnR7XG4gICAgbnM6IG51bWJlcjtcbiAgICBwYXJlbnQ/OiBJTW91bnQ7XG4gICAgbW91bnRwb2ludDogSURFbnRyeTtcbiAgICBtb3VudDogSVZGU01vdW50O1xuICAgIGNoaWxkcmVuOiBJTW91bnRbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTW91bnROU3tcbiAgICBwYXJlbnQ6SU1vdW50TlN8bnVsbDtcbiAgICBtb3VudHM6SU1vdW50W11cbiAgICBjaGlsZHJlbjpJTW91bnROU1tdXG59XG5cbmV4cG9ydCBjbGFzcyBNb3VudE1hbmFnZXJ7XG4gICAgbW91bnRzOklNb3VudFtdID0gW107XG4gICAgbmFtZXNwYWNlczpJTW91bnROU1tdID0gW107XG4gICAgcHJpdmF0ZSBwcm9jZGlyOiBJUHJvY0ZTRW50cnk7XG5cbiAgICBjb25zdHJ1Y3RvcihrZXJuZWw6IEtlcm5lbCkge1xuICAgICAgICB0aGlzLnByb2NkaXIgPSBwcm9jQ3JlYXRlKFwibW91bnRzXCIsIG51bGwsIHtcbiAgICAgICAgICAgIHJlYWQ6KGZpbGUsIGNvdW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHN0cmluZz4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMubW91bnRzLm1hcCh4ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHt4Lm1vdW50LnN1cGVyYmxvY2suZmlsZVN5c3RlbVR5cGUubmFtZX0gJHtrZXJuZWwudmZzLnBhdGgoe2VudHJ5OngubW91bnQucm9vdCwgbW91bnQ6eC5tb3VudH0sIGtlcm5lbC5jdXJyZW50ISl9YFxuICAgICAgICAgICAgICAgICAgICB9KS5yZWR1Y2UoKHgseSkgPT4geCArIFwiXFxuXCIgKyB5KSArIFwiXFxuXCIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHdyaXRlOihmaWxlLCBzdHJpbmcpID0+IHt9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNyZWF0ZU5TKHBhcmVudDogSU1vdW50TlN8bnVsbCwgY2xvbmU6Ym9vbGVhbik6IElNb3VudE5Te1xuICAgICAgICBsZXQgbTpJTW91bnROUyA9IHtcbiAgICAgICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICAgICAgbW91bnRzOiBbXSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5uYW1lc3BhY2VzLnB1c2gobSk7XG4gICAgICAgIGlmKHBhcmVudCl7XG4gICAgICAgICAgICBpZihjbG9uZSl7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBtb3VudCBvZiBwYXJlbnQubW91bnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vdW50Lm5zKys7XG4gICAgICAgICAgICAgICAgICAgIG0ubW91bnRzLnB1c2gobW91bnQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHBhcmVudC5jaGlsZHJlbi5wdXNoKG0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtO1xuICAgIH1cblxuICAgIGRlbGV0ZU5TKG5zOiBJTW91bnROUyl7XG5cbiAgICB9XG5cbiAgICBjcmVhdGUocGFyZW50OiBJVkZTTW91bnR8bnVsbCwgbW91bnRwb2ludDogSURFbnRyeSwgc3VwZXJibG9jazogSVN1cGVyQmxvY2spOiBJVkZTTW91bnR7XG4gICAgICAgIGxldCBwYXJlbnRNb3VudDogSU1vdW50fG51bGwgPSBudWxsO1xuICAgICAgICBpZihwYXJlbnQpe1xuICAgICAgICAgICAgZm9yIChjb25zdCBtb3VudCBvZiB0aGlzLm1vdW50cykge1xuICAgICAgICAgICAgICAgIGlmKG1vdW50Lm1vdW50ID09IHBhcmVudCl7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudE1vdW50ID0gbW91bnQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcGFyZW50TW91bnQpeyB0aHJvdyBcIlRPRE9cIiB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmZzbW91bnQ6YW55ID0ge1xuICAgICAgICAgICAgcGFyZW50OiBwYXJlbnRNb3VudCxcbiAgICAgICAgICAgIG1vdW50cG9pbnQsXG4gICAgICAgICAgICBtb3VudDoge1xuICAgICAgICAgICAgICAgIHJvb3Q6IHN1cGVyYmxvY2sucm9vdCxcbiAgICAgICAgICAgICAgICBzdXBlcmJsb2NrXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICB9XG4gICAgICAgIHRoaXMubW91bnRzLnB1c2godmZzbW91bnQpO1xuICAgICAgICBpZihwYXJlbnQpe1xuICAgICAgICAgICAgcGFyZW50TW91bnQhLmNoaWxkcmVuLnB1c2godmZzbW91bnQpO1xuICAgICAgICB9XG4gICAgICAgIG1vdW50cG9pbnQubW91bnRlZCsrO1xuICAgICAgICByZXR1cm4gdmZzbW91bnQubW91bnQ7XG4gICAgfVxuXG4gICAgbG9va3VwQ2hpbGQocGFyZW50OiBJVkZTTW91bnQsIGRlbnRyeTogSURFbnRyeSk6IElWRlNNb3VudHx1bmRlZmluZWR7XG4gICAgICAgIGZvciAoY29uc3QgbW91bnQgb2YgdGhpcy5tb3VudHMpIHtcbiAgICAgICAgICAgIGlmKG1vdW50LnBhcmVudCAmJiBtb3VudC5wYXJlbnQubW91bnQgPT0gcGFyZW50ICYmIG1vdW50Lm1vdW50cG9pbnQgPT0gZGVudHJ5KXtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW91bnQubW91bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsb29rdXBNb3VudHBvaW50KG1vdW50OiBJVkZTTW91bnQpOiBJUGF0aHx1bmRlZmluZWR7XG4gICAgICAgIGZvciAoY29uc3QgbSBvZiB0aGlzLm1vdW50cykge1xuICAgICAgICAgICAgaWYobS5tb3VudCA9PSBtb3VudCl7XG4gICAgICAgICAgICAgICAgaWYobS5wYXJlbnQpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50cnk6IG0ubW91bnRwb2ludCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdW50OiBtLnBhcmVudC5tb3VudFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlbGV0ZShwYXJlbnQ6IElWRlNNb3VudCwgZGVudHJ5OiBJREVudHJ5KTogSVN1cGVyQmxvY2t7XG4gICAgICAgIGZvciAobGV0IGkgb2YgdGhpcy5tb3VudHMpe1xuICAgICAgICAgICAgaWYoaS5tb3VudC5yb290ID09IGRlbnRyeSl7XG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IGkucGFyZW50Py5jaGlsZHJlbiE7XG4gICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gYS5pbmRleE9mKGkpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpbmRleCA9IHRoaXMubW91bnRzLmluZGV4T2YoaSlcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdW50cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGkubW91bnRwb2ludC5tb3VudGVkLS07XG4gICAgICAgICAgICAgICAgaS5tb3VudHBvaW50LnN1cGVyYmxvY2sgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGkubW91bnQuc3VwZXJibG9ja1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IFwiRVJST1JcIjtcbiAgICB9XG5cbiAgICBsb29rdXAocGF0aDogSVBhdGgpOiBJUGF0aHxudWxsIHtcbiAgICAgICAgZm9yIChsZXQgcGF0aEVsZW1lbnQgb2YgdGhpcy5tb3VudHMpIHtcbiAgICAgICAgICAgIGlmKHBhdGhFbGVtZW50Lm1vdW50cG9pbnQgPT0gcGF0aC5lbnRyeSAmJiBwYXRoRWxlbWVudC5wYXJlbnQ/Lm1vdW50ID09IHBhdGgubW91bnQpe1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGVudHJ5OiBwYXRoRWxlbWVudC5tb3VudC5yb290LFxuICAgICAgICAgICAgICAgICAgICBtb3VudDogcGF0aEVsZW1lbnQubW91bnRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxufVxuXG5cblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/kernel/fs/mount.ts\n");

/***/ }),

/***/ "./src/kernel/fs/namei.ts":
/*!********************************!*\
  !*** ./src/kernel/fs/namei.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Last\": () => (/* binding */ Last),\n/* harmony export */   \"Lookup\": () => (/* binding */ Lookup),\n/* harmony export */   \"NameI\": () => (/* binding */ NameI)\n/* harmony export */ });\n/* harmony import */ var _public_status__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../public/status */ \"./src/public/status.ts\");\n\nvar Last;\n(function (Last) {\n    Last[Last[\"NORM\"] = 0] = \"NORM\";\n    Last[Last[\"ROOT\"] = 1] = \"ROOT\";\n    Last[Last[\"DOT\"] = 2] = \"DOT\";\n    Last[Last[\"DOTDOT\"] = 3] = \"DOTDOT\";\n    Last[Last[\"BIND\"] = 4] = \"BIND\";\n})(Last || (Last = {}));\nvar Lookup;\n(function (Lookup) {\n    // If the last component is a symbolic link, interpret (follow) it\n    Lookup[Lookup[\"FOLLOW\"] = 1] = \"FOLLOW\";\n    // The last component must be a directory\n    Lookup[Lookup[\"DIRECTORY\"] = 2] = \"DIRECTORY\";\n    // There are still filenames to be examined in the pathname\n    Lookup[Lookup[\"CONTINUE\"] = 4] = \"CONTINUE\";\n    // There are still filenames to be examined in the pathname\n    Lookup[Lookup[\"PARENT\"] = 16] = \"PARENT\";\n    // Do not consider the emulated root directory (useless in the 80 x 86 architecture)\n    Lookup[Lookup[\"NOALT\"] = 64] = \"NOALT\";\n    Lookup[Lookup[\"REVAL\"] = 64] = \"REVAL\";\n    // Intent is to open a file\n    Lookup[Lookup[\"OPEN\"] = 256] = \"OPEN\";\n    // Intent is to create a file (if it doesn’t exist)\n    Lookup[Lookup[\"CREATE\"] = 512] = \"CREATE\";\n    // Intent is to check user’s permission for a file\n    Lookup[Lookup[\"ACCESS\"] = 1024] = \"ACCESS\";\n    Lookup[Lookup[\"RENAME_TARGET\"] = 2048] = \"RENAME_TARGET\";\n    Lookup[Lookup[\"JUMPED\"] = 4096] = \"JUMPED\";\n    Lookup[Lookup[\"ROOT\"] = 8192] = \"ROOT\";\n    Lookup[Lookup[\"EMPTY\"] = 16384] = \"EMPTY\";\n})(Lookup || (Lookup = {}));\nclass NameI {\n    kernel;\n    constructor(kernel) {\n        this.kernel = kernel;\n    }\n    pathInit(name, flags, task) {\n        const nd = {\n            last: \"\",\n            lastType: Last.ROOT,\n            flags: flags | Lookup.JUMPED,\n            depth: 0,\n            root: {\n                entry: task.root.entry,\n                mount: task.root.mount\n            },\n            path: {\n                entry: task.pwd.entry,\n                mount: task.pwd.mount\n            }\n        };\n        if (flags & Lookup.ROOT) {\n            let inode = nd.root.entry.inode;\n            if (name.length) {\n                if (!inode?.operations.lookup) {\n                    throw new _public_status__WEBPACK_IMPORTED_MODULE_0__.PError(_public_status__WEBPACK_IMPORTED_MODULE_0__.Status.ENOTDIR);\n                }\n                nd.path.entry = task.root.entry;\n                nd.path.mount = task.root.mount;\n            }\n        }\n        if (name[0] == \"/\") {\n            nd.path.entry = task.root.entry;\n            nd.path.mount = task.root.mount;\n        }\n        else {\n            nd.path.entry = task.pwd.entry;\n            nd.path.mount = task.pwd.mount;\n        }\n        nd.inode = nd.path.entry.inode;\n        return nd;\n    }\n    lookupLast(nd) {\n        if (nd.lastType == Last.NORM && nd.last[nd.lastLen])\n            nd.flags |= Lookup.FOLLOW | Lookup.DIRECTORY;\n        nd.flags &= ~Lookup.PARENT;\n        this.walk_component(nd, nd.last, nd.lastType, nd.flags);\n    }\n    pathLookup(name, flags, task) {\n        let nd = this.pathInit(name, flags, task);\n        this.linkPathLookup(name, nd);\n        if (!(flags & Lookup.PARENT)) {\n            this.lookupLast(nd);\n        }\n        return nd;\n    }\n    linkPathLookup(name, nd) {\n        let pos = 0;\n        let lookup_flags = nd.flags;\n        while (name[pos] == \"/\")\n            pos++;\n        if (pos == name.length) {\n            return;\n        }\n        let s = pos;\n        while (true) {\n            let type;\n            let this_name;\n            nd.flags |= Lookup.CONTINUE;\n            // TODO: check permissions\n            let start = pos;\n            do {\n                pos++;\n            } while (name[pos] != \"/\" && pos < name.length);\n            this_name = name.substring(start, pos);\n            type = Last.NORM;\n            if (this_name[0] == \".\")\n                switch (this_name.length) {\n                    case 2:\n                        if (this_name[1] == \".\") {\n                            type = Last.DOTDOT;\n                            nd.flags |= Lookup.JUMPED;\n                        }\n                        break;\n                    case 1:\n                        type = Last.DOT;\n                }\n            if (type == Last.NORM) {\n                let parent = nd.path.entry;\n                nd.flags &= ~Lookup.JUMPED;\n            }\n            if (pos == name.length) {\n                nd.flags &= lookup_flags | ~Lookup.CONTINUE;\n                nd.last = this_name;\n                nd.lastLen = pos;\n                nd.lastType = type;\n                return;\n            }\n            while (name[pos] == \"/\" && pos < name.length)\n                pos++;\n            if (pos == name.length) {\n                nd.flags &= lookup_flags | ~Lookup.CONTINUE;\n                nd.last = this_name;\n                nd.lastLen = pos;\n                nd.lastType = type;\n                return;\n            }\n            this.walk_component(nd, this_name, type, Lookup.FOLLOW);\n            // TODO: check symlink\n            if (!nd.inode.operations.lookup) {\n                throw new _public_status__WEBPACK_IMPORTED_MODULE_0__.PError(_public_status__WEBPACK_IMPORTED_MODULE_0__.Status.ENOTDIR);\n            }\n        }\n    }\n    lookup_create(nd, is_dir) {\n        if (nd.lastType != Last.NORM) {\n            throw new _public_status__WEBPACK_IMPORTED_MODULE_0__.PError(_public_status__WEBPACK_IMPORTED_MODULE_0__.Status.EEXIST);\n        }\n        nd.flags &= ~Lookup.PARENT;\n        nd.flags |= Lookup.CREATE;\n        // intent O_EXCL;\n        let dentry = this.kernel.vfs.dcache.alloc(nd.path.entry, nd.last);\n        if (dentry.inode) {\n            throw new _public_status__WEBPACK_IMPORTED_MODULE_0__.PError(_public_status__WEBPACK_IMPORTED_MODULE_0__.Status.EEXIST);\n        }\n        if (!is_dir && nd.last[nd.lastLen]) {\n            throw new _public_status__WEBPACK_IMPORTED_MODULE_0__.PError(_public_status__WEBPACK_IMPORTED_MODULE_0__.Status.EEXIST);\n        }\n        return dentry;\n    }\n    follow_up(path) {\n        let parent;\n        let mountpoint;\n        parent = path.mount.parent;\n        if (parent) {\n            return 0;\n        }\n        let parentpath = this.kernel.vfs.mounts.lookupMountpoint(path.mount);\n        path.entry = parentpath?.entry;\n        path.mount = parentpath?.mount;\n        return 1;\n    }\n    follow_dotdot(nd) {\n        while (1) {\n            let od = nd.path.entry;\n            if (nd.path.entry == nd.root.entry &&\n                nd.path.mount == nd.root.mount) {\n                break;\n            }\n            if (nd.path.entry != nd.path.mount?.root) {\n                nd.path.entry = nd.path.entry.parent;\n                break;\n            }\n            if (!this.follow_up(nd.path)) {\n                break;\n            }\n        }\n        this.followMount(nd);\n        nd.inode = nd.path.entry.inode;\n    }\n    handle_dots(nd, type) {\n        if (type == Last.DOTDOT) {\n            this.follow_dotdot(nd);\n        }\n        return;\n    }\n    walk_component(nd, name, type, flags) {\n        if (type != Last.NORM) {\n            return this.handle_dots(nd, type);\n        }\n        let entry = this.do_lookup(nd, name);\n        if (!entry.inode) {\n            throw new _public_status__WEBPACK_IMPORTED_MODULE_0__.PError(_public_status__WEBPACK_IMPORTED_MODULE_0__.Status.ENOENT);\n        }\n    }\n    do_lookup(nd, component) {\n        let child = this.kernel.vfs.dcache.alloc(nd.path.entry, component);\n        let other = nd.path.entry?.inode.operations.lookup?.(nd.path.entry?.inode, child);\n        if (other) {\n            nd.path.entry = other;\n            this.followMount(nd);\n            return other;\n        }\n        else {\n            throw new _public_status__WEBPACK_IMPORTED_MODULE_0__.PError(_public_status__WEBPACK_IMPORTED_MODULE_0__.Status.ENOENT);\n        }\n    }\n    followMount(nd) {\n        if (nd.path.entry.mounted) {\n            const l = this.kernel.vfs.mounts.lookup(nd.path);\n            if (l) {\n                nd.path.entry = l.entry;\n                nd.path.mount = l.mount;\n            }\n        }\n    }\n    mkdir(dir, dentry) {\n        if (dir.operations.mkdir) {\n            dir.operations.mkdir(dir, dentry);\n        }\n        else {\n            throw new _public_status__WEBPACK_IMPORTED_MODULE_0__.PError(_public_status__WEBPACK_IMPORTED_MODULE_0__.Status.EPERM);\n        }\n    }\n    rmdir(dir, dentry) {\n        if (!dir.operations.rmdir) {\n            throw new _public_status__WEBPACK_IMPORTED_MODULE_0__.PError(_public_status__WEBPACK_IMPORTED_MODULE_0__.Status.EPERM);\n        }\n        else {\n            if (dentry.mounted) {\n                throw new _public_status__WEBPACK_IMPORTED_MODULE_0__.PError(_public_status__WEBPACK_IMPORTED_MODULE_0__.Status.EBUSY);\n            }\n            else {\n                dir.operations.rmdir(dir, dentry);\n                this.kernel.vfs.dcache.invalidate(dentry);\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/kernel/fs/namei.ts\n");

/***/ }),

/***/ "./src/kernel/fs/procfs/module.ts":
/*!****************************************!*\
  !*** ./src/kernel/fs/procfs/module.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"procCreate\": () => (/* binding */ procCreate),\n/* harmony export */   \"procMkdir\": () => (/* binding */ procMkdir),\n/* harmony export */   \"procRemove\": () => (/* binding */ procRemove),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _inode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../inode */ \"./src/kernel/fs/inode.ts\");\n\nconst proctree = {\n    valid: true,\n    name: \"\",\n    parent: null,\n    operations: undefined,\n    children: []\n};\nfunction procCreate(name, parent, operations) {\n    if (parent == null) {\n        parent = proctree;\n    }\n    const entry = {\n        name,\n        valid: true,\n        parent: parent,\n        operations,\n        children: []\n    };\n    parent.children.push(entry);\n    return entry;\n}\nfunction procMkdir(name, parent) {\n    if (parent == null) {\n        parent = proctree;\n    }\n    const entry = {\n        name,\n        parent: parent,\n        valid: true,\n        operations: undefined,\n        children: []\n    };\n    parent.children.push(entry);\n    return entry;\n}\nfunction procRemove(entry) {\n    const index = entry.parent.children.indexOf(entry);\n    if (index > -1) {\n        entry.parent.children.splice(index, 1);\n        entry.valid = false;\n    }\n}\nconst inodeOperators = {\n    getattr: async (vfsmount, dentry) => {\n        return \"\";\n    },\n    lookup: (node, entry) => {\n        const x = node.map.children.find(x => entry.name == x.name);\n        entry.inode = (0,_inode__WEBPACK_IMPORTED_MODULE_0__.inode_new)(node.superblock);\n        entry.inode.map = x;\n        return entry;\n    }\n};\nconst fileOperations = {\n    read: async (file, count) => {\n        const entry = file.dentry.inode.map;\n        return entry.operations.read(file, count);\n    },\n    write: async (file, buf) => {\n        const entry = file.dentry.inode.map;\n        return entry.operations.write(file, buf);\n    },\n    iterate: (file) => {\n        return new Promise(resolve => {\n            if (!file.dentry.inode.map.operations) {\n                resolve(Array.from(file.dentry.inode.map.children.map(x => {\n                    return { name: x.name };\n                })));\n            }\n            else {\n                resolve([]);\n            }\n        });\n    }\n};\nconst dentryOperations = {\n    revalidate(dentry) {\n        return dentry.inode?.map.valid;\n    }\n};\nconst superblockOperations = {\n    alloc_inode(sb) {\n        return {\n            mode: true,\n            user: true,\n            map: null,\n            isLink: false,\n            superblock: sb,\n            operations: inodeOperators,\n            fileOperations: fileOperations\n        };\n    },\n    destroy_inode(inode) {\n    },\n    dirty_inode(inode) {\n    },\n    put_inode(inode) {\n    },\n    put_super(sb) {\n    },\n    sync_fs(sb) {\n    },\n    write_inode(inode) {\n    },\n    write_super(sb) {\n    }\n};\nasync function mount(device, options) {\n    let entry = KERNEL.vfs.dcache.alloc(null, \"\");\n    const sb = {\n        device: \"dev\",\n        fileSystemType: fs,\n        superblockOperations: superblockOperations,\n        root: entry\n    };\n    entry.inode = (0,_inode__WEBPACK_IMPORTED_MODULE_0__.inode_new)(sb);\n    entry.inode.map = proctree;\n    return sb;\n}\nconst fs = {\n    name: \"proc\",\n    mount: mount,\n    unmount: sb => { }\n};\nlet KERNEL;\nfunction init(kernel) {\n    kernel.vfs.registerFS(fs);\n    KERNEL = kernel;\n}\nfunction cleanup() {\n}\nconst m = {\n    name: \"procfs\",\n    init: init,\n    cleanup: cleanup\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (m);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMva2VybmVsL2ZzL3Byb2Nmcy9tb2R1bGUudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFVQTtBQWdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9zc2ltcGlibGUvLi9zcmMva2VybmVsL2ZzL3Byb2Nmcy9tb2R1bGUudHM/YmFjZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0tlcm5lbH0gZnJvbSBcIi4uLy4uL2tlcm5lbFwiO1xuaW1wb3J0IHtJS2VybmVsTW9kdWxlfSBmcm9tIFwiLi4vLi4vc3lzL21vZHVsZXNcIjtcbmltcG9ydCB7XG4gICAgSUZpbGUsXG4gICAgSUZpbGVPcGVyYXRpb25zLFxuICAgIElGaWxlU3lzdGVtVHlwZSwgSVBvbGxUYWJsZSxcbiAgICBJU3VwZXJCbG9jaywgSVN1cGVyQmxvY2tPcGVyYXRpb25zLCBMTFNlZWtXaGVuY2UsIExvY2tPcGVyYXRpb25cbn0gZnJvbSBcIi4uL3Zmc1wiO1xuaW1wb3J0IHtJREVudHJ5LCBJREVudHJ5T3BlcmF0aW9uc30gZnJvbSBcIi4uL2RjYWNoZVwiO1xuaW1wb3J0IHtJRGlyZWN0b3J5RW50cnl9IGZyb20gXCIuLi8uLi8uLi9wdWJsaWMvYXBpXCI7XG5pbXBvcnQge0lJTm9kZSwgSUlOb2RlT3BlcmF0aW9ucywgaW5vZGVfbmV3fSBmcm9tIFwiLi4vaW5vZGVcIjtcbmltcG9ydCB7SVZGU01vdW50fSBmcm9tIFwiLi4vbW91bnRcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJUHJvY0ZTT3BlcmF0aW9uc3tcbiAgICByZWFkOiAoZmlsZTogSUZpbGUsIGNvdW50KSA9PiBQcm9taXNlPHN0cmluZz47XG4gICAgd3JpdGU6IChmaWxlOiBJRmlsZSwgc3RyaW5nKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9jRlNFbnRyeXtcbiAgICB2YWxpZDogYm9vbGVhbjtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgcGFyZW50OiBJUHJvY0ZTRW50cnl8bnVsbDtcbiAgICBvcGVyYXRpb25zPzogSVByb2NGU09wZXJhdGlvbnM7XG4gICAgY2hpbGRyZW46IElQcm9jRlNFbnRyeVtdO1xufVxuXG5jb25zdCBwcm9jdHJlZTogSVByb2NGU0VudHJ5ID0ge1xuICAgIHZhbGlkOiB0cnVlLFxuICAgIG5hbWU6IFwiXCIsXG4gICAgcGFyZW50OiBudWxsLFxuICAgIG9wZXJhdGlvbnM6IHVuZGVmaW5lZCxcbiAgICBjaGlsZHJlbjogW11cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb2NDcmVhdGUobmFtZTpzdHJpbmcsIHBhcmVudDpJUHJvY0ZTRW50cnl8bnVsbCwgb3BlcmF0aW9uczpJUHJvY0ZTT3BlcmF0aW9ucyk6IElQcm9jRlNFbnRyeXtcbiAgICBpZihwYXJlbnQgPT0gbnVsbCl7XG4gICAgICAgIHBhcmVudCA9IHByb2N0cmVlO1xuICAgIH1cbiAgICBjb25zdCBlbnRyeSA9IHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdmFsaWQ6IHRydWUsXG4gICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICBvcGVyYXRpb25zLFxuICAgICAgICBjaGlsZHJlbjogW11cbiAgICB9O1xuICAgIHBhcmVudC5jaGlsZHJlbi5wdXNoKGVudHJ5KTtcbiAgICByZXR1cm4gZW50cnk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9jTWtkaXIobmFtZTpzdHJpbmcsIHBhcmVudDpJUHJvY0ZTRW50cnl8bnVsbCk6IElQcm9jRlNFbnRyeXtcbiAgICBpZihwYXJlbnQgPT0gbnVsbCl7XG4gICAgICAgIHBhcmVudCA9IHByb2N0cmVlO1xuICAgIH1cbiAgICBjb25zdCBlbnRyeSA9IHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICAgIHZhbGlkOiB0cnVlLFxuICAgICAgICBvcGVyYXRpb25zOiB1bmRlZmluZWQsXG4gICAgICAgIGNoaWxkcmVuOiBbXVxuICAgIH07XG4gICAgcGFyZW50LmNoaWxkcmVuLnB1c2goZW50cnkpO1xuICAgIHJldHVybiBlbnRyeTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb2NSZW1vdmUoZW50cnk6SVByb2NGU0VudHJ5KXtcbiAgICBjb25zdCBpbmRleCA9IGVudHJ5LnBhcmVudCEuY2hpbGRyZW4uaW5kZXhPZihlbnRyeSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgZW50cnkucGFyZW50IS5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBlbnRyeS52YWxpZCA9IGZhbHNlO1xuICAgIH1cbn1cblxuY29uc3QgaW5vZGVPcGVyYXRvcnM6IElJTm9kZU9wZXJhdGlvbnMgPSB7XG4gICAgZ2V0YXR0cjogYXN5bmMgKHZmc21vdW50OiBJVkZTTW91bnQsIGRlbnRyeTogSURFbnRyeSk6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH0sXG4gICAgbG9va3VwOiAobm9kZSxlbnRyeSkgPT4ge1xuICAgICAgICBjb25zdCB4ID0gbm9kZS5tYXAuY2hpbGRyZW4uZmluZCh4ID0+IGVudHJ5Lm5hbWUgPT0geC5uYW1lKTtcbiAgICAgICAgZW50cnkuaW5vZGUgPSBpbm9kZV9uZXcobm9kZS5zdXBlcmJsb2NrKTtcbiAgICAgICAgZW50cnkuaW5vZGUubWFwID0geDtcblxuICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgfVxufVxuXG5jb25zdCBmaWxlT3BlcmF0aW9uczogSUZpbGVPcGVyYXRpb25zID0ge1xuICAgIHJlYWQ6IGFzeW5jIChmaWxlLCBjb3VudCkgPT4ge1xuICAgICAgICBjb25zdCBlbnRyeSA9IGZpbGUuZGVudHJ5Lmlub2RlIS5tYXAgYXMgSVByb2NGU0VudHJ5O1xuICAgICAgICByZXR1cm4gZW50cnkub3BlcmF0aW9ucyEucmVhZChmaWxlLCBjb3VudCk7XG4gICAgfSxcbiAgICB3cml0ZTogYXN5bmMgKGZpbGUsIGJ1ZikgPT4ge1xuICAgICAgICBjb25zdCBlbnRyeSA9IGZpbGUuZGVudHJ5Lmlub2RlIS5tYXAgYXMgSVByb2NGU0VudHJ5O1xuICAgICAgICByZXR1cm4gZW50cnkub3BlcmF0aW9ucyEud3JpdGUoZmlsZSwgYnVmKTtcbiAgICB9LFxuICAgIGl0ZXJhdGU6IChmaWxlKTogUHJvbWlzZTxJRGlyZWN0b3J5RW50cnlbXT4gPT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8SURpcmVjdG9yeUVudHJ5W10+KHJlc29sdmUgPT4ge1xuXG4gICAgICAgICAgICBpZighZmlsZS5kZW50cnkuaW5vZGUhLm1hcC5vcGVyYXRpb25zKXtcbiAgICAgICAgICAgICAgICByZXNvbHZlKEFycmF5LmZyb20oZmlsZS5kZW50cnkuaW5vZGUhLm1hcC5jaGlsZHJlbi5tYXAoeCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7bmFtZTogeC5uYW1lfTtcbiAgICAgICAgICAgICAgICB9KSkpO1xuICAgICAgICAgICAgfSBlbHNle1xuICAgICAgICAgICAgICAgIHJlc29sdmUoW10gYXMgSURpcmVjdG9yeUVudHJ5W10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cbn1cblxuY29uc3QgZGVudHJ5T3BlcmF0aW9uczogSURFbnRyeU9wZXJhdGlvbnMgPSB7XG4gICAgcmV2YWxpZGF0ZShkZW50cnkpIDogYm9vbGVhbntcbiAgICAgICAgcmV0dXJuIGRlbnRyeS5pbm9kZT8ubWFwLnZhbGlkO1xuICAgIH1cbn1cblxuY29uc3Qgc3VwZXJibG9ja09wZXJhdGlvbnM6IElTdXBlckJsb2NrT3BlcmF0aW9ucyA9e1xuICAgIGFsbG9jX2lub2RlKHNiOiBJU3VwZXJCbG9jayk6IElJTm9kZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtb2RlOiB0cnVlLFxuICAgICAgICAgICAgdXNlcjogdHJ1ZSxcbiAgICAgICAgICAgIG1hcDogbnVsbCxcbiAgICAgICAgICAgIGlzTGluazogZmFsc2UsXG4gICAgICAgICAgICBzdXBlcmJsb2NrOiBzYixcbiAgICAgICAgICAgIG9wZXJhdGlvbnM6IGlub2RlT3BlcmF0b3JzLFxuICAgICAgICAgICAgZmlsZU9wZXJhdGlvbnM6IGZpbGVPcGVyYXRpb25zXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBkZXN0cm95X2lub2RlKGlub2RlOiBJSU5vZGUpOiB2b2lkIHtcbiAgICB9LFxuICAgIGRpcnR5X2lub2RlKGlub2RlOiBJSU5vZGUpOiB2b2lkIHtcbiAgICB9LFxuICAgIHB1dF9pbm9kZShpbm9kZTogSUlOb2RlKTogdm9pZCB7XG4gICAgfSxcbiAgICBwdXRfc3VwZXIoc2I6IElTdXBlckJsb2NrKTogdm9pZCB7XG4gICAgfSxcbiAgICBzeW5jX2ZzKHNiOiBJU3VwZXJCbG9jayk6IHZvaWQge1xuICAgIH0sXG4gICAgd3JpdGVfaW5vZGUoaW5vZGU6IElJTm9kZSk6IHZvaWQge1xuICAgIH0sXG4gICAgd3JpdGVfc3VwZXIoc2I6IElTdXBlckJsb2NrKTogdm9pZCB7XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBtb3VudChkZXZpY2U6IHN0cmluZywgb3B0aW9uczpzdHJpbmcpOiBQcm9taXNlPElTdXBlckJsb2NrPntcbiAgICBsZXQgZW50cnkgPSBLRVJORUwudmZzLmRjYWNoZS5hbGxvYyhudWxsLCBcIlwiKTtcbiAgICBjb25zdCBzYiA9IHtcbiAgICAgICAgZGV2aWNlOiBcImRldlwiLFxuICAgICAgICBmaWxlU3lzdGVtVHlwZTogZnMsXG4gICAgICAgIHN1cGVyYmxvY2tPcGVyYXRpb25zOiBzdXBlcmJsb2NrT3BlcmF0aW9ucyxcbiAgICAgICAgcm9vdDogZW50cnlcbiAgICB9XG4gICAgZW50cnkuaW5vZGUgPSBpbm9kZV9uZXcoc2IpO1xuICAgIGVudHJ5Lmlub2RlLm1hcCA9IHByb2N0cmVlXG5cblxuICAgIHJldHVybiBzYjtcbn1cblxuY29uc3QgZnM6IElGaWxlU3lzdGVtVHlwZSA9IHtcbiAgICBuYW1lOlwicHJvY1wiLFxuICAgIG1vdW50OiBtb3VudCxcbiAgICB1bm1vdW50OiBzYiA9PiB7fVxufVxubGV0IEtFUk5FTDogS2VybmVsO1xuXG5mdW5jdGlvbiBpbml0KGtlcm5lbDogS2VybmVsKXtcblxuICAgIGtlcm5lbC52ZnMucmVnaXN0ZXJGUyhmcyk7XG4gICAgS0VSTkVMID0ga2VybmVsO1xufVxuXG5mdW5jdGlvbiBjbGVhbnVwKCl7XG5cbn1cblxuY29uc3QgbTogSUtlcm5lbE1vZHVsZSA9IHtcbiAgICBuYW1lOiBcInByb2Nmc1wiLFxuICAgIGluaXQ6IGluaXQsXG4gICAgY2xlYW51cDogY2xlYW51cFxufVxuXG5leHBvcnQgZGVmYXVsdCBtO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/kernel/fs/procfs/module.ts\n");

/***/ }),

/***/ "./src/kernel/fs/vfs.ts":
/*!******************************!*\
  !*** ./src/kernel/fs/vfs.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MkNodeMode\": () => (/* binding */ MkNodeMode),\n/* harmony export */   \"LLSeekWhence\": () => (/* binding */ LLSeekWhence),\n/* harmony export */   \"LockOperation\": () => (/* binding */ LockOperation),\n/* harmony export */   \"dir_add_dots\": () => (/* binding */ dir_add_dots),\n/* harmony export */   \"VirtualFileSystem\": () => (/* binding */ VirtualFileSystem)\n/* harmony export */ });\n/* harmony import */ var _dcache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dcache */ \"./src/kernel/fs/dcache.ts\");\n/* harmony import */ var _mount__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mount */ \"./src/kernel/fs/mount.ts\");\n/* harmony import */ var _public_status__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../public/status */ \"./src/public/status.ts\");\n/* harmony import */ var _namei__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./namei */ \"./src/kernel/fs/namei.ts\");\n\n\n\n\nvar MkNodeMode;\n(function (MkNodeMode) {\n    MkNodeMode[MkNodeMode[\"BLOCK\"] = 0] = \"BLOCK\";\n    MkNodeMode[MkNodeMode[\"CHAR\"] = 1] = \"CHAR\";\n    MkNodeMode[MkNodeMode[\"PIPE\"] = 2] = \"PIPE\";\n})(MkNodeMode || (MkNodeMode = {}));\nvar LLSeekWhence;\n(function (LLSeekWhence) {\n    LLSeekWhence[LLSeekWhence[\"SEEK_SET\"] = 0] = \"SEEK_SET\";\n    LLSeekWhence[LLSeekWhence[\"SEEK_CUR\"] = 1] = \"SEEK_CUR\";\n    LLSeekWhence[LLSeekWhence[\"SEEK_END\"] = 2] = \"SEEK_END\";\n})(LLSeekWhence || (LLSeekWhence = {}));\nvar LockOperation;\n(function (LockOperation) {\n    LockOperation[LockOperation[\"LOCK_SHARED\"] = 0] = \"LOCK_SHARED\";\n    LockOperation[LockOperation[\"LOCK_EXCLUSIVE\"] = 1] = \"LOCK_EXCLUSIVE\";\n    LockOperation[LockOperation[\"LOCK_UNLOCK\"] = 2] = \"LOCK_UNLOCK\";\n    LockOperation[LockOperation[\"LOCK_NONBLOCK\"] = 3] = \"LOCK_NONBLOCK\";\n})(LockOperation || (LockOperation = {}));\nfunction dir_add_dots(list) {\n    list.push({ name: \".\" });\n    list.push({ name: \"..\" });\n}\nclass DCache {\n    root;\n    constructor() { }\n}\nconst DIV = \"/\";\nclass VirtualFileSystem {\n    filesystems = {};\n    root;\n    kernel;\n    mounts;\n    dcache;\n    namei;\n    constructor(kernel) {\n        this.kernel = kernel;\n        this.mounts = new _mount__WEBPACK_IMPORTED_MODULE_1__.MountManager(this.kernel);\n        this.dcache = new _dcache__WEBPACK_IMPORTED_MODULE_0__.DirectoryCache(this.kernel);\n        this.namei = new _namei__WEBPACK_IMPORTED_MODULE_3__.NameI(this.kernel);\n    }\n    async mount(device, options, mount, entry, filesystem) {\n        let sb = await filesystem.mount(device, options, this.kernel);\n        let vfsmnt = this.mounts.create(mount, entry, sb);\n        entry.superblock = sb;\n        entry.mounted++;\n        return vfsmnt;\n    }\n    async unmount(mount, entry) {\n        let sb = this.mounts.delete(mount, entry);\n        sb.fileSystemType.unmount(sb);\n        entry.superblock = null;\n        entry.mounted--;\n        return;\n    }\n    registerFS(fst) {\n        this.filesystems[fst.name] = fst;\n    }\n    getFS(name) {\n        return this.filesystems[name];\n    }\n    async open(path) {\n        if (path.entry.inode) {\n            const file = {\n                position: 0,\n                dentry: path.entry,\n                operations: path.entry.inode.fileOperations\n            };\n            if (path.entry.inode.fileOperations.open) {\n                await path.entry.inode.fileOperations.open(path.entry.inode, file);\n            }\n            return file;\n        }\n        else {\n            throw new _public_status__WEBPACK_IMPORTED_MODULE_2__.PError(_public_status__WEBPACK_IMPORTED_MODULE_2__.Status.ENOENT);\n        }\n    }\n    path(path, task) {\n        let buf = \"\";\n        let p = path;\n        while (p) {\n            let entry = p.entry;\n            let mount = p.mount;\n            while (entry.parent != null && entry != task.root.entry) {\n                buf = \"/\" + entry.name + buf;\n                entry = entry.parent;\n            }\n            if (entry != task.root.entry) {\n                p = this.kernel.vfs.mounts.lookupMountpoint(mount);\n            }\n            else {\n                return buf.length ? buf : \"/\";\n            }\n        }\n        return buf.length ? buf : \"/\";\n    }\n    findRoot(path) {\n        let p = path;\n        let entry = p.entry;\n        let mount = p.mount;\n        while (p) {\n            entry = p.entry;\n            mount = p.mount;\n            while (entry.parent != null) {\n                entry = entry.parent;\n            }\n            p = this.kernel.vfs.mounts.lookupMountpoint(mount);\n        }\n        return { mount: mount, entry: entry };\n    }\n    mkdir(path, task) {\n        const nd = this.namei.pathLookup(path, _namei__WEBPACK_IMPORTED_MODULE_3__.Lookup.PARENT, task);\n        let dentry = this.kernel.vfs.namei.lookup_create(nd, true);\n        if (nd.path.entry.inode) {\n            this.namei.mkdir(nd.path.entry.inode, dentry);\n        }\n        else {\n            throw new _public_status__WEBPACK_IMPORTED_MODULE_2__.PError(_public_status__WEBPACK_IMPORTED_MODULE_2__.Status.ENOENT);\n        }\n    }\n    rmdir(path, task) {\n        const nd = this.kernel.vfs.namei.pathLookup(path, _namei__WEBPACK_IMPORTED_MODULE_3__.Lookup.PARENT, task);\n        switch (nd.lastType) {\n            case _namei__WEBPACK_IMPORTED_MODULE_3__.Last.DOTDOT:\n                throw new _public_status__WEBPACK_IMPORTED_MODULE_2__.PError(_public_status__WEBPACK_IMPORTED_MODULE_2__.Status.ENOTEMPTY);\n            case _namei__WEBPACK_IMPORTED_MODULE_3__.Last.DOT:\n                throw new _public_status__WEBPACK_IMPORTED_MODULE_2__.PError(_public_status__WEBPACK_IMPORTED_MODULE_2__.Status.EINVAL);\n            case _namei__WEBPACK_IMPORTED_MODULE_3__.Last.ROOT:\n                throw new _public_status__WEBPACK_IMPORTED_MODULE_2__.PError(_public_status__WEBPACK_IMPORTED_MODULE_2__.Status.EBUSY);\n        }\n        nd.flags &= ~_namei__WEBPACK_IMPORTED_MODULE_3__.Lookup.PARENT;\n        const dentry = this.dcache.lookup(nd.path.entry, nd.last);\n        if (nd.path.entry.inode) {\n            this.namei.rmdir(nd.path.entry.inode, dentry);\n        }\n        else {\n            throw new _public_status__WEBPACK_IMPORTED_MODULE_2__.PError(_public_status__WEBPACK_IMPORTED_MODULE_2__.Status.ENOENT);\n        }\n    }\n    lookup(path, task) {\n        // const seg = splitInSegments(path);\n        // if (cwd){\n        //     let pivot: IPath;\n        //     let component: string;\n        //     if(path.startsWith(\"/\")){\n        //         component = seg.shift()!;\n        //         pivot = this.findRoot(cwd);\n        //     }else{\n        //         pivot = {entry:cwd.entry, mount:cwd.mount};\n        //     }\n        //     while(seg.length){\n        //         component = seg.shift()!;\n        //         let child = this.dcache.lookup(pivot.entry, component);\n        //         if(!child || (child!.operations?.revalidate && child.operations?.revalidate(child))){\n        //             child = this.dcache.alloc(pivot.entry, component);\n        //             let other = pivot.entry?.inode!.operations.lookup(pivot.entry?.inode!, child);\n        //             if(other?.inode){\n        //\n        //             }\n        //         }\n        //\n        //         if(child.mounted){\n        //             pivot.mount = this.mounts.lookupChild(pivot.mount!, child)!;\n        //             pivot.entry = pivot.mount.root;\n        //         }else{\n        //             pivot.entry = child;\n        //         }\n        //     }\n        //     return pivot;\n        // }else{\n        //     let entry = this.dcache.alloc(null, '');\n        //     return { mount: null, entry: entry }\n        // }\n        if (task) {\n            const nd = this.namei.pathLookup(path, 0, task);\n            return nd.path;\n        }\n        else {\n            let entry = this.dcache.alloc(null, '');\n            return { mount: null, entry: entry };\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMva2VybmVsL2ZzL3Zmcy50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQW9FQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFRQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQW1GQTtBQUNBO0FBQ0E7QUFDQTtBQWNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9zc2ltcGlibGUvLi9zcmMva2VybmVsL2ZzL3Zmcy50cz9jZTU2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7S2VybmVsfSBmcm9tIFwiLi4va2VybmVsXCI7XG5pbXBvcnQge0RpcmVjdG9yeUNhY2hlLCBJREVudHJ5fSBmcm9tIFwiLi9kY2FjaGVcIjtcbmltcG9ydCB7SVZGU01vdW50LCBNb3VudE1hbmFnZXJ9IGZyb20gXCIuL21vdW50XCI7XG5pbXBvcnQge0lEaXJlY3RvcnlFbnRyeX0gZnJvbSBcIi4uLy4uL3B1YmxpYy9hcGlcIjtcbmltcG9ydCB7SUlOb2RlfSBmcm9tIFwiLi9pbm9kZVwiO1xuaW1wb3J0IHtQRXJyb3IsIFN0YXR1c30gZnJvbSBcIi4uLy4uL3B1YmxpYy9zdGF0dXNcIjtcbmltcG9ydCB7TGFzdCwgTG9va3VwLCBOYW1lSX0gZnJvbSBcIi4vbmFtZWlcIjtcbmltcG9ydCB7SVByb3RvVGFzaywgSVRhc2t9IGZyb20gXCIuLi9wcm9jL3Byb2Nlc3NcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJRmlsZVN5c3RlbVR5cGV7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIG1vdW50OiAoZGV2aWNlOiBzdHJpbmcsIG9wdGlvbnM6c3RyaW5nLCBrZXJuZWw6IEtlcm5lbCkgPT4gUHJvbWlzZTxJU3VwZXJCbG9jaz47XG4gICAgdW5tb3VudDogKHNiOiBJU3VwZXJCbG9jaykgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUGF0aHtcbiAgICBlbnRyeTogSURFbnRyeTtcbiAgICBtb3VudDogSVZGU01vdW50fG51bGw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVN1cGVyQmxvY2tPcGVyYXRpb25ze1xuICAgIC8vICBhbGxvY19pbm9kZTogdGhpcyBtZXRob2QgaXMgY2FsbGVkIGJ5IGFsbG9jX2lub2RlKCkgdG8gYWxsb2NhdGUgbWVtb3J5XG4gICAgLy8gIFx0Zm9yIHN0cnVjdCBpbm9kZSBhbmQgaW5pdGlhbGl6ZSBpdC4gIElmIHRoaXMgZnVuY3Rpb24gaXMgbm90XG4gICAgLy8gIFx0ZGVmaW5lZCwgYSBzaW1wbGUgJ3N0cnVjdCBpbm9kZScgaXMgYWxsb2NhdGVkLiAgTm9ybWFsbHlcbiAgICAvLyAgXHRhbGxvY19pbm9kZSB3aWxsIGJlIHVzZWQgdG8gYWxsb2NhdGUgYSBsYXJnZXIgc3RydWN0dXJlIHdoaWNoXG4gICAgLy8gIFx0Y29udGFpbnMgYSAnc3RydWN0IGlub2RlJyBlbWJlZGRlZCB3aXRoaW4gaXQuXG4gICAgYWxsb2NfaW5vZGU6IChzYjogSVN1cGVyQmxvY2spID0+IElJTm9kZTtcblxuICAgIC8vICBkZXN0cm95X2lub2RlOiB0aGlzIG1ldGhvZCBpcyBjYWxsZWQgYnkgZGVzdHJveV9pbm9kZSgpIHRvIHJlbGVhc2VcbiAgICAvLyAgIFx0cmVzb3VyY2VzIGFsbG9jYXRlZCBmb3Igc3RydWN0IGlub2RlLiAgSXQgaXMgb25seSByZXF1aXJlZCBpZlxuICAgIC8vICAgXHQtPmFsbG9jX2lub2RlIHdhcyBkZWZpbmVkIGFuZCBzaW1wbHkgdW5kb2VzIGFueXRoaW5nIGRvbmUgYnlcbiAgICAvLyBcdC0+YWxsb2NfaW5vZGUuXG4gICAgZGVzdHJveV9pbm9kZTogKGlub2RlOiBJSU5vZGUpID0+IHZvaWQ7XG5cbiAgICAvLyAgZGlydHlfaW5vZGU6IHRoaXMgbWV0aG9kIGlzIGNhbGxlZCBieSB0aGUgVkZTIHRvIG1hcmsgYW4gaW5vZGUgZGlydHkuXG4gICAgZGlydHlfaW5vZGU6IChpbm9kZTogSUlOb2RlKSA9PiB2b2lkO1xuXG4gICAgLy8gIHdyaXRlX2lub2RlOiB0aGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiB0aGUgVkZTIG5lZWRzIHRvIHdyaXRlIGFuXG4gICAgLy8gXHRpbm9kZSB0byBkaXNjLiAgVGhlIHNlY29uZCBwYXJhbWV0ZXIgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIHdyaXRlXG4gICAgLy8gXHRzaG91bGQgYmUgc3luY2hyb25vdXMgb3Igbm90LCBub3QgYWxsIGZpbGVzeXN0ZW1zIGNoZWNrIHRoaXMgZmxhZy5cbiAgICB3cml0ZV9pbm9kZTogKGlub2RlOiBJSU5vZGUpID0+IHZvaWQ7XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHJlbGVhc2VzIHRoZSBnaXZlbiBpbm9kZS5cbiAgICBwdXRfaW5vZGU6IChpbm9kZTogSUlOb2RlKSA9PiB2b2lkO1xuXG4gICAgLy8gIGRyb3BfaW5vZGU6IGNhbGxlZCB3aGVuIHRoZSBsYXN0IGFjY2VzcyB0byB0aGUgaW5vZGUgaXMgZHJvcHBlZCxcbiAgICAvLyBcdHdpdGggdGhlIGlub2RlLT5pX2xvY2sgc3BpbmxvY2sgaGVsZC5cbiAgICAvL1xuICAgIC8vIFx0VGhpcyBtZXRob2Qgc2hvdWxkIGJlIGVpdGhlciBOVUxMIChub3JtYWwgVU5JWCBmaWxlc3lzdGVtXG4gICAgLy8gXHRzZW1hbnRpY3MpIG9yIFwiZ2VuZXJpY19kZWxldGVfaW5vZGVcIiAoZm9yIGZpbGVzeXN0ZW1zIHRoYXQgZG8gbm90XG4gICAgLy8gXHR3YW50IHRvIGNhY2hlIGlub2RlcyAtIGNhdXNpbmcgXCJkZWxldGVfaW5vZGVcIiB0byBhbHdheXMgYmVcbiAgICAvLyBcdGNhbGxlZCByZWdhcmRsZXNzIG9mIHRoZSB2YWx1ZSBvZiBpX25saW5rKVxuICAgIC8vXG4gICAgLy8gXHRUaGUgXCJnZW5lcmljX2RlbGV0ZV9pbm9kZSgpXCIgYmVoYXZpb3IgaXMgZXF1aXZhbGVudCB0byB0aGVcbiAgICAvLyBcdG9sZCBwcmFjdGljZSBvZiB1c2luZyBcImZvcmNlX2RlbGV0ZVwiIGluIHRoZSBwdXRfaW5vZGUoKSBjYXNlLFxuICAgIC8vIFx0YnV0IGRvZXMgbm90IGhhdmUgdGhlIHJhY2VzIHRoYXQgdGhlIFwiZm9yY2VfZGVsZXRlKClcIiBhcHByb2FjaFxuICAgIC8vIFx0aGFkLlxuICAgIGRyb3BfaW5vZGU/OiAoaW5vZGU6IElJTm9kZSkgPT4gdm9pZDtcblxuICAgIC8vICBwdXRfc3VwZXI6IGNhbGxlZCB3aGVuIHRoZSBWRlMgd2lzaGVzIHRvIGZyZWUgdGhlIHN1cGVyYmxvY2tcbiAgICAvLyBcdChpLmUuIHVubW91bnQpLiBUaGlzIGlzIGNhbGxlZCB3aXRoIHRoZSBzdXBlcmJsb2NrIGxvY2sgaGVsZFxuICAgIHB1dF9zdXBlcjogKHNiOiBJU3VwZXJCbG9jaykgPT4gdm9pZDtcblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gdXBkYXRlcyB0aGUgb24tZGlzayBzdXBlcmJsb2NrIHdpdGggdGhlIHNwZWNpZmllZFxuICAgIC8vIHN1cGVyYmxvY2suIFRoZSBWRlMgdXNlcyB0aGlzIGZ1bmN0aW9uIHRvIHN5bmNocm9uaXplIGEgbW9kaWZpZWRcbiAgICAvLyBpbi1tZW1vcnkgc3VwZXJibG9jayB3aXRoIHRoZSBkaXNrLlxuICAgIHdyaXRlX3N1cGVyOiAoc2I6IElTdXBlckJsb2NrKSA9PiB2b2lkO1xuXG4gICAgLy8gc3luY19mczogY2FsbGVkIHdoZW4gVkZTIGlzIHdyaXRpbmcgb3V0IGFsbCBkaXJ0eSBkYXRhIGFzc29jaWF0ZWQgd2l0aFxuICAgIC8vICAgXHRhIHN1cGVyYmxvY2suIFRoZSBzZWNvbmQgcGFyYW1ldGVyIGluZGljYXRlcyB3aGV0aGVyIHRoZSBtZXRob2RcbiAgICAvLyBcdHNob3VsZCB3YWl0IHVudGlsIHRoZSB3cml0ZSBvdXQgaGFzIGJlZW4gY29tcGxldGVkLiBPcHRpb25hbC5cbiAgICBzeW5jX2ZzOiAoc2I6IElTdXBlckJsb2NrKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgZW51bSBNa05vZGVNb2RlIHtcbiAgICBCTE9DSyxcbiAgICBDSEFSLFxuICAgIFBJUEVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRmlsZSB7XG4gICAgcG9zaXRpb246IG51bWJlcjtcbiAgICBkZW50cnk6IElERW50cnk7XG4gICAgb3BlcmF0aW9uczogSUZpbGVPcGVyYXRpb25zO1xufVxuXG5leHBvcnQgZW51bSBMTFNlZWtXaGVuY2V7XG4gICAgU0VFS19TRVQsXG4gICAgU0VFS19DVVIsXG4gICAgU0VFS19FTkRcbn1cblxuZXhwb3J0IGVudW0gTG9ja09wZXJhdGlvbntcbiAgICBMT0NLX1NIQVJFRCxcbiAgICBMT0NLX0VYQ0xVU0lWRSxcbiAgICBMT0NLX1VOTE9DSyxcbiAgICBMT0NLX05PTkJMT0NLLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQb2xsVGFibGUge1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElGaWxlT3BlcmF0aW9ucyB7XG4gICAgb3Blbj86IChub2RlOiBJSU5vZGUsIGVudHJ5OiBJRmlsZSkgPT4gdm9pZFxuXG4gICAgLy8gVGhlIF9sbHNlZWsoKSBzeXN0ZW0gY2FsbCByZXBvc2l0aW9ucyB0aGUgb2Zmc2V0IG9mIHRoZSBvcGVuIGZpbGVcbiAgICAvLyBkZXNjcmlwdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIGZpbGUgZGVzY3JpcHRvciBmZCB0byB0aGUgdmFsdWVcbiAgICAvL1xuICAgIC8vICAgICAgICAob2Zmc2V0X2hpZ2ggPDwgMzIpIHwgb2Zmc2V0X2xvd1xuICAgIC8vXG4gICAgLy8gVGhpcyBuZXcgb2Zmc2V0IGlzIGEgYnl0ZSBvZmZzZXQgcmVsYXRpdmUgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGVcbiAgICAvLyBmaWxlLCB0aGUgY3VycmVudCBmaWxlIG9mZnNldCwgb3IgdGhlIGVuZCBvZiB0aGUgZmlsZSwgZGVwZW5kaW5nXG4gICAgLy8gb24gd2hldGhlciB3aGVuY2UgaXMgU0VFS19TRVQsIFNFRUtfQ1VSLCBvciBTRUVLX0VORCxcbiAgICAvLyByZXNwZWN0aXZlbHkuXG4gICAgLy9cbiAgICAvLyBUaGUgbmV3IGZpbGUgb2Zmc2V0IGlzIHJldHVybmVkIGluIHRoZSBhcmd1bWVudCByZXN1bHQuICBUaGVcbiAgICAvLyB0eXBlIGxvZmZfdCBpcyBhIDY0LWJpdCBzaWduZWQgdHlwZS5cbiAgICBsbHNlZWs/OiAoZmlsZSA6SUZpbGUsIG9mZnNldDpudW1iZXIsIG9yaWdpbjpMTFNlZWtXaGVuY2UpID0+IFByb21pc2U8bnVtYmVyPjtcblxuICAgIC8vIFRoZSByZWFkZGlyKCkgZnVuY3Rpb24gcmV0dXJucyBhIHBvaW50ZXIgdG8gYSBkaXJlbnQgc3RydWN0dXJlXG4gICAgLy8gcmVwcmVzZW50aW5nIHRoZSBuZXh0IGRpcmVjdG9yeSBlbnRyeSBpbiB0aGUgZGlyZWN0b3J5IHN0cmVhbVxuICAgIC8vIHBvaW50ZWQgdG8gYnkgZGlycC4gIEl0IHJldHVybnMgTlVMTCBvbiByZWFjaGluZyB0aGUgZW5kIG9mIHRoZVxuICAgIC8vIGRpcmVjdG9yeSBzdHJlYW0gb3IgaWYgYW4gZXJyb3Igb2NjdXJyZWQuXG4gICAgcmVhZGRpcj86IChkaXJlbnQ6IElEaXJlY3RvcnlFbnRyeSkgPT4gUHJvbWlzZTxJRGlyZWN0b3J5RW50cnk+O1xuXG4gICAgLy8gcG9sbCgpIHBlcmZvcm1zIGEgc2ltaWxhciB0YXNrIHRvIHNlbGVjdCgyKTogaXQgd2FpdHMgZm9yIG9uZSBvZlxuICAgIC8vIGEgc2V0IG9mIGZpbGUgZGVzY3JpcHRvcnMgdG8gYmVjb21lIHJlYWR5IHRvIHBlcmZvcm0gSS9PLiAgVGhlXG4gICAgLy8gTGludXgtc3BlY2lmaWMgZXBvbGwoNykgQVBJIHBlcmZvcm1zIGEgc2ltaWxhciB0YXNrLCBidXQgb2ZmZXJzXG4gICAgLy8gZmVhdHVyZXMgYmV5b25kIHRob3NlIGZvdW5kIGluIHBvbGwoKS5cbiAgICBwb2xsPzogKGZpbGU6IElGaWxlLCBwb2xsZmQ6IElQb2xsVGFibGUpID0+IFByb21pc2U8dm9pZD47XG5cbiAgICAvLyBUaGUgaW9jdGwoKSBzeXN0ZW0gY2FsbCBtYW5pcHVsYXRlcyB0aGUgdW5kZXJseWluZyBkZXZpY2VcbiAgICAvLyBwYXJhbWV0ZXJzIG9mIHNwZWNpYWwgZmlsZXMuICBJbiBwYXJ0aWN1bGFyLCBtYW55IG9wZXJhdGluZ1xuICAgIC8vIGNoYXJhY3RlcmlzdGljcyBvZiBjaGFyYWN0ZXIgc3BlY2lhbCBmaWxlcyAoZS5nLiwgdGVybWluYWxzKSBtYXlcbiAgICAvLyBiZSBjb250cm9sbGVkIHdpdGggaW9jdGwoKSByZXF1ZXN0cy4gIFRoZSBhcmd1bWVudCBmZCBtdXN0IGJlIGFuXG4gICAgLy8gb3BlbiBmaWxlIGRlc2NyaXB0b3IuXG4gICAgaW9jdGw/OiAoZmlsZTogSUZpbGUsIGNtZDogbnVtYmVyLCBhcmc6IG51bWJlcikgPT4gUHJvbWlzZTxudW1iZXI+O1xuXG4gICAgLy8gbW1hcCAtPiBkb2VzIG5vdCBtYWtlIHNlbnNlIGluIHRoaXMgY29udGV4dDtcblxuICAgIC8vIEZvciBvdXRwdXQgc3RyZWFtcywgZmZsdXNoKCkgZm9yY2VzIGEgd3JpdGUgb2YgYWxsIHVzZXItc3BhY2VcbiAgICAvLyBidWZmZXJlZCBkYXRhIGZvciB0aGUgZ2l2ZW4gb3V0cHV0IG9yIHVwZGF0ZSBzdHJlYW0gdmlhIHRoZVxuICAgIC8vIHN0cmVhbSdzIHVuZGVybHlpbmcgd3JpdGUgZnVuY3Rpb24uXG4gICAgLy9cbiAgICAvLyBGb3IgaW5wdXQgc3RyZWFtcyBhc3NvY2lhdGVkIHdpdGggc2Vla2FibGUgZmlsZXMgKGUuZy4sIGRpc2tcbiAgICAvLyBmaWxlcywgYnV0IG5vdCBwaXBlcyBvciB0ZXJtaW5hbHMpLCBmZmx1c2goKSBkaXNjYXJkcyBhbnlcbiAgICAvLyBidWZmZXJlZCBkYXRhIHRoYXQgaGFzIGJlZW4gZmV0Y2hlZCBmcm9tIHRoZSB1bmRlcmx5aW5nIGZpbGUsIGJ1dFxuICAgIC8vIGhhcyBub3QgYmVlbiBjb25zdW1lZCBieSB0aGUgYXBwbGljYXRpb24uXG4gICAgZmx1c2g/OiAoZmlsZTogSUZpbGUpID0+IHZvaWQ7XG5cbiAgICAvL1xuICAgIC8vIFRoZSByb2xlIG9mIHRoZSByZWxlYXNlIG1ldGhvZCBpcyB0aGUgcmV2ZXJzZSBvZiBvcGVuLiBTb21ldGltZXNcbiAgICAvLyB5b3XigJlsbCBmaW5kIHRoYXQgdGhlIG1ldGhvZCBpbXBsZW1lbnRhdGlvbiBpcyBjYWxsZWQgZGV2aWNlIF9jbG9zZVxuICAgIC8vIGluc3RlYWQgb2YgZGV2aWNlIF9yZWxlYXNlLiBFaXRoZXIgd2F5LCB0aGUgZGV2aWNlIG1ldGhvZCBzaG91bGRcbiAgICAvLyBwZXJmb3JtIHRoZSBmb2xsb3dpbmcgdGFza3M6XG4gICAgcmVsZWFzZT86IChpbm9kZTogSUlOb2RlLCBmaWxlOiBJRmlsZSkgPT4gdm9pZDtcblxuICAgIC8vIGZzeW5jKCkgdHJhbnNmZXJzIChcImZsdXNoZXNcIikgYWxsIG1vZGlmaWVkIGluLWNvcmUgZGF0YSBvZiAoaS5lLixcbiAgICAvLyBtb2RpZmllZCBidWZmZXIgY2FjaGUgcGFnZXMgZm9yKSB0aGUgZmlsZSByZWZlcnJlZCB0byBieSB0aGUgZmlsZVxuICAgIC8vIGRlc2NyaXB0b3IgZmQgdG8gdGhlIGRpc2sgZGV2aWNlIChvciBvdGhlciBwZXJtYW5lbnQgc3RvcmFnZVxuICAgIC8vIGRldmljZSkgc28gdGhhdCBhbGwgY2hhbmdlZCBpbmZvcm1hdGlvbiBjYW4gYmUgcmV0cmlldmVkIGV2ZW4gaWZcbiAgICAvLyB0aGUgc3lzdGVtIGNyYXNoZXMgb3IgaXMgcmVib290ZWQuICBUaGlzIGluY2x1ZGVzIHdyaXRpbmcgdGhyb3VnaFxuICAgIC8vIG9yIGZsdXNoaW5nIGEgZGlzayBjYWNoZSBpZiBwcmVzZW50LiAgVGhlIGNhbGwgYmxvY2tzIHVudGlsIHRoZVxuICAgIC8vIGRldmljZSByZXBvcnRzIHRoYXQgdGhlIHRyYW5zZmVyIGhhcyBjb21wbGV0ZWQuXG4gICAgZnN5bmM/OiAoZmlsZTogSUZpbGUsIGRlbnRyeTogSURFbnRyeSwgZGF0YXN5bmM6IGJvb2xlYW4pID0+IHZvaWQ7XG4gICAgLy8gQXBwbHkgb3IgcmVtb3ZlIGFuIGFkdmlzb3J5IGxvY2sgb24gdGhlIG9wZW4gZmlsZSBzcGVjaWZpZWQgYnkgZmQuXG4gICAgLy8gVGhlIGFyZ3VtZW50IG9wZXJhdGlvbiBpcyBvbmUgb2YgdGhlIGZvbGxvd2luZzpcbiAgICBsb2NrPzogKGZpbGU6IElGaWxlLCBvcGVyYXRpb246IExvY2tPcGVyYXRpb24pID0+IHZvaWQ7XG5cbiAgICAvLyBzZW5kZmlsZSgpIGNvcGllcyBkYXRhIGJldHdlZW4gb25lIGZpbGUgZGVzY3JpcHRvciBhbmQgYW5vdGhlci5cbiAgICAvLyBCZWNhdXNlIHRoaXMgY29weWluZyBpcyBkb25lIHdpdGhpbiB0aGUga2VybmVsLCBzZW5kZmlsZSgpIGlzXG4gICAgLy8gbW9yZSBlZmZpY2llbnQgdGhhbiB0aGUgY29tYmluYXRpb24gb2YgcmVhZCgyKSBhbmQgd3JpdGUoMiksXG4gICAgLy8gd2hpY2ggd291bGQgcmVxdWlyZSB0cmFuc2ZlcnJpbmcgZGF0YSB0byBhbmQgZnJvbSB1c2VyIHNwYWNlLlxuICAgIHNlbmRmaWxlPzogKG91dGZpbGU6IElGaWxlLCBpbmZpbGU6IElGaWxlLCBvZmZzZXQ6IG51bWJlciwgY291bnQ6IG51bWJlcikgPT4gdm9pZDtcblxuICAgIHJlYWQ/OiAoZmlsZTogSUZpbGUsIGNvdW50PzogbnVtYmVyKSA9PiBQcm9taXNlPHN0cmluZz47XG4gICAgd3JpdGU/OiAoZmlsZTogSUZpbGUsIGJ1Zjogc3RyaW5nKSA9PiBQcm9taXNlPHZvaWQ+O1xuICAgIGl0ZXJhdGU/OiAoZmlsZTogSUZpbGUpID0+IFByb21pc2U8SURpcmVjdG9yeUVudHJ5W10+O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlyX2FkZF9kb3RzKGxpc3Q6IElEaXJlY3RvcnlFbnRyeVtdKXtcbiAgICBsaXN0LnB1c2goe25hbWU6XCIuXCJ9KVxuICAgIGxpc3QucHVzaCh7bmFtZTpcIi4uXCJ9KVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElTdXBlckJsb2Nre1xuICAgIGRldmljZTogYW55O1xuICAgIHJvb3Q6IElERW50cnk7XG4gICAgZmlsZVN5c3RlbVR5cGU6IElGaWxlU3lzdGVtVHlwZSxcbiAgICBzdXBlcmJsb2NrT3BlcmF0aW9uczogSVN1cGVyQmxvY2tPcGVyYXRpb25zO1xufVxuXG5pbnRlcmZhY2UgSU1vdW50e1xuICAgIHJvb3Q6IElERW50cnk7XG4gICAgc3VwZXJibG9jazogSVN1cGVyQmxvY2s7XG59XG5cbmNsYXNzIERDYWNoZXtcbiAgICByb290PzogSURFbnRyeTtcbiAgICBjb25zdHJ1Y3Rvcigpe31cbn1cblxuY29uc3QgRElWID0gXCIvXCJcblxuZXhwb3J0IGNsYXNzIFZpcnR1YWxGaWxlU3lzdGVte1xuICAgIGZpbGVzeXN0ZW1zOiBSZWNvcmQ8c3RyaW5nLCBJRmlsZVN5c3RlbVR5cGU+ID0ge307XG4gICAgcm9vdDogSURFbnRyeXx1bmRlZmluZWQ7XG4gICAgcHJpdmF0ZSBrZXJuZWw6IEtlcm5lbDtcbiAgICBwdWJsaWMgbW91bnRzOiBNb3VudE1hbmFnZXI7XG4gICAgcHVibGljIGRjYWNoZTogRGlyZWN0b3J5Q2FjaGU7XG4gICAgcHVibGljIG5hbWVpOiBOYW1lSTtcblxuICAgIGNvbnN0cnVjdG9yKGtlcm5lbDogS2VybmVsKSB7XG4gICAgICAgIHRoaXMua2VybmVsID0ga2VybmVsO1xuICAgICAgICB0aGlzLm1vdW50cyA9IG5ldyBNb3VudE1hbmFnZXIodGhpcy5rZXJuZWwpO1xuICAgICAgICB0aGlzLmRjYWNoZSA9IG5ldyBEaXJlY3RvcnlDYWNoZSh0aGlzLmtlcm5lbCk7XG4gICAgICAgIHRoaXMubmFtZWkgPSBuZXcgTmFtZUkodGhpcy5rZXJuZWwpO1xuICAgIH1cblxuICAgIGFzeW5jIG1vdW50KGRldmljZTogc3RyaW5nLCBvcHRpb25zOnN0cmluZywgbW91bnQ6IElWRlNNb3VudHxudWxsLCBlbnRyeTogSURFbnRyeSwgZmlsZXN5c3RlbTpJRmlsZVN5c3RlbVR5cGUpOiBQcm9taXNlPElWRlNNb3VudD57XG4gICAgICAgIGxldCBzYiA9IGF3YWl0IGZpbGVzeXN0ZW0ubW91bnQoZGV2aWNlLCBvcHRpb25zLCB0aGlzLmtlcm5lbCk7XG4gICAgICAgIGxldCB2ZnNtbnQgPSB0aGlzLm1vdW50cy5jcmVhdGUobW91bnQsIGVudHJ5LCBzYik7XG5cbiAgICAgICAgZW50cnkuc3VwZXJibG9jayA9IHNiO1xuICAgICAgICBlbnRyeS5tb3VudGVkKys7XG4gICAgICAgIHJldHVybiB2ZnNtbnQ7XG4gICAgfVxuXG4gICAgYXN5bmMgdW5tb3VudChtb3VudDogSVZGU01vdW50LCBlbnRyeTogSURFbnRyeSk6IFByb21pc2U8dm9pZD57XG4gICAgICAgIGxldCBzYiA9IHRoaXMubW91bnRzLmRlbGV0ZShtb3VudCEsIGVudHJ5KVxuICAgICAgICBzYi5maWxlU3lzdGVtVHlwZS51bm1vdW50KHNiKTtcblxuICAgICAgICBlbnRyeS5zdXBlcmJsb2NrID0gbnVsbDtcbiAgICAgICAgZW50cnkubW91bnRlZC0tO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmVnaXN0ZXJGUyhmc3Q6IElGaWxlU3lzdGVtVHlwZSl7XG4gICAgICAgIHRoaXMuZmlsZXN5c3RlbXNbZnN0Lm5hbWVdID0gZnN0O1xuICAgIH1cbiAgICBnZXRGUyhuYW1lOiBzdHJpbmcpOiBJRmlsZVN5c3RlbVR5cGV7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbGVzeXN0ZW1zW25hbWVdO1xuICAgIH1cblxuICAgIGFzeW5jIG9wZW4ocGF0aDogSVBhdGgpOiBQcm9taXNlPElGaWxlPntcbiAgICAgICAgaWYocGF0aC5lbnRyeS5pbm9kZSl7XG4gICAgICAgICAgICBjb25zdCBmaWxlOklGaWxlID0ge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAwLFxuICAgICAgICAgICAgICAgIGRlbnRyeTogcGF0aC5lbnRyeSxcbiAgICAgICAgICAgICAgICBvcGVyYXRpb25zOiBwYXRoLmVudHJ5Lmlub2RlLmZpbGVPcGVyYXRpb25zXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYocGF0aC5lbnRyeS5pbm9kZSEuZmlsZU9wZXJhdGlvbnMub3Blbil7XG4gICAgICAgICAgICAgICAgYXdhaXQgcGF0aC5lbnRyeS5pbm9kZSEuZmlsZU9wZXJhdGlvbnMub3BlbihwYXRoLmVudHJ5Lmlub2RlISwgZmlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmlsZTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUEVycm9yKFN0YXR1cy5FTk9FTlQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGF0aChwYXRoOiBJUGF0aCwgdGFzazogSVByb3RvVGFzayk6IHN0cmluZ3tcbiAgICAgICAgbGV0IGJ1ZiA9IFwiXCI7XG4gICAgICAgIGxldCBwOiBJUGF0aHx1bmRlZmluZWQgPSBwYXRoO1xuICAgICAgICB3aGlsZShwKXtcbiAgICAgICAgICAgIGxldCBlbnRyeTphbnkgPSBwLmVudHJ5O1xuICAgICAgICAgICAgbGV0IG1vdW50ID0gcC5tb3VudDtcbiAgICAgICAgICAgIHdoaWxlKGVudHJ5LnBhcmVudCAhPSBudWxsICYmIGVudHJ5ICE9IHRhc2sucm9vdC5lbnRyeSl7XG4gICAgICAgICAgICAgICAgYnVmID0gXCIvXCIgKyBlbnRyeS5uYW1lICsgYnVmO1xuICAgICAgICAgICAgICAgIGVudHJ5ID0gZW50cnkucGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZW50cnkgIT0gdGFzay5yb290LmVudHJ5KXtcbiAgICAgICAgICAgICAgICBwID0gdGhpcy5rZXJuZWwudmZzLm1vdW50cy5sb29rdXBNb3VudHBvaW50KG1vdW50ISk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICByZXR1cm4gYnVmLmxlbmd0aCA/IGJ1ZiA6IFwiL1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWYubGVuZ3RoID8gYnVmIDogXCIvXCI7XG4gICAgfVxuXG4gICAgZmluZFJvb3QocGF0aDogSVBhdGgpOiBJUGF0aHtcbiAgICAgICAgbGV0IHA6IElQYXRofHVuZGVmaW5lZCA9IHBhdGg7XG4gICAgICAgIGxldCBlbnRyeSA9IHAuZW50cnk7XG4gICAgICAgIGxldCBtb3VudCA9IHAubW91bnQ7XG4gICAgICAgIHdoaWxlKHApe1xuICAgICAgICAgICAgZW50cnkgPSBwLmVudHJ5O1xuICAgICAgICAgICAgbW91bnQgPSBwLm1vdW50O1xuICAgICAgICAgICAgd2hpbGUoZW50cnkucGFyZW50ICE9IG51bGwpe1xuICAgICAgICAgICAgICAgIGVudHJ5ID0gZW50cnkucGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcCA9IHRoaXMua2VybmVsLnZmcy5tb3VudHMubG9va3VwTW91bnRwb2ludChtb3VudCEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7bW91bnQ6bW91bnQsIGVudHJ5OmVudHJ5fTtcbiAgICB9XG5cbiAgICBta2RpcihwYXRoOnN0cmluZywgdGFzazogSVByb3RvVGFzayl7XG4gICAgICAgIGNvbnN0IG5kID0gdGhpcy5uYW1laS5wYXRoTG9va3VwKHBhdGgsIExvb2t1cC5QQVJFTlQsIHRhc2spO1xuXG4gICAgICAgIGxldCBkZW50cnkgPSB0aGlzLmtlcm5lbC52ZnMubmFtZWkubG9va3VwX2NyZWF0ZShuZCwgdHJ1ZSk7XG4gICAgICAgIGlmIChuZC5wYXRoLmVudHJ5Lmlub2RlKSB7XG4gICAgICAgICAgICB0aGlzLm5hbWVpLm1rZGlyKG5kLnBhdGguZW50cnkuaW5vZGUsIGRlbnRyeSlcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUEVycm9yKFN0YXR1cy5FTk9FTlQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcm1kaXIocGF0aDogc3RyaW5nLCB0YXNrOiBJUHJvdG9UYXNrKXtcbiAgICAgICAgY29uc3QgbmQgPSB0aGlzLmtlcm5lbC52ZnMubmFtZWkucGF0aExvb2t1cChwYXRoLCBMb29rdXAuUEFSRU5ULCB0YXNrKTtcblxuICAgICAgICBzd2l0Y2ggKG5kLmxhc3RUeXBlKXtcbiAgICAgICAgICAgIGNhc2UgTGFzdC5ET1RET1Q6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFBFcnJvcihTdGF0dXMuRU5PVEVNUFRZKTtcbiAgICAgICAgICAgIGNhc2UgTGFzdC5ET1Q6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFBFcnJvcihTdGF0dXMuRUlOVkFMKTtcbiAgICAgICAgICAgIGNhc2UgTGFzdC5ST09UOlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBQRXJyb3IoU3RhdHVzLkVCVVNZKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5kLmZsYWdzICY9IH5Mb29rdXAuUEFSRU5UO1xuXG4gICAgICAgIGNvbnN0IGRlbnRyeSA9IHRoaXMuZGNhY2hlLmxvb2t1cChuZC5wYXRoLmVudHJ5LCBuZC5sYXN0KTtcbiAgICAgICAgaWYgKG5kLnBhdGguZW50cnkuaW5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMubmFtZWkucm1kaXIobmQucGF0aC5lbnRyeS5pbm9kZSwgZGVudHJ5ISlcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUEVycm9yKFN0YXR1cy5FTk9FTlQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbG9va3VwKHBhdGg6IHN0cmluZywgdGFzazogSVByb3RvVGFza3xudWxsKTogSVBhdGh7XG4gICAgICAgIC8vIGNvbnN0IHNlZyA9IHNwbGl0SW5TZWdtZW50cyhwYXRoKTtcbiAgICAgICAgLy8gaWYgKGN3ZCl7XG4gICAgICAgIC8vICAgICBsZXQgcGl2b3Q6IElQYXRoO1xuICAgICAgICAvLyAgICAgbGV0IGNvbXBvbmVudDogc3RyaW5nO1xuICAgICAgICAvLyAgICAgaWYocGF0aC5zdGFydHNXaXRoKFwiL1wiKSl7XG4gICAgICAgIC8vICAgICAgICAgY29tcG9uZW50ID0gc2VnLnNoaWZ0KCkhO1xuICAgICAgICAvLyAgICAgICAgIHBpdm90ID0gdGhpcy5maW5kUm9vdChjd2QpO1xuICAgICAgICAvLyAgICAgfWVsc2V7XG4gICAgICAgIC8vICAgICAgICAgcGl2b3QgPSB7ZW50cnk6Y3dkLmVudHJ5LCBtb3VudDpjd2QubW91bnR9O1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyAgICAgd2hpbGUoc2VnLmxlbmd0aCl7XG4gICAgICAgIC8vICAgICAgICAgY29tcG9uZW50ID0gc2VnLnNoaWZ0KCkhO1xuICAgICAgICAvLyAgICAgICAgIGxldCBjaGlsZCA9IHRoaXMuZGNhY2hlLmxvb2t1cChwaXZvdC5lbnRyeSwgY29tcG9uZW50KTtcbiAgICAgICAgLy8gICAgICAgICBpZighY2hpbGQgfHwgKGNoaWxkIS5vcGVyYXRpb25zPy5yZXZhbGlkYXRlICYmIGNoaWxkLm9wZXJhdGlvbnM/LnJldmFsaWRhdGUoY2hpbGQpKSl7XG4gICAgICAgIC8vICAgICAgICAgICAgIGNoaWxkID0gdGhpcy5kY2FjaGUuYWxsb2MocGl2b3QuZW50cnksIGNvbXBvbmVudCk7XG4gICAgICAgIC8vICAgICAgICAgICAgIGxldCBvdGhlciA9IHBpdm90LmVudHJ5Py5pbm9kZSEub3BlcmF0aW9ucy5sb29rdXAocGl2b3QuZW50cnk/Lmlub2RlISwgY2hpbGQpO1xuICAgICAgICAvLyAgICAgICAgICAgICBpZihvdGhlcj8uaW5vZGUpe1xuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgICAgIGlmKGNoaWxkLm1vdW50ZWQpe1xuICAgICAgICAvLyAgICAgICAgICAgICBwaXZvdC5tb3VudCA9IHRoaXMubW91bnRzLmxvb2t1cENoaWxkKHBpdm90Lm1vdW50ISwgY2hpbGQpITtcbiAgICAgICAgLy8gICAgICAgICAgICAgcGl2b3QuZW50cnkgPSBwaXZvdC5tb3VudC5yb290O1xuICAgICAgICAvLyAgICAgICAgIH1lbHNle1xuICAgICAgICAvLyAgICAgICAgICAgICBwaXZvdC5lbnRyeSA9IGNoaWxkO1xuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gICAgIHJldHVybiBwaXZvdDtcbiAgICAgICAgLy8gfWVsc2V7XG4gICAgICAgIC8vICAgICBsZXQgZW50cnkgPSB0aGlzLmRjYWNoZS5hbGxvYyhudWxsLCAnJyk7XG4gICAgICAgIC8vICAgICByZXR1cm4geyBtb3VudDogbnVsbCwgZW50cnk6IGVudHJ5IH1cbiAgICAgICAgLy8gfVxuICAgICAgICBpZiAodGFzayl7XG4gICAgICAgICAgICBjb25zdCBuZCA9IHRoaXMubmFtZWkucGF0aExvb2t1cChwYXRoLCAwLCB0YXNrKTtcbiAgICAgICAgICAgIHJldHVybiBuZC5wYXRoO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGxldCBlbnRyeSA9IHRoaXMuZGNhY2hlLmFsbG9jKG51bGwsICcnKTtcbiAgICAgICAgICAgIHJldHVybiB7IG1vdW50OiBudWxsLCBlbnRyeTogZW50cnkgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/kernel/fs/vfs.ts\n");

/***/ }),

/***/ "./src/kernel/kernel.ts":
/*!******************************!*\
  !*** ./src/kernel/kernel.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Kernel\": () => (/* binding */ Kernel)\n/* harmony export */ });\n/* harmony import */ var _fs_vfs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fs/vfs */ \"./src/kernel/fs/vfs.ts\");\n/* harmony import */ var _fs_blobfs_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fs/blobfs/module */ \"./src/kernel/fs/blobfs/module.ts\");\n/* harmony import */ var _fs_procfs_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fs/procfs/module */ \"./src/kernel/fs/procfs/module.ts\");\n/* harmony import */ var _proc_lorch_module__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./proc/lorch/module */ \"./src/kernel/proc/lorch/module.ts\");\n/* harmony import */ var _sys_modules__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sys/modules */ \"./src/kernel/sys/modules.ts\");\n/* harmony import */ var _proc_process__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./proc/process */ \"./src/kernel/proc/process.ts\");\n/* harmony import */ var _proc_orchestrator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./proc/orchestrator */ \"./src/kernel/proc/orchestrator.ts\");\n/* harmony import */ var _ns_namespace__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ns/namespace */ \"./src/kernel/ns/namespace.ts\");\n/* harmony import */ var _public_status__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../public/status */ \"./src/public/status.ts\");\n/* harmony import */ var _devices_drivers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./devices/drivers */ \"./src/kernel/devices/drivers.ts\");\n/* harmony import */ var _devices_image__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./devices/image */ \"./src/kernel/devices/image.ts\");\n/* harmony import */ var _devices_console__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./devices/console */ \"./src/kernel/devices/console.ts\");\n/* harmony import */ var _devices_serial__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./devices/serial */ \"./src/kernel/devices/serial.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Kernel {\n    vfs;\n    modules;\n    processes;\n    orchestrators;\n    options;\n    namespaces;\n    current;\n    descriptions;\n    devices;\n    serial;\n    constructor(options) {\n        this.options = options;\n        this.vfs = new _fs_vfs__WEBPACK_IMPORTED_MODULE_0__.VirtualFileSystem(this);\n        this.modules = new _sys_modules__WEBPACK_IMPORTED_MODULE_4__.ModularityManager(this);\n        this.processes = new _proc_process__WEBPACK_IMPORTED_MODULE_5__.ProcessManagement(this);\n        this.orchestrators = new _proc_orchestrator__WEBPACK_IMPORTED_MODULE_6__.OrchestratorManagement(this);\n        this.namespaces = new _ns_namespace__WEBPACK_IMPORTED_MODULE_7__.NamespaceManager(this);\n        this.devices = new _devices_drivers__WEBPACK_IMPORTED_MODULE_9__.DeviceManager(this);\n    }\n    async init_mount_tree() {\n        const root = this.vfs.lookup(\"/\", null);\n        root.mount = await this.vfs.mount(\"\", \"\", root.mount, root.entry, this.vfs.getFS(\"tmpfs\"));\n        root.entry = root.mount.superblock.root;\n        const prototask = { root: root, pwd: root, files: [] };\n        this.vfs.mkdir(\"/dev\", prototask);\n        const dev = this.vfs.lookup(\"/dev\", prototask);\n        await this.vfs.mount(\"\", \"\", dev.mount, dev.entry, this.vfs.getFS(\"dev\"));\n        this.vfs.mkdir(\"/root\", prototask);\n        return prototask;\n    }\n    async boot(devices) {\n        this.modules.installModule(_devices_image__WEBPACK_IMPORTED_MODULE_10__[\"default\"]);\n        this.modules.installModule(_devices_console__WEBPACK_IMPORTED_MODULE_11__[\"default\"]);\n        this.modules.installModule(_devices_serial__WEBPACK_IMPORTED_MODULE_12__[\"default\"]);\n        this.modules.installModule(_fs_blobfs_module__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n        this.modules.installModule(_fs_procfs_module__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n        this.modules.installModule(_proc_lorch_module__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n        this.descriptions = devices;\n        this.devices.init();\n        this.current = await this.init_mount_tree();\n        let serialPath = this.options.serial || \"/dev/null\";\n        let serialFile = this.vfs.lookup(serialPath, this.current);\n        this.serial = await this.vfs.open(serialFile);\n        this.printk(\"Booting Kernel...\");\n        this.printk(\"Command line: \" + Object.keys(this.options).map(x => {\n            return `${x}=${this.options[x]}`;\n        }).reduce((x, y) => x + \" \" + y) + \"\\n\");\n        this.printk(`mounting root ${this.options.root} into /`);\n        const rootns = this.namespaces.create(_ns_namespace__WEBPACK_IMPORTED_MODULE_7__.NSOperation.NEW_MOUNT | _ns_namespace__WEBPACK_IMPORTED_MODULE_7__.NSOperation.NEW_PROC);\n        let root = this.vfs.lookup(\"/root\", this.current);\n        let vfs = null;\n        if (this.options.rootfs) {\n            vfs = this.vfs.getFS(this.options.rootfs);\n        }\n        else {\n            this.panic(\"No rootfs defined\");\n            return;\n        }\n        if (this.options.root) {\n            try {\n                await this.vfs.mount(this.options.root, \"\", root.mount, root.entry, vfs);\n            }\n            catch (e) {\n                this.panic(\"Error while mounting root: \" + (e.code) ? _public_status__WEBPACK_IMPORTED_MODULE_8__.Status[e.code] : 0);\n                return;\n            }\n        }\n        else {\n            this.panic(\"No root named \" + this.options.rootfs);\n            return;\n        }\n        let dev = this.vfs.lookup(\"/dev\", this.current);\n        await this.vfs.unmount(dev.mount, dev.entry);\n        root = this.vfs.lookup(\"/root\", this.current);\n        this.processes.chcwd(this.current, root);\n        this.processes.chroot(this.current, root);\n        dev = this.vfs.lookup(\"/dev\", this.current);\n        await this.vfs.mount(\"\", \"\", dev.mount, dev.entry, this.vfs.getFS(\"dev\"));\n        const proc = this.vfs.lookup(\"/proc\", this.current);\n        await this.vfs.mount(\"\", \"\", proc.mount, proc.entry, this.vfs.getFS(\"proc\"));\n        const run = this.vfs.lookup(\"/var/tmp\", this.current);\n        await this.vfs.mount(\"\", \"\", run.mount, run.entry, this.vfs.getFS(\"tmpfs\"));\n        if (this.options.initrc) {\n            this.printk(`\\ninit: starting ${this.options.initrc}`);\n            try {\n                await this.processes.createProcess(this.options.initrc, [], this.current);\n                await this.processes.wait(1);\n            }\n            catch (e) {\n                if (e instanceof _public_status__WEBPACK_IMPORTED_MODULE_8__.PError && e.code == _public_status__WEBPACK_IMPORTED_MODULE_8__.Status.ENOENT) {\n                    this.panic(this.options.initrc + \" : No such file or directory\");\n                    this.panic(\"Nothing else to do, terminated.\");\n                }\n            }\n        }\n        else {\n            this.panic(\"No initrd disk\");\n            return;\n        }\n    }\n    printk(data) {\n        this.serial.operations.write(this.serial, data);\n        this.serial.operations.write(this.serial, \"\\n\\r\");\n    }\n    panic(data) {\n        this.printk(\"PANIC : \" + data);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/kernel/kernel.ts\n");

/***/ }),

/***/ "./src/kernel/ns/namespace.ts":
/*!************************************!*\
  !*** ./src/kernel/ns/namespace.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NSOperation\": () => (/* binding */ NSOperation),\n/* harmony export */   \"NamespaceManager\": () => (/* binding */ NamespaceManager)\n/* harmony export */ });\nvar NSOperation;\n(function (NSOperation) {\n    NSOperation[NSOperation[\"NEW_MOUNT\"] = 1] = \"NEW_MOUNT\";\n    NSOperation[NSOperation[\"NEW_PROC\"] = 2] = \"NEW_PROC\";\n})(NSOperation || (NSOperation = {}));\nclass NamespaceManager {\n    kernel;\n    constructor(kernel) {\n        this.kernel = kernel;\n    }\n    create(options) {\n        return {};\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMva2VybmVsL25zL25hbWVzcGFjZS50cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQU1BO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3NzaW1waWJsZS8uL3NyYy9rZXJuZWwvbnMvbmFtZXNwYWNlLnRzP2NiY2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtLZXJuZWx9IGZyb20gXCIuLi9rZXJuZWxcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJTmFtZXNwYWNlUHJveHkge1xuXG59XG5cbmV4cG9ydCBlbnVtIE5TT3BlcmF0aW9uIHtcbiAgICBORVdfTU9VTlQgPSAweDAwMDAwMSxcbiAgICBORVdfUFJPQyA9IDB4MDAwMDAyLFxufVxuXG5leHBvcnQgY2xhc3MgTmFtZXNwYWNlTWFuYWdlcntcbiAgICBwcml2YXRlIGtlcm5lbDogS2VybmVsO1xuXG4gICAgY29uc3RydWN0b3Ioa2VybmVsOiBLZXJuZWwpIHtcbiAgICAgICAgdGhpcy5rZXJuZWwgPSBrZXJuZWw7XG4gICAgfVxuXG4gICAgY3JlYXRlKG9wdGlvbnM6IE5TT3BlcmF0aW9uKTogSU5hbWVzcGFjZVByb3h5IHtcbiAgICAgICAgcmV0dXJuIHt9XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/kernel/ns/namespace.ts\n");

/***/ }),

/***/ "./src/kernel/proc/lorch/module.ts":
/*!*****************************************!*\
  !*** ./src/kernel/proc/lorch/module.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _orchestrator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../orchestrator */ \"./src/kernel/proc/orchestrator.ts\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uuid */ \"./node_modules/uuid/dist/esm-browser/v4.js\");\n/* harmony import */ var _worker_img__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! &/worker.img */ \"./dist/worker.img\");\n/* harmony import */ var _shared_proc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../shared/proc */ \"./src/shared/proc.ts\");\n\n\n// @ts-ignore\n\n\nconst workers = new Map();\nconst DEBUG = true;\nfunction init(kernel) {\n    kernel.orchestrators.registerOrchestrator({\n        name: \"lorch\",\n        getcontainer: () => new Promise(resolve => {\n            const id = (0,uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n            const wrk = new Worker(_worker_img__WEBPACK_IMPORTED_MODULE_1__, {\n                name: \"\" + id\n            });\n            const buck = {\n                id: id,\n                worker: wrk,\n                resolve,\n            };\n            workers.set(id, buck);\n            wrk.addEventListener(\"message\", async (ev) => {\n                if (DEBUG) {\n                    console.log(\"rx\", ev.data);\n                }\n                await handleMessage(ev, buck);\n            });\n        })\n    });\n}\nconst containerOperations = {\n    run: (container, params) => {\n        const buck = workers.get(container.id);\n        buck.handler = params.listener;\n        const msg = {\n            id: \"\",\n            code: params.code,\n            argv: params.argv,\n            dyna: params.dyna,\n            type: _shared_proc__WEBPACK_IMPORTED_MODULE_2__.MessageType.START,\n        };\n        container.status = _orchestrator__WEBPACK_IMPORTED_MODULE_0__.ContainerStatus.RUNNING;\n        buck.worker.postMessage(msg);\n    },\n    kill: container => {\n        const buck = workers.get(container.id);\n        buck.worker.terminate();\n        workers.delete(buck.id);\n        container.status = _orchestrator__WEBPACK_IMPORTED_MODULE_0__.ContainerStatus.STOPPED;\n    },\n    send: (container, message) => {\n        const buck = workers.get(container.id);\n        if (DEBUG) {\n            console.log(\"tx\", message);\n        }\n        buck.worker.postMessage(message);\n    }\n};\nasync function handleMessage(message, bucket) {\n    if (message.data.type == _shared_proc__WEBPACK_IMPORTED_MODULE_2__.MessageType.READY) {\n        bucket.container = {\n            id: bucket.id,\n            status: _orchestrator__WEBPACK_IMPORTED_MODULE_0__.ContainerStatus.WAITING,\n            operations: containerOperations\n        };\n        bucket.resolve(bucket.container);\n    }\n    else {\n        if (bucket.handler) {\n            await bucket.handler(message.data, bucket.container);\n        }\n    }\n}\nfunction cleanup() {\n}\nconst m = {\n    name: \"lorch\",\n    init: init,\n    cleanup: cleanup\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (m);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMva2VybmVsL3Byb2MvbG9yY2gvbW9kdWxlLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9zc2ltcGlibGUvLi9zcmMva2VybmVsL3Byb2MvbG9yY2gvbW9kdWxlLnRzPzI1ZGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJS2VybmVsTW9kdWxlfSBmcm9tIFwiLi4vLi4vc3lzL21vZHVsZXNcIjtcbmltcG9ydCB7S2VybmVsfSBmcm9tIFwiLi4vLi4va2VybmVsXCI7XG5pbXBvcnQge0NvbnRhaW5lclN0YXR1cywgSUNvbnRhaW5lciwgSUNvbnRhaW5lck9wZXJhdGlvbnN9IGZyb20gXCIuLi9vcmNoZXN0cmF0b3JcIjtcbmltcG9ydCB7djQgYXMgVVVJRH0gZnJvbSAndXVpZCc7XG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgd29ya2VySW1hZ2UgZnJvbSAnJi93b3JrZXIuaW1nJztcbmltcG9ydCB7SVByb2NNZXNzYWdlLCBJUHJvY1N0YXJ0LCBNZXNzYWdlVHlwZX0gZnJvbSBcIi4uLy4uLy4uL3NoYXJlZC9wcm9jXCI7XG5cbmludGVyZmFjZSBXb3JrZXJCdWNrZXR7XG4gICAgaWQ6IFVVSUQsXG4gICAgd29ya2VyOiBXb3JrZXIsXG4gICAgY29udGFpbmVyPzogSUNvbnRhaW5lcixcbiAgICByZXNvbHZlOiAoY29udGFpbmVyOiBJQ29udGFpbmVyIHwgUHJvbWlzZUxpa2U8SUNvbnRhaW5lcj4pID0+IHZvaWQ7XG4gICAgaGFuZGxlcj86IChtZXNzYWdlOiBJUHJvY01lc3NhZ2UsIGNvbnRhaW5lcjogSUNvbnRhaW5lcikgPT4gdm9pZDtcbn1cbmNvbnN0IHdvcmtlcnMgPSBuZXcgTWFwPHN0cmluZywgV29ya2VyQnVja2V0PigpO1xuY29uc3QgREVCVUcgPSB0cnVlO1xuZnVuY3Rpb24gaW5pdChrZXJuZWw6IEtlcm5lbCl7XG4gICAga2VybmVsLm9yY2hlc3RyYXRvcnMucmVnaXN0ZXJPcmNoZXN0cmF0b3Ioe1xuICAgICAgICBuYW1lOiBcImxvcmNoXCIsXG4gICAgICAgIGdldGNvbnRhaW5lcjogKCkgPT4gbmV3IFByb21pc2U8SUNvbnRhaW5lcj4ocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpZCA9IFVVSUQoKTtcbiAgICAgICAgICAgIGNvbnN0IHdyayA9IG5ldyBXb3JrZXIod29ya2VySW1hZ2UsIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlwiICsgaWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgYnVjayA9IHtcbiAgICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgICAgd29ya2VyOiB3cmssXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdvcmtlcnMuc2V0KGlkLCBidWNrKVxuICAgICAgICAgICAgd3JrLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGFzeW5jIGV2ID0+IHtcbiAgICAgICAgICAgICAgICBpZihERUJVRyl7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicnhcIiwgZXYuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGF3YWl0IGhhbmRsZU1lc3NhZ2UoZXYsIGJ1Y2spXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICB9KVxufVxuXG5jb25zdCBjb250YWluZXJPcGVyYXRpb25zOiBJQ29udGFpbmVyT3BlcmF0aW9ucyA9IHtcbiAgICBydW46KGNvbnRhaW5lciwgcGFyYW1zKSA9PntcbiAgICAgICAgY29uc3QgYnVjayA9IHdvcmtlcnMuZ2V0KGNvbnRhaW5lci5pZCkhO1xuICAgICAgICBidWNrLmhhbmRsZXIgPSBwYXJhbXMubGlzdGVuZXI7XG4gICAgICAgIGNvbnN0IG1zZzogSVByb2NTdGFydCA9IHtcbiAgICAgICAgICAgIGlkOiBcIlwiLFxuICAgICAgICAgICAgY29kZTogcGFyYW1zLmNvZGUsXG4gICAgICAgICAgICBhcmd2OiBwYXJhbXMuYXJndixcbiAgICAgICAgICAgIGR5bmE6IHBhcmFtcy5keW5hLFxuICAgICAgICAgICAgdHlwZTogTWVzc2FnZVR5cGUuU1RBUlQsXG4gICAgICAgIH1cbiAgICAgICAgY29udGFpbmVyLnN0YXR1cyA9IENvbnRhaW5lclN0YXR1cy5SVU5OSU5HO1xuICAgICAgICBidWNrLndvcmtlci5wb3N0TWVzc2FnZShtc2cpXG4gICAgfSxcbiAgICBraWxsOiBjb250YWluZXIgPT4ge1xuICAgICAgICBjb25zdCBidWNrID0gd29ya2Vycy5nZXQoY29udGFpbmVyLmlkKSE7XG4gICAgICAgIGJ1Y2sud29ya2VyLnRlcm1pbmF0ZSgpO1xuICAgICAgICB3b3JrZXJzLmRlbGV0ZShidWNrLmlkKTtcbiAgICAgICAgY29udGFpbmVyLnN0YXR1cyA9IENvbnRhaW5lclN0YXR1cy5TVE9QUEVEO1xuICAgIH0sXG4gICAgc2VuZDooY29udGFpbmVyLCBtZXNzYWdlKSA9PiB7XG4gICAgICAgIGNvbnN0IGJ1Y2sgPSB3b3JrZXJzLmdldChjb250YWluZXIuaWQpITtcbiAgICAgICAgaWYoREVCVUcpe1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0eFwiLCBtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBidWNrLndvcmtlci5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgICB9XG59XG5cblxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlTWVzc2FnZShtZXNzYWdlOiBNZXNzYWdlRXZlbnQ8SVByb2NNZXNzYWdlPiwgYnVja2V0OiBXb3JrZXJCdWNrZXQpIHtcbiAgICBpZiAobWVzc2FnZS5kYXRhLnR5cGUgPT0gTWVzc2FnZVR5cGUuUkVBRFkpIHtcbiAgICAgICAgYnVja2V0LmNvbnRhaW5lciA9IHtcbiAgICAgICAgICAgIGlkOiBidWNrZXQuaWQsXG4gICAgICAgICAgICBzdGF0dXM6IENvbnRhaW5lclN0YXR1cy5XQUlUSU5HLFxuICAgICAgICAgICAgb3BlcmF0aW9uczogY29udGFpbmVyT3BlcmF0aW9uc1xuICAgICAgICB9O1xuICAgICAgICBidWNrZXQucmVzb2x2ZShidWNrZXQuY29udGFpbmVyKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChidWNrZXQuaGFuZGxlcikge1xuICAgICAgICAgICAgYXdhaXQgYnVja2V0LmhhbmRsZXIobWVzc2FnZS5kYXRhLCBidWNrZXQuY29udGFpbmVyISk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNsZWFudXAoKXtcblxufVxuXG5jb25zdCBtOiBJS2VybmVsTW9kdWxlID0ge1xuICAgIG5hbWU6IFwibG9yY2hcIixcbiAgICBpbml0OiBpbml0LFxuICAgIGNsZWFudXA6IGNsZWFudXBcbn1cblxuZXhwb3J0IGRlZmF1bHQgbTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/kernel/proc/lorch/module.ts\n");

/***/ }),

/***/ "./src/kernel/proc/orchestrator.ts":
/*!*****************************************!*\
  !*** ./src/kernel/proc/orchestrator.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ContainerStatus\": () => (/* binding */ ContainerStatus),\n/* harmony export */   \"OrchestratorManagement\": () => (/* binding */ OrchestratorManagement)\n/* harmony export */ });\nvar ContainerStatus;\n(function (ContainerStatus) {\n    ContainerStatus[ContainerStatus[\"PENDING\"] = 0] = \"PENDING\";\n    ContainerStatus[ContainerStatus[\"WAITING\"] = 1] = \"WAITING\";\n    ContainerStatus[ContainerStatus[\"RUNNING\"] = 2] = \"RUNNING\";\n    ContainerStatus[ContainerStatus[\"STOPPED\"] = 3] = \"STOPPED\";\n})(ContainerStatus || (ContainerStatus = {}));\nclass OrchestratorManagement {\n    orchestrator = new Map();\n    kernel;\n    constructor(kernel) {\n        this.kernel = kernel;\n    }\n    registerOrchestrator(orchestrator) {\n        this.orchestrator.set(orchestrator.name, orchestrator);\n    }\n    getOrchestrator(name) {\n        return this.orchestrator.get(name);\n    }\n    async getContainer(orchestrator) {\n        return orchestrator.getcontainer();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMva2VybmVsL3Byb2Mvb3JjaGVzdHJhdG9yLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBS0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUEwQkE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3NzaW1waWJsZS8uL3NyYy9rZXJuZWwvcHJvYy9vcmNoZXN0cmF0b3IudHM/NTMxOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0lEZXBlbmRlbmN5LCBJUHJvY01lc3NhZ2UsIE1lc3NhZ2VUeXBlfSBmcm9tIFwiLi4vLi4vc2hhcmVkL3Byb2NcIjtcbmltcG9ydCB7djQgYXMgVVVJRCB9IGZyb20gJ3V1aWQnO1xuaW1wb3J0IHtLZXJuZWx9IGZyb20gXCIuLi9rZXJuZWxcIjtcblxuXG5leHBvcnQgZW51bSBDb250YWluZXJTdGF0dXN7XG4gICAgUEVORElORyxcbiAgICBXQUlUSU5HLFxuICAgIFJVTk5JTkcsXG4gICAgU1RPUFBFRFxufVxuXG5pbnRlcmZhY2UgSU9yY2hlc3RyYXRvcntcbiAgICBuYW1lOiBzdHJpbmdcbiAgICBnZXRjb250YWluZXI6ICgpID0+IFByb21pc2U8SUNvbnRhaW5lcj47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJ1blBhcmFtc3tcbiAgICBjb2RlOiBzdHJpbmc7XG4gICAgYXJndjogc3RyaW5nW107XG4gICAgZHluYTogSURlcGVuZGVuY3lbXTtcbiAgICBsaXN0ZW5lcjogKG1lc3NhZ2U6SVByb2NNZXNzYWdlLCBjb250YWluZXI6IElDb250YWluZXIpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbnRhaW5lck9wZXJhdGlvbnMge1xuICAgIHNlbmQ6IChjb250YWluZXI6IElDb250YWluZXIsIG1lc3NhZ2U6SVByb2NNZXNzYWdlKSA9PiB2b2lkLFxuICAgIHJ1bjogKGNvbnRhaW5lcjogSUNvbnRhaW5lciwgcGFyYW1zOiBJUnVuUGFyYW1zKSA9PiB2b2lkXG4gICAga2lsbDogKGNvbnRhaW5lcjogSUNvbnRhaW5lcikgPT4gdm9pZFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElDb250YWluZXJ7XG4gICAgaWQ6IFVVSURcbiAgICBzdGF0dXM6IENvbnRhaW5lclN0YXR1cyxcbiAgICBvcGVyYXRpb25zOiBJQ29udGFpbmVyT3BlcmF0aW9uc1xufVxuXG5leHBvcnQgY2xhc3MgT3JjaGVzdHJhdG9yTWFuYWdlbWVudCB7XG4gICAgcHJpdmF0ZSBvcmNoZXN0cmF0b3IgPSBuZXcgTWFwPHN0cmluZywgSU9yY2hlc3RyYXRvcj4oKTtcbiAgICBwcml2YXRlIGtlcm5lbDogS2VybmVsO1xuXG4gICAgY29uc3RydWN0b3Ioa2VybmVsOiBLZXJuZWwpIHtcbiAgICAgICAgdGhpcy5rZXJuZWwgPSBrZXJuZWw7XG4gICAgfVxuXG4gICAgcmVnaXN0ZXJPcmNoZXN0cmF0b3Iob3JjaGVzdHJhdG9yOiBJT3JjaGVzdHJhdG9yKXtcbiAgICAgICAgdGhpcy5vcmNoZXN0cmF0b3Iuc2V0KG9yY2hlc3RyYXRvci5uYW1lLCBvcmNoZXN0cmF0b3IpO1xuICAgIH1cblxuICAgIGdldE9yY2hlc3RyYXRvcihuYW1lOiBzdHJpbmcpe1xuICAgICAgICByZXR1cm4gdGhpcy5vcmNoZXN0cmF0b3IuZ2V0KG5hbWUpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldENvbnRhaW5lcihvcmNoZXN0cmF0b3I6IElPcmNoZXN0cmF0b3Ipe1xuICAgICAgICByZXR1cm4gb3JjaGVzdHJhdG9yLmdldGNvbnRhaW5lcigpO1xuICAgIH1cblxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/kernel/proc/orchestrator.ts\n");

/***/ }),

/***/ "./src/kernel/proc/process.ts":
/*!************************************!*\
  !*** ./src/kernel/proc/process.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ProcessManagement\": () => (/* binding */ ProcessManagement)\n/* harmony export */ });\n/* harmony import */ var _shared_proc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/proc */ \"./src/shared/proc.ts\");\n/* harmony import */ var _fs_procfs_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../fs/procfs/module */ \"./src/kernel/fs/procfs/module.ts\");\n/* harmony import */ var _public_status__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../public/status */ \"./src/public/status.ts\");\n\n\n\nvar ITaskStatus;\n(function (ITaskStatus) {\n    ITaskStatus[ITaskStatus[\"PENDING\"] = 0] = \"PENDING\";\n    ITaskStatus[ITaskStatus[\"RUNNGING\"] = 1] = \"RUNNGING\";\n    ITaskStatus[ITaskStatus[\"STOP\"] = 2] = \"STOP\";\n})(ITaskStatus || (ITaskStatus = {}));\nclass ProcessManagement {\n    lastId = 0;\n    pool = new Map();\n    containers = new Map();\n    kernel;\n    constructor(kernel) {\n        this.kernel = kernel;\n    }\n    taskOperations = {\n        getParent: this.getParent\n    };\n    genID() {\n        this.lastId++;\n        return this.lastId;\n    }\n    getParent(task) {\n        if (task.parent) {\n            let c = this.pool.get(task.parent);\n            if (c) {\n                return c.task;\n            }\n        }\n    }\n    async handleProcess(message, container) {\n        const process = this.containers.get(container.id);\n        this.kernel.current = process.task;\n        try {\n            switch (message.type) {\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.WRITE: {\n                    let write = message;\n                    const file = process.task.files.fileDescriptors[write.fd];\n                    if (file) {\n                        if (file.operations.write) {\n                            file.operations.write(file, write.buf);\n                        }\n                        else {\n                            throw new _public_status__WEBPACK_IMPORTED_MODULE_2__.PError(_public_status__WEBPACK_IMPORTED_MODULE_2__.Status.EPERM);\n                        }\n                    }\n                    else {\n                        throw new _public_status__WEBPACK_IMPORTED_MODULE_2__.PError(_public_status__WEBPACK_IMPORTED_MODULE_2__.Status.EBADFD);\n                    }\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.READ: {\n                    let read = message;\n                    const file = process.task.files.fileDescriptors[read.fd];\n                    if (file) {\n                        let buf;\n                        if (file.operations.read) {\n                            buf = await file.operations.read(file, read.count);\n                        }\n                        else {\n                            throw new _public_status__WEBPACK_IMPORTED_MODULE_2__.PError(_public_status__WEBPACK_IMPORTED_MODULE_2__.Status.EINVAL);\n                        }\n                        const res = {\n                            type: _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.READ_RES,\n                            id: message.id,\n                            buf\n                        };\n                        container.operations.send(container, res);\n                    }\n                    else {\n                        throw new _public_status__WEBPACK_IMPORTED_MODULE_2__.PError(_public_status__WEBPACK_IMPORTED_MODULE_2__.Status.EBADFD);\n                    }\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.GETCWD: {\n                    const res = {\n                        type: _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.GETCWD_RES,\n                        id: message.id,\n                        cwd: this.kernel.vfs.path(process.task.pwd, process.task)\n                    };\n                    container.operations.send(container, res);\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.OPEN: {\n                    let open = message;\n                    let cwd = process.task.pwd;\n                    let entry = this.kernel.vfs.lookup(open.path, process.task);\n                    let file = await this.kernel.vfs.open(entry);\n                    let fd = process.task.files.fileDescriptors.push(file) - 1;\n                    const res = {\n                        type: _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.OPEN_RES,\n                        id: message.id,\n                        fd\n                    };\n                    container.operations.send(container, res);\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.CLOSE: {\n                    let close = message;\n                    if (!process.task.files.fileDescriptors) {\n                        throw new _public_status__WEBPACK_IMPORTED_MODULE_2__.PError(_public_status__WEBPACK_IMPORTED_MODULE_2__.Status.EBADFD);\n                    }\n                    process.task.files.fileDescriptors[close.fd] = null;\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.GETDENTS: {\n                    let getdents = message;\n                    const file = process.task.files.fileDescriptors[getdents.fd];\n                    if (file) {\n                        if (file.operations.iterate) {\n                            const res = {\n                                type: _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.GETDENTS_RES,\n                                id: message.id,\n                                dirents: await file.operations.iterate(file)\n                            };\n                            container.operations.send(container, res);\n                        }\n                        throw new _public_status__WEBPACK_IMPORTED_MODULE_2__.PError(_public_status__WEBPACK_IMPORTED_MODULE_2__.Status.ENOTDIR);\n                    }\n                    else {\n                        throw new _public_status__WEBPACK_IMPORTED_MODULE_2__.PError(_public_status__WEBPACK_IMPORTED_MODULE_2__.Status.EBADFD);\n                    }\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.MOUNT: {\n                    let mount = message;\n                    let cwd = process.task.pwd;\n                    const mountpoint = this.kernel.vfs.lookup(mount.mountpoint, process.task);\n                    await this.kernel.vfs.mount(mount.device, mount.options, mountpoint.mount, mountpoint.entry, this.kernel.vfs.getFS(mount.fstype));\n                    const res = {\n                        type: _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.MOUNT_RES,\n                        id: message.id,\n                    };\n                    container.operations.send(container, res);\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.UNMOUNT: {\n                    let unmount = message;\n                    let cwd = process.task.pwd;\n                    const mountpoint = this.kernel.vfs.lookup(unmount.path, process.task);\n                    await this.kernel.vfs.unmount(mountpoint.mount, mountpoint.entry);\n                    const res = {\n                        type: _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.UNMOUNT_RES,\n                        id: message.id,\n                    };\n                    container.operations.send(container, res);\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.EXEC: {\n                    let exec = message;\n                    let task = await this.createProcess(exec.path, exec.argv, process.task);\n                    const res = {\n                        type: _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.EXEC_RES,\n                        id: message.id,\n                        pid: task.pid\n                    };\n                    container.operations.send(container, res);\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.CHCWD: {\n                    let chcwd = message;\n                    let task = process.task;\n                    const path = this.kernel.vfs.lookup(chcwd.path, process.task);\n                    this.chcwd(task, path);\n                    const res = {\n                        type: _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.CHCWD_RES,\n                        id: message.id\n                    };\n                    container.operations.send(container, res);\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.DIE: {\n                    this.kernel.processes.killProcess(process);\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.MKDIR: {\n                    let mkdir = message;\n                    let task = process.task;\n                    this.kernel.vfs.mkdir(mkdir.path, task);\n                    const res = {\n                        type: _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.MKDIR_RES,\n                        id: message.id\n                    };\n                    container.operations.send(container, res);\n                    break;\n                }\n                case _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.RMDIR: {\n                    let rmdir = message;\n                    let task = process.task;\n                    this.kernel.vfs.rmdir(rmdir.path, task);\n                    const res = {\n                        type: _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.MKDIR_RES,\n                        id: message.id\n                    };\n                    container.operations.send(container, res);\n                    break;\n                }\n            }\n        }\n        catch (e) {\n            if (e instanceof _public_status__WEBPACK_IMPORTED_MODULE_2__.PError) {\n                const error = {\n                    type: _shared_proc__WEBPACK_IMPORTED_MODULE_0__.MessageType.ERROR,\n                    id: message.id,\n                    code: e.code,\n                };\n                container.operations.send(container, error);\n            }\n        }\n    }\n    async fetchDepCode(dep, task) {\n        let entry = this.kernel.vfs.lookup(`/lib/${dep}.dyna`, task);\n        let file = await this.kernel.vfs.open(entry);\n        let content = \"\";\n        if (file.operations.read) {\n            content = await file.operations.read(file, -1);\n        }\n        else {\n            throw new _public_status__WEBPACK_IMPORTED_MODULE_2__.PError(_public_status__WEBPACK_IMPORTED_MODULE_2__.Status.EINVAL);\n        }\n        let result = [];\n        if (!content.startsWith(\"dynalib:\")) {\n            // TODO\n            console.log(\"Wrong format\");\n        }\n        let dynalibstruct = JSON.parse(content.substring(8));\n        for (let dep of dynalibstruct.dependencies) {\n            result = result.concat(await this.fetchDepCode(dep, task));\n        }\n        result.push({\n            name: dep,\n            code: dynalibstruct.code\n        });\n        return result;\n    }\n    chroot(task, path) {\n        task.root = {\n            entry: path.entry,\n            mount: path.mount\n        };\n    }\n    chcwd(task, path) {\n        task.pwd = {\n            entry: path.entry,\n            mount: path.mount\n        };\n    }\n    openFile(task, pos, file) {\n        task.files.fileDescriptors[pos] = file;\n        task.proc.fds[pos] = (0,_fs_procfs_module__WEBPACK_IMPORTED_MODULE_1__.procCreate)(\"\" + pos, task.proc.fd, {\n            write: async (f, buf) => {\n                if (file.operations.write) {\n                    await file.operations.write(file, buf);\n                }\n            },\n            read: (f, count) => file.operations.read(file, count)\n        });\n    }\n    async createProcess(path, argv, parent) {\n        let entry = this.kernel.vfs.lookup(path, parent);\n        let file = await this.kernel.vfs.open(entry);\n        let content;\n        if (file.operations.read) {\n            content = await file.operations.read(file, -1);\n        }\n        else {\n            throw new _public_status__WEBPACK_IMPORTED_MODULE_2__.PError(_public_status__WEBPACK_IMPORTED_MODULE_2__.Status.EINVAL);\n        }\n        if (!content.startsWith(\"PEXF:\")) {\n            throw new _public_status__WEBPACK_IMPORTED_MODULE_2__.PError(_public_status__WEBPACK_IMPORTED_MODULE_2__.Status.ENOEXEC);\n        }\n        let pexfstruct = JSON.parse(content.substring(5));\n        let dyna = [];\n        for (let dep of pexfstruct.dependencies) {\n            dyna = dyna.concat(await this.fetchDepCode(dep, parent));\n        }\n        let pid = this.genID();\n        const p = (0,_fs_procfs_module__WEBPACK_IMPORTED_MODULE_1__.procMkdir)(\"\" + pid, null);\n        let lorch = this.kernel.orchestrators.getOrchestrator(\"lorch\");\n        let container = await lorch.getcontainer();\n        let waits = [];\n        const task = {\n            status: ITaskStatus.RUNNGING,\n            operations: this.taskOperations,\n            sys: true,\n            pid: pid,\n            uid: parent.uid ? parent.uid : 1,\n            gid: parent.gid ? parent.gid : 1,\n            waits: waits,\n            proc: {\n                dir: p,\n                fd: (0,_fs_procfs_module__WEBPACK_IMPORTED_MODULE_1__.procMkdir)(\"fd\", p),\n                fds: [],\n                argv: (0,_fs_procfs_module__WEBPACK_IMPORTED_MODULE_1__.procCreate)(\"argv\", p, {\n                    write: file1 => {\n                    },\n                    read: (file1, count) => new Promise(resolve => {\n                        resolve([path].concat(argv).reduce((x, y) => x + \" \" + y) + \"\\n\");\n                    })\n                }),\n                orch: (0,_fs_procfs_module__WEBPACK_IMPORTED_MODULE_1__.procCreate)(\"orch\", p, {\n                    write: file1 => {\n                    },\n                    read: (file1, count) => new Promise(resolve => {\n                        resolve(\"lorch:\" + container.id + \"\\n\");\n                    })\n                }),\n                run: (0,_fs_procfs_module__WEBPACK_IMPORTED_MODULE_1__.procCreate)(\"run\", p, {\n                    write: file1 => {\n                    },\n                    read: (file1, count) => new Promise((resolve, reject) => {\n                        waits.push(resolve);\n                    })\n                })\n            },\n            root: parent.root,\n            pwd: parent.pwd,\n            files: { fileDescriptors: [] },\n            parent: parent.pid ? parent.pid : undefined,\n        };\n        let stdinp = this.kernel.vfs.lookup(\"/dev/tty0\", parent);\n        let stdin = await this.kernel.vfs.open(stdinp);\n        this.openFile(task, 0, stdin);\n        this.openFile(task, 1, stdin);\n        this.openFile(task, 2, stdin);\n        container.operations.run(container, {\n            code: pexfstruct.code,\n            argv: [path].concat(argv),\n            dyna,\n            listener: this.handleProcess.bind(this)\n        });\n        const process = {\n            container,\n            task,\n        };\n        console.log(path, container.id);\n        this.pool.set(task.pid, process);\n        this.containers.set(container.id, process);\n        return task;\n    }\n    killProcess(process) {\n        process.container.operations.kill(process.container);\n        (0,_fs_procfs_module__WEBPACK_IMPORTED_MODULE_1__.procRemove)(process.task.proc.orch);\n        (0,_fs_procfs_module__WEBPACK_IMPORTED_MODULE_1__.procRemove)(process.task.proc.argv);\n        (0,_fs_procfs_module__WEBPACK_IMPORTED_MODULE_1__.procRemove)(process.task.proc.argv);\n        for (let i of process.task.proc.fds) {\n            if (i) {\n                (0,_fs_procfs_module__WEBPACK_IMPORTED_MODULE_1__.procRemove)(i);\n            }\n        }\n        (0,_fs_procfs_module__WEBPACK_IMPORTED_MODULE_1__.procRemove)(process.task.proc.fd);\n        (0,_fs_procfs_module__WEBPACK_IMPORTED_MODULE_1__.procRemove)(process.task.proc.dir);\n        for (let release of process.task.waits) {\n            release(\"CLOSE!\");\n        }\n        this.pool.delete(process.task.pid);\n        this.containers.delete(process.task.pid);\n    }\n    wait(pid) {\n        return new Promise((resolve, reject) => {\n            this.pool.get(pid).task.waits.push(resolve);\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/kernel/proc/process.ts\n");

/***/ }),

/***/ "./src/kernel/sys/modules.ts":
/*!***********************************!*\
  !*** ./src/kernel/sys/modules.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ModularityManager\": () => (/* binding */ ModularityManager)\n/* harmony export */ });\nclass ModularityManager {\n    modules = [];\n    kernel;\n    constructor(kernel) {\n        this.kernel = kernel;\n    }\n    installModule(module) {\n        this.modules.push({\n            module: module\n        });\n        module.init(this.kernel);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMva2VybmVsL3N5cy9tb2R1bGVzLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFlQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Bvc3NpbXBpYmxlLy4vc3JjL2tlcm5lbC9zeXMvbW9kdWxlcy50cz9mZjZiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7S2VybmVsfSBmcm9tIFwiLi4va2VybmVsXCI7XG5pbXBvcnQgYmxvYmZzIGZyb20gXCIuLi9mcy9ibG9iZnMvbW9kdWxlXCI7XG5pbXBvcnQgcHJvY2ZzIGZyb20gXCIuLi9mcy9wcm9jZnMvbW9kdWxlXCI7XG5pbXBvcnQgbG9yY2ggZnJvbSBcIi4uL3Byb2MvbG9yY2gvbW9kdWxlXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUtlcm5lbE1vZHVsZXtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgaW5pdDogKGtlcm5lbDogS2VybmVsKSA9PiB2b2lkO1xuICAgIGNsZWFudXA6ICgpID0+IHZvaWQ7XG59XG5cbmludGVyZmFjZSBJQWN0aXZlTW9kdWxlcyB7XG4gICAgbW9kdWxlOiBJS2VybmVsTW9kdWxlO1xufVxuXG5leHBvcnQgY2xhc3MgTW9kdWxhcml0eU1hbmFnZXJ7XG4gICAgbW9kdWxlczogSUFjdGl2ZU1vZHVsZXNbXSA9IFtdO1xuICAgIGtlcm5lbDogS2VybmVsO1xuXG4gICAgY29uc3RydWN0b3Ioa2VybmVsOiBLZXJuZWwpIHtcbiAgICAgICAgdGhpcy5rZXJuZWwgPSBrZXJuZWw7XG4gICAgfVxuXG4gICAgaW5zdGFsbE1vZHVsZShtb2R1bGU6IElLZXJuZWxNb2R1bGUpe1xuICAgICAgICB0aGlzLm1vZHVsZXMucHVzaCh7XG4gICAgICAgICAgICBtb2R1bGU6bW9kdWxlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIG1vZHVsZS5pbml0KHRoaXMua2VybmVsKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/kernel/sys/modules.ts\n");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var xterm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xterm */ \"./node_modules/xterm/lib/xterm.js\");\n/* harmony import */ var xterm__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xterm__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var xterm_addon_fit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! xterm-addon-fit */ \"./node_modules/xterm-addon-fit/lib/xterm-addon-fit.js\");\n/* harmony import */ var xterm_addon_fit__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xterm_addon_fit__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var xterm_webfont__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! xterm-webfont */ \"./node_modules/xterm-webfont/dist/index.js\");\n/* harmony import */ var xterm_webfont__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(xterm_webfont__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _kernel_kernel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./kernel/kernel */ \"./src/kernel/kernel.ts\");\n/* harmony import */ var xterm_css_xterm_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! xterm/css/xterm.css */ \"./node_modules/xterm/css/xterm.css\");\n/* harmony import */ var _initrd_img__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! &/initrd.img */ \"./dist/initrd.img\");\n/* harmony import */ var _vm_devicetree__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./vm/devicetree */ \"./src/vm/devicetree.ts\");\n/* harmony import */ var _vm_vm__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./vm/vm */ \"./src/vm/vm.ts\");\n\n\n\n\n\n// @ts-ignore\n\n\n\nclass TerminalDevice {\n    term;\n    resolve;\n    buffer = \"\";\n    constructor(el) {\n        this.term = new xterm__WEBPACK_IMPORTED_MODULE_0__.Terminal({\n            fontFamily: \"JetBrainsMono\",\n            fontSize: 13,\n            rendererType: \"dom\"\n        });\n        const fitAddon = new xterm_addon_fit__WEBPACK_IMPORTED_MODULE_1__.FitAddon();\n        this.term.loadAddon(fitAddon);\n        this.term.loadAddon(new xterm_webfont__WEBPACK_IMPORTED_MODULE_2__());\n        this.term.onData((data) => {\n            if (this.resolve && this.buffer.length == 0) {\n                this.resolve(data);\n                this.resolve = undefined;\n            }\n            else {\n                this.buffer += data;\n            }\n        });\n        fitAddon.fit();\n        // @ts-ignore\n        this.term.loadWebfontAndOpen(el);\n    }\n    async read(count) {\n        return new Promise(x => {\n            if (this.buffer.length) {\n                x(this.buffer);\n                this.buffer = \"\";\n            }\n            else {\n                this.resolve = x;\n            }\n        });\n    }\n    write(str) {\n        this.term.write(str);\n    }\n}\nconst terminal = new TerminalDevice(document.getElementById(\"term\"));\nwindow.onload = async () => setTimeout(async (x) => {\n    const vm = new _vm_vm__WEBPACK_IMPORTED_MODULE_7__.VirtualMachine((0,_vm_devicetree__WEBPACK_IMPORTED_MODULE_6__.discover)([\n        (0,_vm_devicetree__WEBPACK_IMPORTED_MODULE_6__.DeviceDetail)(\"initrd0\", {\n            compatibility: [\"storage:image\"],\n            image: _initrd_img__WEBPACK_IMPORTED_MODULE_5__\n        }),\n        (0,_vm_devicetree__WEBPACK_IMPORTED_MODULE_6__.DeviceDetail)(\"serial\", {\n            compatibility: [\"serial:terminal\"],\n            write: (buf) => terminal.write(buf),\n            read: (count) => terminal.read(count)\n        }),\n        (0,_vm_devicetree__WEBPACK_IMPORTED_MODULE_6__.DeviceDetail)(\"console\", {\n            compatibility: [\"display:console\"],\n            write: (buf) => console.log(buf)\n        }),\n    ]));\n    await vm.boot(new _kernel_kernel__WEBPACK_IMPORTED_MODULE_3__.Kernel({\n        serial: \"/dev/tty0\",\n        root: \"/dev/initrd0\",\n        rootfs: \"blob\",\n        initrc: \"/bin/init\"\n    }));\n}, 100);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWFpbi50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9zc2ltcGlibGUvLi9zcmMvbWFpbi50cz9jZDQ5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VGVybWluYWx9IGZyb20gXCJ4dGVybVwiO1xuaW1wb3J0IHtGaXRBZGRvbn0gZnJvbSBcInh0ZXJtLWFkZG9uLWZpdFwiO1xuaW1wb3J0ICogYXMgWHRlcm1XZWJmb250IGZyb20gJ3h0ZXJtLXdlYmZvbnQnXG5cbmltcG9ydCB7S2VybmVsfSBmcm9tIFwiLi9rZXJuZWwva2VybmVsXCI7XG5pbXBvcnQgXCJ4dGVybS9jc3MveHRlcm0uY3NzXCI7XG5cbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBpbml0cmQgZnJvbSBcIiYvaW5pdHJkLmltZ1wiO1xuaW1wb3J0IHtEZXZpY2VEZXRhaWwsIGRpc2NvdmVyfSBmcm9tIFwiLi92bS9kZXZpY2V0cmVlXCI7XG5pbXBvcnQge1ZpcnR1YWxNYWNoaW5lfSBmcm9tIFwiLi92bS92bVwiO1xuXG5cbmNsYXNzIFRlcm1pbmFsRGV2aWNle1xuICAgIHByaXZhdGUgdGVybTogVGVybWluYWw7XG4gICAgcHJpdmF0ZSByZXNvbHZlOiAoKHZhbHVlOiAoc3RyaW5nIHwgUHJvbWlzZUxpa2U8c3RyaW5nPikpID0+IHZvaWQpIHwgdW5kZWZpbmVkO1xuICAgIHByaXZhdGUgYnVmZmVyOiBzdHJpbmcgPSBcIlwiO1xuXG4gICAgY29uc3RydWN0b3IoZWw6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIHRoaXMudGVybSA9IG5ldyBUZXJtaW5hbCh7XG4gICAgICAgICAgICBmb250RmFtaWx5OiBcIkpldEJyYWluc01vbm9cIixcbiAgICAgICAgICAgIGZvbnRTaXplOjEzLFxuICAgICAgICAgICAgcmVuZGVyZXJUeXBlOiBcImRvbVwiXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBmaXRBZGRvbiA9IG5ldyBGaXRBZGRvbigpO1xuXG4gICAgICAgIHRoaXMudGVybS5sb2FkQWRkb24oZml0QWRkb24pO1xuICAgICAgICB0aGlzLnRlcm0ubG9hZEFkZG9uKG5ldyBYdGVybVdlYmZvbnQoKSlcblxuICAgICAgICB0aGlzLnRlcm0ub25EYXRhKChkYXRhKSA9PiB7XG4gICAgICAgICAgICBpZih0aGlzLnJlc29sdmUgJiYgdGhpcy5idWZmZXIubGVuZ3RoID09IDApe1xuICAgICAgICAgICAgICAgIHRoaXMucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc29sdmUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlciArPSBkYXRhXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIGZpdEFkZG9uLmZpdCgpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMudGVybS5sb2FkV2ViZm9udEFuZE9wZW4oZWwpO1xuICAgIH1cblxuICAgIGFzeW5jIHJlYWQoY291bnQ6IG51bWJlcik6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KHggPT57XG4gICAgICAgICAgICBpZih0aGlzLmJ1ZmZlci5sZW5ndGgpe1xuICAgICAgICAgICAgICAgIHgodGhpcy5idWZmZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gXCJcIjtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHRoaXMucmVzb2x2ZSA9IHg7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICB3cml0ZShzdHI6IHN0cmluZykge1xuICAgICAgICB0aGlzLnRlcm0ud3JpdGUoc3RyKTtcbiAgICB9XG59XG5cblxuY29uc3QgdGVybWluYWwgPSBuZXcgVGVybWluYWxEZXZpY2UoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXJtXCIpISk7XG5cbndpbmRvdy5vbmxvYWQgPSBhc3luYyAoKSA9PiBzZXRUaW1lb3V0KGFzeW5jIHggPT4ge1xuICAgIGNvbnN0IHZtID0gbmV3IFZpcnR1YWxNYWNoaW5lKGRpc2NvdmVyKFtcbiAgICAgICAgRGV2aWNlRGV0YWlsKFwiaW5pdHJkMFwiLCB7XG4gICAgICAgICAgICBjb21wYXRpYmlsaXR5OiBbXCJzdG9yYWdlOmltYWdlXCJdLFxuICAgICAgICAgICAgaW1hZ2U6IGluaXRyZFxuICAgICAgICB9KSxcblxuICAgICAgICBEZXZpY2VEZXRhaWwoXCJzZXJpYWxcIiwge1xuICAgICAgICAgICAgY29tcGF0aWJpbGl0eTogW1wic2VyaWFsOnRlcm1pbmFsXCJdLFxuICAgICAgICAgICAgd3JpdGU6IChidWY6IHN0cmluZykgPT4gdGVybWluYWwud3JpdGUoYnVmKSxcbiAgICAgICAgICAgIHJlYWQ6IChjb3VudDogbnVtYmVyKSA9PiB0ZXJtaW5hbC5yZWFkKGNvdW50KVxuICAgICAgICB9KSxcblxuICAgICAgICBEZXZpY2VEZXRhaWwoXCJjb25zb2xlXCIsIHtcbiAgICAgICAgICAgIGNvbXBhdGliaWxpdHk6IFtcImRpc3BsYXk6Y29uc29sZVwiXSxcbiAgICAgICAgICAgIHdyaXRlOiAoYnVmOiBzdHJpbmcpID0+IGNvbnNvbGUubG9nKGJ1ZilcbiAgICAgICAgfSksXG4gICAgXSkpO1xuXG4gICAgYXdhaXQgdm0uYm9vdChuZXcgS2VybmVsKHtcbiAgICAgICAgc2VyaWFsOiBcIi9kZXYvdHR5MFwiLFxuICAgICAgICByb290OiBcIi9kZXYvaW5pdHJkMFwiLFxuICAgICAgICByb290ZnM6IFwiYmxvYlwiLFxuICAgICAgICBpbml0cmM6IFwiL2Jpbi9pbml0XCJcbiAgICB9KSk7XG59LCAxMDApO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main.ts\n");

/***/ }),

/***/ "./src/public/status.ts":
/*!******************************!*\
  !*** ./src/public/status.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Status\": () => (/* binding */ Status),\n/* harmony export */   \"PError\": () => (/* binding */ PError)\n/* harmony export */ });\nvar Status;\n(function (Status) {\n    Status[Status[\"OK\"] = 0] = \"OK\";\n    Status[Status[\"EPERM\"] = 1] = \"EPERM\";\n    Status[Status[\"ENOENT\"] = 2] = \"ENOENT\";\n    Status[Status[\"ESRCH\"] = 3] = \"ESRCH\";\n    Status[Status[\"EINTR\"] = 4] = \"EINTR\";\n    Status[Status[\"EIO\"] = 5] = \"EIO\";\n    Status[Status[\"ENXIO\"] = 6] = \"ENXIO\";\n    Status[Status[\"E2BIG\"] = 7] = \"E2BIG\";\n    Status[Status[\"ENOEXEC\"] = 8] = \"ENOEXEC\";\n    Status[Status[\"EBADF\"] = 9] = \"EBADF\";\n    Status[Status[\"ECHILD\"] = 10] = \"ECHILD\";\n    Status[Status[\"EAGAIN\"] = 11] = \"EAGAIN\";\n    Status[Status[\"ENOMEM\"] = 12] = \"ENOMEM\";\n    Status[Status[\"EACCES\"] = 13] = \"EACCES\";\n    Status[Status[\"EFAULT\"] = 14] = \"EFAULT\";\n    Status[Status[\"ENOTBLK\"] = 15] = \"ENOTBLK\";\n    Status[Status[\"EBUSY\"] = 16] = \"EBUSY\";\n    Status[Status[\"EEXIST\"] = 17] = \"EEXIST\";\n    Status[Status[\"EXDEV\"] = 18] = \"EXDEV\";\n    Status[Status[\"ENODEV\"] = 19] = \"ENODEV\";\n    Status[Status[\"ENOTDIR\"] = 20] = \"ENOTDIR\";\n    Status[Status[\"EISDIR\"] = 21] = \"EISDIR\";\n    Status[Status[\"EINVAL\"] = 22] = \"EINVAL\";\n    Status[Status[\"ENFILE\"] = 23] = \"ENFILE\";\n    Status[Status[\"EMFILE\"] = 24] = \"EMFILE\";\n    Status[Status[\"ENOTTY\"] = 25] = \"ENOTTY\";\n    Status[Status[\"ETXTBSY\"] = 26] = \"ETXTBSY\";\n    Status[Status[\"EFBIG\"] = 27] = \"EFBIG\";\n    Status[Status[\"ENOSPC\"] = 28] = \"ENOSPC\";\n    Status[Status[\"ESPIPE\"] = 29] = \"ESPIPE\";\n    Status[Status[\"EROFS\"] = 30] = \"EROFS\";\n    Status[Status[\"EMLINK\"] = 31] = \"EMLINK\";\n    Status[Status[\"EPIPE\"] = 32] = \"EPIPE\";\n    Status[Status[\"EDOM\"] = 33] = \"EDOM\";\n    Status[Status[\"ERANGE\"] = 34] = \"ERANGE\";\n    Status[Status[\"EDEADLK\"] = 35] = \"EDEADLK\";\n    Status[Status[\"ENAMETOOLONG\"] = 36] = \"ENAMETOOLONG\";\n    Status[Status[\"ENOLCK\"] = 37] = \"ENOLCK\";\n    Status[Status[\"ENOSYS\"] = 38] = \"ENOSYS\";\n    Status[Status[\"ENOTEMPTY\"] = 39] = \"ENOTEMPTY\";\n    Status[Status[\"ELOOP\"] = 40] = \"ELOOP\";\n    Status[Status[\"ENOMSG\"] = 42] = \"ENOMSG\";\n    Status[Status[\"EIDRM\"] = 43] = \"EIDRM\";\n    Status[Status[\"ECHRNG\"] = 44] = \"ECHRNG\";\n    Status[Status[\"EL2NSYNC\"] = 45] = \"EL2NSYNC\";\n    Status[Status[\"EL3HLT\"] = 46] = \"EL3HLT\";\n    Status[Status[\"EL3RST\"] = 47] = \"EL3RST\";\n    Status[Status[\"ELNRNG\"] = 48] = \"ELNRNG\";\n    Status[Status[\"EUNATCH\"] = 49] = \"EUNATCH\";\n    Status[Status[\"ENOCSI\"] = 50] = \"ENOCSI\";\n    Status[Status[\"EL2HLT\"] = 51] = \"EL2HLT\";\n    Status[Status[\"EBADE\"] = 52] = \"EBADE\";\n    Status[Status[\"EBADR\"] = 53] = \"EBADR\";\n    Status[Status[\"EXFULL\"] = 54] = \"EXFULL\";\n    Status[Status[\"ENOANO\"] = 55] = \"ENOANO\";\n    Status[Status[\"EBADRQC\"] = 56] = \"EBADRQC\";\n    Status[Status[\"EBADSLT\"] = 57] = \"EBADSLT\";\n    Status[Status[\"EBFONT\"] = 59] = \"EBFONT\";\n    Status[Status[\"ENOSTR\"] = 60] = \"ENOSTR\";\n    Status[Status[\"ENODATA\"] = 61] = \"ENODATA\";\n    Status[Status[\"ETIME\"] = 62] = \"ETIME\";\n    Status[Status[\"ENOSR\"] = 63] = \"ENOSR\";\n    Status[Status[\"ENONET\"] = 64] = \"ENONET\";\n    Status[Status[\"ENOPKG\"] = 65] = \"ENOPKG\";\n    Status[Status[\"EREMOTE\"] = 66] = \"EREMOTE\";\n    Status[Status[\"ENOLINK\"] = 67] = \"ENOLINK\";\n    Status[Status[\"EADV\"] = 68] = \"EADV\";\n    Status[Status[\"ESRMNT\"] = 69] = \"ESRMNT\";\n    Status[Status[\"ECOMM\"] = 70] = \"ECOMM\";\n    Status[Status[\"EPROTO\"] = 71] = \"EPROTO\";\n    Status[Status[\"EMULTIHOP\"] = 72] = \"EMULTIHOP\";\n    Status[Status[\"EDOTDOT\"] = 73] = \"EDOTDOT\";\n    Status[Status[\"EBADMSG\"] = 74] = \"EBADMSG\";\n    Status[Status[\"EOVERFLOW\"] = 75] = \"EOVERFLOW\";\n    Status[Status[\"ENOTUNIQ\"] = 76] = \"ENOTUNIQ\";\n    Status[Status[\"EBADFD\"] = 77] = \"EBADFD\";\n    Status[Status[\"EREMCHG\"] = 78] = \"EREMCHG\";\n    Status[Status[\"ELIBACC\"] = 79] = \"ELIBACC\";\n    Status[Status[\"ELIBBAD\"] = 80] = \"ELIBBAD\";\n    Status[Status[\"ELIBSCN\"] = 81] = \"ELIBSCN\";\n    Status[Status[\"ELIBMAX\"] = 82] = \"ELIBMAX\";\n    Status[Status[\"ELIBEXEC\"] = 83] = \"ELIBEXEC\";\n    Status[Status[\"EILSEQ\"] = 84] = \"EILSEQ\";\n    Status[Status[\"ERESTART\"] = 85] = \"ERESTART\";\n    Status[Status[\"ESTRPIPE\"] = 86] = \"ESTRPIPE\";\n    Status[Status[\"EUSERS\"] = 87] = \"EUSERS\";\n    Status[Status[\"ENOTSOCK\"] = 88] = \"ENOTSOCK\";\n    Status[Status[\"EDESTADDRREQ\"] = 89] = \"EDESTADDRREQ\";\n    Status[Status[\"EMSGSIZE\"] = 90] = \"EMSGSIZE\";\n    Status[Status[\"EPROTOTYPE\"] = 91] = \"EPROTOTYPE\";\n    Status[Status[\"ENOPROTOOPT\"] = 92] = \"ENOPROTOOPT\";\n    Status[Status[\"EPROTONOSUPPORT\"] = 93] = \"EPROTONOSUPPORT\";\n    Status[Status[\"ESOCKTNOSUPPORT\"] = 94] = \"ESOCKTNOSUPPORT\";\n    Status[Status[\"EOPNOTSUPP\"] = 95] = \"EOPNOTSUPP\";\n    Status[Status[\"EPFNOSUPPORT\"] = 96] = \"EPFNOSUPPORT\";\n    Status[Status[\"EAFNOSUPPORT\"] = 97] = \"EAFNOSUPPORT\";\n    Status[Status[\"EADDRINUSE\"] = 98] = \"EADDRINUSE\";\n    Status[Status[\"EADDRNOTAVAIL\"] = 99] = \"EADDRNOTAVAIL\";\n    Status[Status[\"ENETDOWN\"] = 100] = \"ENETDOWN\";\n    Status[Status[\"ENETUNREACH\"] = 101] = \"ENETUNREACH\";\n    Status[Status[\"ENETRESET\"] = 102] = \"ENETRESET\";\n    Status[Status[\"ECONNABORTED\"] = 103] = \"ECONNABORTED\";\n    Status[Status[\"ECONNRESET\"] = 104] = \"ECONNRESET\";\n    Status[Status[\"ENOBUFS\"] = 105] = \"ENOBUFS\";\n    Status[Status[\"EISCONN\"] = 106] = \"EISCONN\";\n    Status[Status[\"ENOTCONN\"] = 107] = \"ENOTCONN\";\n    Status[Status[\"ESHUTDOWN\"] = 108] = \"ESHUTDOWN\";\n    Status[Status[\"ETOOMANYREFS\"] = 109] = \"ETOOMANYREFS\";\n    Status[Status[\"ETIMEDOUT\"] = 110] = \"ETIMEDOUT\";\n    Status[Status[\"ECONNREFUSED\"] = 111] = \"ECONNREFUSED\";\n    Status[Status[\"EHOSTDOWN\"] = 112] = \"EHOSTDOWN\";\n    Status[Status[\"EHOSTUNREACH\"] = 113] = \"EHOSTUNREACH\";\n    Status[Status[\"EALREADY\"] = 114] = \"EALREADY\";\n    Status[Status[\"EINPROGRESS\"] = 115] = \"EINPROGRESS\";\n    Status[Status[\"ESTALE\"] = 116] = \"ESTALE\";\n    Status[Status[\"EUCLEAN\"] = 117] = \"EUCLEAN\";\n    Status[Status[\"ENOTNAM\"] = 118] = \"ENOTNAM\";\n    Status[Status[\"ENAVAIL\"] = 119] = \"ENAVAIL\";\n    Status[Status[\"EISNAM\"] = 120] = \"EISNAM\";\n    Status[Status[\"EREMOTEIO\"] = 121] = \"EREMOTEIO\";\n    Status[Status[\"EDQUOT\"] = 122] = \"EDQUOT\";\n    Status[Status[\"ENOMEDIUM\"] = 123] = \"ENOMEDIUM\";\n    Status[Status[\"EMEDIUMTYPE\"] = 124] = \"EMEDIUMTYPE\";\n    Status[Status[\"ECANCELED\"] = 125] = \"ECANCELED\";\n    Status[Status[\"ENOKEY\"] = 126] = \"ENOKEY\";\n    Status[Status[\"EKEYEXPIRED\"] = 127] = \"EKEYEXPIRED\";\n    Status[Status[\"EKEYREVOKED\"] = 128] = \"EKEYREVOKED\";\n    Status[Status[\"EKEYREJECTED\"] = 129] = \"EKEYREJECTED\";\n    Status[Status[\"EOWNERDEAD\"] = 130] = \"EOWNERDEAD\";\n    Status[Status[\"ENOTRECOVERABLE\"] = 131] = \"ENOTRECOVERABLE\";\n})(Status || (Status = {}));\nclass PError {\n    code;\n    constructor(code) {\n        this.code = code;\n        Object.setPrototypeOf(this, PError.prototype);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/public/status.ts\n");

/***/ }),

/***/ "./src/shared/proc.ts":
/*!****************************!*\
  !*** ./src/shared/proc.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MessageType\": () => (/* binding */ MessageType)\n/* harmony export */ });\nvar MessageType;\n(function (MessageType) {\n    MessageType[MessageType[\"READY\"] = 0] = \"READY\";\n    MessageType[MessageType[\"START\"] = 1] = \"START\";\n    MessageType[MessageType[\"READ\"] = 2] = \"READ\";\n    MessageType[MessageType[\"WRITE\"] = 3] = \"WRITE\";\n    MessageType[MessageType[\"OPEN\"] = 4] = \"OPEN\";\n    MessageType[MessageType[\"CLOSE\"] = 5] = \"CLOSE\";\n    MessageType[MessageType[\"GETDENTS\"] = 6] = \"GETDENTS\";\n    MessageType[MessageType[\"GETCWD\"] = 7] = \"GETCWD\";\n    MessageType[MessageType[\"EXEC\"] = 8] = \"EXEC\";\n    MessageType[MessageType[\"CHCWD\"] = 9] = \"CHCWD\";\n    MessageType[MessageType[\"DIE\"] = 10] = \"DIE\";\n    MessageType[MessageType[\"MOUNT\"] = 11] = \"MOUNT\";\n    MessageType[MessageType[\"UNMOUNT\"] = 12] = \"UNMOUNT\";\n    MessageType[MessageType[\"MKDIR\"] = 13] = \"MKDIR\";\n    MessageType[MessageType[\"RMDIR\"] = 14] = \"RMDIR\";\n    MessageType[MessageType[\"READ_RES\"] = 15] = \"READ_RES\";\n    MessageType[MessageType[\"WRITE_RES\"] = 16] = \"WRITE_RES\";\n    MessageType[MessageType[\"OPEN_RES\"] = 17] = \"OPEN_RES\";\n    MessageType[MessageType[\"GETDENTS_RES\"] = 18] = \"GETDENTS_RES\";\n    MessageType[MessageType[\"GETCWD_RES\"] = 19] = \"GETCWD_RES\";\n    MessageType[MessageType[\"EXEC_RES\"] = 20] = \"EXEC_RES\";\n    MessageType[MessageType[\"CHCWD_RES\"] = 21] = \"CHCWD_RES\";\n    MessageType[MessageType[\"MOUNT_RES\"] = 22] = \"MOUNT_RES\";\n    MessageType[MessageType[\"UNMOUNT_RES\"] = 23] = \"UNMOUNT_RES\";\n    MessageType[MessageType[\"MKDIR_RES\"] = 24] = \"MKDIR_RES\";\n    MessageType[MessageType[\"RMDIR_RES\"] = 25] = \"RMDIR_RES\";\n    MessageType[MessageType[\"ERROR\"] = 26] = \"ERROR\";\n})(MessageType || (MessageType = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2hhcmVkL3Byb2MudHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUtBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Bvc3NpbXBpYmxlLy4vc3JjL3NoYXJlZC9wcm9jLnRzPzBlOTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtGaWxlRGVzY3JpcHRvciwgSURpcmVjdG9yeUVudHJ5LCBPcGVuT3B0aW9uc30gZnJvbSBcIi4uL3B1YmxpYy9hcGlcIjtcbmltcG9ydCB7U3RhdHVzfSBmcm9tIFwiLi4vcHVibGljL3N0YXR1c1wiO1xuXG5leHBvcnQgdHlwZSBNZXNzYWdlSUQgPSBzdHJpbmdcblxuZXhwb3J0IGVudW0gTWVzc2FnZVR5cGV7XG4gICAgUkVBRFksXG4gICAgU1RBUlQsXG4gICAgUkVBRCxcbiAgICBXUklURSxcbiAgICBPUEVOLFxuICAgIENMT1NFLFxuICAgIEdFVERFTlRTLFxuICAgIEdFVENXRCxcbiAgICBFWEVDLFxuICAgIENIQ1dELFxuICAgIERJRSxcbiAgICBNT1VOVCxcbiAgICBVTk1PVU5ULFxuICAgIE1LRElSLFxuICAgIFJNRElSLFxuXG5cbiAgICBSRUFEX1JFUyxcbiAgICBXUklURV9SRVMsXG4gICAgT1BFTl9SRVMsXG4gICAgR0VUREVOVFNfUkVTLFxuICAgIEdFVENXRF9SRVMsXG4gICAgRVhFQ19SRVMsXG4gICAgQ0hDV0RfUkVTLFxuICAgIE1PVU5UX1JFUyxcbiAgICBVTk1PVU5UX1JFUyxcbiAgICBNS0RJUl9SRVMsXG4gICAgUk1ESVJfUkVTLFxuICAgIEVSUk9SLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9jTWVzc2FnZXtcbiAgICB0eXBlOiBNZXNzYWdlVHlwZVxuICAgIGlkOiBNZXNzYWdlSURcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRGVwZW5kZW5jeXtcbiAgICBuYW1lOnN0cmluZyxcbiAgICBjb2RlOnN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9jU3RhcnQgZXh0ZW5kcyBJUHJvY01lc3NhZ2V7XG4gICAgdHlwZTogTWVzc2FnZVR5cGUuU1RBUlQsXG4gICAgY29kZTogc3RyaW5nLFxuICAgIGFyZ3Y6IHN0cmluZ1tdLFxuICAgIGR5bmE6IElEZXBlbmRlbmN5W10sXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVByb2NSZWFkIGV4dGVuZHMgSVByb2NNZXNzYWdle1xuICAgIHR5cGU6IE1lc3NhZ2VUeXBlLlJFQUQsXG4gICAgZmQ6IEZpbGVEZXNjcmlwdG9yLFxuICAgIGNvdW50OiBudW1iZXJcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUHJvY1JlYWRSZXMgZXh0ZW5kcyBJUHJvY01lc3NhZ2V7XG4gICAgdHlwZTogTWVzc2FnZVR5cGUuUkVBRF9SRVMsXG4gICAgYnVmOiBzdHJpbmdcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9jV3JpdGUgZXh0ZW5kcyBJUHJvY01lc3NhZ2V7XG4gICAgdHlwZTogTWVzc2FnZVR5cGUuV1JJVEUsXG4gICAgZmQ6IEZpbGVEZXNjcmlwdG9yLFxuICAgIGJ1Zjogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVByb2NXcml0ZVJlcyBleHRlbmRzIElQcm9jTWVzc2FnZXtcbiAgICB0eXBlOiBNZXNzYWdlVHlwZS5XUklURV9SRVMsXG4gICAgY291bnQ6IG51bWJlclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9jT3BlbiBleHRlbmRzIElQcm9jTWVzc2FnZXtcbiAgICB0eXBlOk1lc3NhZ2VUeXBlLk9QRU4sXG4gICAgcGF0aDogc3RyaW5nLFxuICAgIGZsYWdzOiBPcGVuT3B0aW9uc1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9jT3BlblJlcyBleHRlbmRzIElQcm9jTWVzc2FnZXtcbiAgICB0eXBlOk1lc3NhZ2VUeXBlLk9QRU5fUkVTLFxuICAgIGZkOkZpbGVEZXNjcmlwdG9yXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVByb2NDbG9zZSBleHRlbmRzIElQcm9jTWVzc2FnZXtcbiAgICB0eXBlOk1lc3NhZ2VUeXBlLkNMT1NFLFxuICAgIGZkOkZpbGVEZXNjcmlwdG9yXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVByb2NHZXRERW50cyBleHRlbmRzIElQcm9jTWVzc2FnZXtcbiAgICB0eXBlOk1lc3NhZ2VUeXBlLkdFVERFTlRTLFxuICAgIGZkOkZpbGVEZXNjcmlwdG9yLFxuICAgIGNvdW50OiBudW1iZXIsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVByb2NHZXRERW50c1JlcyBleHRlbmRzIElQcm9jTWVzc2FnZXtcbiAgICB0eXBlOk1lc3NhZ2VUeXBlLkdFVERFTlRTX1JFUyxcbiAgICBkaXJlbnRzOiBJRGlyZWN0b3J5RW50cnlbXVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9jR2V0Q3dkIGV4dGVuZHMgSVByb2NNZXNzYWdle1xuICAgIHR5cGU6IE1lc3NhZ2VUeXBlLkdFVENXRCxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUHJvY0dldEN3ZFJlcyBleHRlbmRzIElQcm9jTWVzc2FnZXtcbiAgICB0eXBlOiBNZXNzYWdlVHlwZS5HRVRDV0RfUkVTLFxuICAgIGN3ZDogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVByb2NFeGVjIGV4dGVuZHMgSVByb2NNZXNzYWdle1xuICAgIHR5cGU6IE1lc3NhZ2VUeXBlLkVYRUMsXG4gICAgcGF0aDogc3RyaW5nXG4gICAgYXJndjogc3RyaW5nW11cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUHJvY0V4ZWNSZXMgZXh0ZW5kcyBJUHJvY01lc3NhZ2V7XG4gICAgdHlwZTogTWVzc2FnZVR5cGUuRVhFQ19SRVMsXG4gICAgcGlkOm51bWJlclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9jQ2hDd2QgZXh0ZW5kcyBJUHJvY01lc3NhZ2V7XG4gICAgdHlwZTogTWVzc2FnZVR5cGUuQ0hDV0QsXG4gICAgcGF0aDogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVByb2NDaEN3ZFJlcyBleHRlbmRzIElQcm9jTWVzc2FnZXtcbiAgICB0eXBlOiBNZXNzYWdlVHlwZS5DSENXRF9SRVNcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUHJvY0RpZSBleHRlbmRzIElQcm9jTWVzc2FnZXtcbiAgICB0eXBlOiBNZXNzYWdlVHlwZS5ESUVcbiAgICBzdGF0dXM6IFN0YXR1c1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9jTW91bnQgZXh0ZW5kcyBJUHJvY01lc3NhZ2V7XG4gICAgdHlwZTogTWVzc2FnZVR5cGUuTU9VTlQsXG4gICAgZnN0eXBlOiBzdHJpbmcsXG4gICAgZGV2aWNlOiBzdHJpbmcsXG4gICAgb3B0aW9uczogc3RyaW5nLFxuICAgIG1vdW50cG9pbnQ6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9jTW91bnRSZXMgZXh0ZW5kcyBJUHJvY01lc3NhZ2V7XG4gICAgdHlwZTogTWVzc2FnZVR5cGUuTU9VTlRfUkVTXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVByb2NVbm1vdW50IGV4dGVuZHMgSVByb2NNZXNzYWdle1xuICAgIHR5cGU6IE1lc3NhZ2VUeXBlLlVOTU9VTlQsXG4gICAgcGF0aDogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVByb2NVbm1vdW50UmVzIGV4dGVuZHMgSVByb2NNZXNzYWdle1xuICAgIHR5cGU6IE1lc3NhZ2VUeXBlLlVOTU9VTlRfUkVTLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9jTWtkaXIgZXh0ZW5kcyBJUHJvY01lc3NhZ2V7XG4gICAgdHlwZTogTWVzc2FnZVR5cGUuTUtESVIsXG4gICAgcGF0aDogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVByb2NNa2RpclJlcyBleHRlbmRzIElQcm9jTWVzc2FnZXtcbiAgICB0eXBlOiBNZXNzYWdlVHlwZS5NS0RJUl9SRVNcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUHJvY1JtZGlyIGV4dGVuZHMgSVByb2NNZXNzYWdle1xuICAgIHR5cGU6IE1lc3NhZ2VUeXBlLlJNRElSLFxuICAgIHBhdGg6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9jUm1kaXJSZXMgZXh0ZW5kcyBJUHJvY01lc3NhZ2V7XG4gICAgdHlwZTogTWVzc2FnZVR5cGUuUk1ESVJfUkVTXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVByb2NFcnJvciBleHRlbmRzIElQcm9jTWVzc2FnZXtcbiAgICB0eXBlOiBNZXNzYWdlVHlwZS5FUlJPUixcbiAgICBjb2RlOiBTdGF0dXNcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/shared/proc.ts\n");

/***/ }),

/***/ "./src/vm/devicetree.ts":
/*!******************************!*\
  !*** ./src/vm/devicetree.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DeviceDetail\": () => (/* binding */ DeviceDetail),\n/* harmony export */   \"discover\": () => (/* binding */ discover)\n/* harmony export */ });\nfunction DeviceDetail(id, properties) {\n    return {\n        id,\n        properties,\n    };\n}\nfunction discover(attach) {\n    return attach;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdm0vZGV2aWNldHJlZS50cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Bvc3NpbXBpYmxlLy4vc3JjL3ZtL2RldmljZXRyZWUudHM/ZTBjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIElEZXZpY2VQcm9wZXJ0aWVze1xuICAgIGNvbXBhdGliaWxpdHk6IHN0cmluZ1tdXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURldmljZURlc2NyaXB0aW9ue1xuICAgIGlkOiBzdHJpbmcsXG4gICAgcHJvcGVydGllczogSURldmljZVByb3BlcnRpZXNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIERldmljZURldGFpbDxUIGV4dGVuZHMgSURldmljZVByb3BlcnRpZXM+KGlkOiBzdHJpbmcsIHByb3BlcnRpZXM6IFQpOiBJRGV2aWNlRGVzY3JpcHRpb257XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaWQsXG4gICAgICAgIHByb3BlcnRpZXMsXG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElEZXZpY2VUcmVlIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIGxhYmVsPzogc3RyaW5nO1xuICAgIHZhbHVlPzogYW55O1xuICAgIGNoaWxkcmVuPzogSURldmljZVRyZWVbXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpc2NvdmVyKGF0dGFjaDogSURldmljZURlc2NyaXB0aW9uW10pOiBJRGV2aWNlRGVzY3JpcHRpb25bXXtcbiAgICByZXR1cm4gYXR0YWNoO1xufVxuXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/vm/devicetree.ts\n");

/***/ }),

/***/ "./src/vm/vm.ts":
/*!**********************!*\
  !*** ./src/vm/vm.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"VirtualMachine\": () => (/* binding */ VirtualMachine)\n/* harmony export */ });\nclass VirtualMachine {\n    devices;\n    constructor(ds) {\n        this.devices = ds;\n    }\n    async boot(kernel) {\n        return await kernel.boot(this.devices);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdm0vdm0udHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Bvc3NpbXBpYmxlLy4vc3JjL3ZtL3ZtLnRzPzg0MjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtLZXJuZWx9IGZyb20gXCIuLi9rZXJuZWwva2VybmVsXCI7XG5pbXBvcnQge0lEZXZpY2VEZXNjcmlwdGlvbiwgSURldmljZVRyZWV9IGZyb20gXCIuL2RldmljZXRyZWVcIjtcblxuZXhwb3J0IGNsYXNzIFZpcnR1YWxNYWNoaW5le1xuICAgIHByaXZhdGUgZGV2aWNlczogSURldmljZURlc2NyaXB0aW9uW107XG5cbiAgICBjb25zdHJ1Y3RvcihkczogSURldmljZURlc2NyaXB0aW9uW10pIHtcbiAgICAgICAgdGhpcy5kZXZpY2VzID0gZHM7XG4gICAgfVxuXG4gICAgYXN5bmMgYm9vdChrZXJuZWw6IEtlcm5lbCl7XG4gICAgICAgIHJldHVybiBhd2FpdCBrZXJuZWwuYm9vdCh0aGlzLmRldmljZXMpO1xuICAgIH1cbn1cblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/vm/vm.ts\n");

/***/ }),

/***/ "./dist/initrd.img":
/*!*************************!*\
  !*** ./dist/initrd.img ***!
  \*************************/
/***/ ((module) => {

module.exports = "data:application/octet-stream;base64,";

/***/ }),

/***/ "./dist/worker.img":
/*!*************************!*\
  !*** ./dist/worker.img ***!
  \*************************/
/***/ ((module) => {

module.exports = "data:application/octet-stream;base64,";

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"vm": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkpossimpible"] = self["webpackChunkpossimpible"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["chunk-vendors"], () => (__webpack_require__("./src/main.ts")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;